//////////////////////
////   GLOBALS
//////////////////////
Texture2D shaderTexture;
SamplerState SampleType;


//https://gamedev.stackexchange.com/questions/32681/random-number-hlsl
float rand_1_05(in float2 uv)
{
    float2 noise = (frac(sin(dot(uv ,float2(12.9898,78.233)*2.0)) * 43758.5453));
    return abs(noise.x + noise.y) * 0.5;
}

float2 rand_2_10(in float2 uv) {
    float noiseX = (frac(sin(dot(uv, float2(12.9898,78.233) * 2.0)) * 43758.5453));
    float noiseY = sqrt(1 - noiseX * noiseX);
    return float2(noiseX, noiseY);
}

float2 rand_2_0004(in float2 uv)
{
    float noiseX = (frac(sin(dot(uv, float2(12.9898,78.233)      )) * 43758.5453));
    float noiseY = (frac(sin(dot(uv, float2(12.9898,78.233) * 2.0)) * 43758.5453));
    return float2(noiseX, noiseY) * 0.004;
}

// Source
// http://www.gamedev.net/topic/592001-random-number-generation-based-on-time-in-hlsl/
// Supposebly from the NVidia Direct3D10 SDK
// Slightly modified for my purposes
#define RANDOM_IA 16807
#define RANDOM_IM 2147483647
#define RANDOM_AM (1.0f/float(RANDOM_IM))
#define RANDOM_IQ 127773u
#define RANDOM_IR 2836
#define RANDOM_MASK 123459876

struct NumberGenerator {
    int seed; // Used to generate values.

    // Returns the current random float.
    float GetCurrentFloat() {
        Cycle();
        return RANDOM_AM * seed;
    }

    // Returns the current random int.
    int GetCurrentInt() {
        Cycle();
        return seed;
    }

    // Generates the next number in the sequence.
    void Cycle() {  
        seed ^= RANDOM_MASK;
        int k = seed / RANDOM_IQ;
        seed = RANDOM_IA * (seed - k * RANDOM_IQ ) - RANDOM_IR * k;

        if (seed < 0 ) 
            seed += RANDOM_IM;

        seed ^= RANDOM_MASK;
    }

    // Cycles the generator based on the input count. Useful for generating a thread unique seed.
    // PERFORMANCE - O(N)
    void Cycle(const uint _count) {
        for (uint i = 0; i < _count; ++i)
            Cycle();
    }

    // Returns a random float within the input range.
    float GetRandomFloat(const float low, const float high) {
        float v = GetCurrentFloat();
        return low * ( 1.0f - v ) + high * v;
    }

    // Sets the seed
    void SetSeed(const uint value) {
        seed = int(value);
        Cycle();
    }
};


SamplerState textureSampler
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};


/*cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float specularPower;
	float4 specularColor;
};*/

/*cbuffer LightBuffer :register(b1)
{
	float4 ambientColor;
	float4 diffuseColor;
	float4 specularColor;
	float3 lightDirection;
	float padding0;
	float3 lightPosition;
	float lightextras.y;
};*/


cbuffer LightBuffer //:register(b1)
{
	float4 ambientColor;
	float4 diffuseColor;
	float4 specularColor;
	float4 lightDirection;
	float4 lightPosition;
	float4 lightextras; // z for grid types // 
	float4 gridcolor;
	float4 cursorcolor;



	//float padding0;
	//float3 lightPosition;
	//float lightextras.y;
};



/*
cbuffer OVRDir :register(b2)
{
	float4 ovrdirf;
	float4 ovrdiru;
	float4 ovrdirr;
	float4 ovrpos;
};
*/


//////////////////////
////   TYPES
//////////////////////
struct PixelInputType
{
	float4 position : SV_POSITION;
	float4 color : COLOR0; //byte map index xyz and w for typeofface 0 to 5
	float3 normal : NORMAL0;
	float paddingvert0 : PSIZE0;	//instance width
	float2 tex : TEXCOORD0;
	float paddingvert1 : PSIZE1;	//instance height
	float paddingvert2 : PSIZE2;	//instance depth
	float4 instancePosition : POSITION1;
	float4 instanceRadRotFORWARD : POSITION2;
	float4 instanceRadRotRIGHT : POSITION3;
	float4 instanceRadRotUP : POSITION4;
	float4 mapmatrix0 : POSITION5;
	float4 mapmatrix1 : POSITION6;
	float4 mapmatrix2 : POSITION7;
	float4 mapmatrix3 : POSITION8;
	float4 mapmatrix4 : POSITION9;
	float4 mapmatrix5 : POSITION10;
	float4 mapmatrix6 : POSITION11;
	float4 mapmatrix7 : POSITION12;
	float4 mapmatrix8 : POSITION13;
	float4 mapmatrix9 : POSITION14;
	float4 mapmatrix10 : POSITION15;
	float4 mapmatrix11 : POSITION16;
	float4 mapmatrix12 : POSITION17;
	float4 mapmatrix13 : POSITION18;
	float4 mapmatrix14 : POSITION19;
	float4 mapmatrix15 : POSITION20;

	/*float4 heightmapmat0 : POSITION21;
	float4 heightmapmat1 : POSITION22;
	float4 heightmapmat2 : POSITION23;
	float4 heightmapmat3 : POSITION24;*/

	/*int one : PSIZE3;	
	int oneTwo : PSIZE4;
	int two : PSIZE5;	
	int twoTwo : PSIZE6;	
	int three : PSIZE7;	
	int threeTwo : PSIZE8;	
	int four : PSIZE9;	
	int fourTwo : PSIZE10;*/
	int xindex : PSIZE3;	
	int yindex : PSIZE4;
};

//float _lastDOTProdAngleWithHypAndOpp = -1;
static const float PI = 3.1415926535897932384626433832795f;
static const float3 world_forward = float3(0,0,1);
static const float3 world_backward = float3(0,0,-1);
static const float3 world_right = float3(1,0,0);
static const float3 world_left = float3(-1,0,0);
static const float3 world_up = float3(0,1,0);
static const float3 world_down = float3(0,-1,0);




static float dstX= 0;
static float dstY= 0;
static float dstZ = 0;
static float dstX_vs_dstZ = 0;
static float dstX_vs_dstY = 0;
static float dstY_vs_dstZ = 0;



float trying_ellipsoid_with_sc_sebastian_lague_check_distanceconvertedto3dkinda(float3 nodeA, float3 nodeB)
{
    //SEBASTIEN LAGUE 2D BLUEPRINT FOR NODE DIAGONAL OR NOT DISTANCE.
    /*var dstX = Math.Abs((nodeA.X) - (nodeB.X));
    var dstZ = abs((nodeA.y) - (nodeB.y));

    if (dstX > dstZ)
    {
        return 14 * dstZ + 10 * (dstX - dstZ);
    }
    return 14 * dstX + 10 * (dstZ - dstX);*/


    dstX = abs((nodeA.x) - (nodeB.x));
    dstY = abs((nodeA.y) - (nodeB.y));
    dstZ = abs((nodeA.z) - (nodeB.z));

    dstX_vs_dstZ = 0;
    dstX_vs_dstY = 0;

    if (dstX > dstZ)
    {
        dstX_vs_dstZ = 14 * dstZ + 10 * (dstX - dstZ);
    }
    else
    {
        dstX_vs_dstZ = 14 * dstX + 10 * (dstZ - dstX);
    }

    if (dstX > dstY)
    {
        dstX_vs_dstY = 14 * dstY + 10 * (dstX - dstY);
    }
    else
    {
        dstX_vs_dstY = 14 * dstX + 10 * (dstY - dstX);
    }

    /*if (dstX_vs_dstY > dstX_vs_dstZ)
    {
        return dstX_vs_dstY;
    }
    else
    {
        return dstX_vs_dstZ;
    }*/

    return dstX_vs_dstY + dstX_vs_dstZ;
}







float sc_check_distance_node_3d_geometry(float3 nodeA, float3 nodeB, float minx, float miny, float minz, float maxx, float maxy, float maxz) 
{
	//STEVE CHASSï¿½ 3D blueprint for sphere type and a ton more. based on 2d version of Sebastian Lague. but my version is not perfect. i don't know yet what else to put in there.
	//the solution was easier than i thought and it came to me quite fast after fearing for months i'd never be able to quickly get this function written. This function is also a
	//main part of the upgrade that i want to implement to the Jitter physics engine for spatial awareness. In the jitter physics engine, it seems as if every frame that the objects
	//are enabled and non-static, jitter checks ALL bounding boxes for collisions between all of them. So of course at some point, the more objects in the scene, the more bounding
	//boxes it has to check for each individual objects. for instance, lets say there is 1000 objects in the scene, so index 0 to index 999, if object 0 checks against ALL other
	//998 objects, it's a huge waste of performance. But there are collision "islands" in the jitter physics engine but those i believe are chosen only when bounding boxes are 
	//officially declared as colliding. so i want to see if i can use a fast distance checker (which i didnt test yet against Math.Sqrt or the very fast quake sqrt). But all of
	//the things i learned in doing chunks are also going to be needed for when im going to start developing things around and inside of the Jitter Physics Engine. So prior upgrading the physics
	//engine jitter for my engine sccoresystems, i can only have 4000 max objects and it would lag the scene. but the tests are not carved on rock yet because, 
	//1. im not loading the dll how i should maybe
	//2. maybe because multiple instances of the physics engine like i am loading them isn't the proper way to do it? in monogame, to load different scene instances, they use 
	//   Activator.CreateInstance and i was unable to use that anywhere back then. I might try again at some point... But right now i am using an interface. In sccsv10
	//


	dstX = abs((nodeA.x) - (nodeB.x));
	dstY = abs((nodeA.y) - (nodeB.y));
	dstZ = abs((nodeA.z) - (nodeB.z));

	dstX_vs_dstZ = 0;
	dstX_vs_dstY = 0;
	dstY_vs_dstZ = 0;

	if (dstX > dstZ)
	{
		dstX_vs_dstZ = maxx * dstZ + minx * (dstX - dstZ);
	}
	else
	{
		dstX_vs_dstZ = maxx * dstX + minx * (dstZ - dstX);
	}

	if (dstX > dstY)
	{
		dstX_vs_dstY = maxy * dstY + miny * (dstX - dstY);
	}
	else
	{
		dstX_vs_dstY = maxy * dstX + miny * (dstY - dstX);
	}

	if (dstY > dstZ)
	{
		dstY_vs_dstZ = maxz * dstZ + minz * (dstY - dstZ);
	}
	else
	{
		dstY_vs_dstZ = maxz * dstY + minz * (dstZ - dstY);
	}
	return dstX_vs_dstY + dstX_vs_dstZ + dstY_vs_dstZ;
}

static float4 the_color = float4(1.0f,1.0f,1.0f,1.0f);// float4(0.95f,0.95f,0.95f,1);

static int tinyChunkWidth = 8;
static int tinyChunkHeight = 8;
static int tinyChunkDepth = 1;


static float4 gridcolorred = float4(1,0,0,1);
static float4 gridcolorgreen = float4(0.45f,1,0.45f,1);
static float4 gridcolorblue = float4(0,0,1,1);
static float4 gridcolorgray = float4(0.15f,0.15f,0.15f,1);
static float4 gridcolorblack = float4(0.0f,0.0f,0.0f,1);
static float4 gridcolorwhite = float4(1.0f,1.0f,1.0f,1);

static float4 cursorcolorred = float4(1,0.45f,0.45f,1);
static float4 cursorcolorgreen = float4(0.45f,1,0.45f,1);
static float4 cursorcolorblue = float4(0.45f,0.45f,1,1);
static float4 cursorcolorgray = float4(0.15f,0.15f,0.15f,1);
static float4 cursorcolorblack = float4(0.0f,0.0f,0.0f,1);
static float4 cursorcolorwhite = float4(1.0f,1.0f,1.0f,1);



//////////////////////
////   Pixel Shader
/////////////////////
float4 TexturePixelShader(PixelInputType input) : SV_TARGET
{
	//float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;
	float3 reflection;
	float4 specular;

	// Sample the pixel color from the texture using the sampler at this texture coordinate location.
	//textureColor = shaderTexture.Sample(SampleType, input.tex);

	float4 somecolor =float4(1.0f,1.0f,1.0f,1.0f);// float4(0.95f,0.95f,0.95f,1.0f);
	
	//NORMALS CALCULATIONS
	//NORMALS CALCULATIONS
	//NORMALS CALCULATIONS
	float4 somemoddedinputcolor = the_color;// input.color;
	// WARNING==INPUT.COLOR IS NOT THE COLOR WHEN COMING IN, IT IS THE INDEX POSITION OF EACH BYTES X/Y/Z. BUT IN ORDER TO DISPLAY A COLOR, YOU NEED TO HAVE THIS PIXEL SHADER INPUT.COLOR 
	// SET TO THE DESIRED COLOR WHEN THIS HLSL METHOD FINISHES OTHERWISE YOU WILL GET A MULTICOLOR CHUNK BECAUSE THE INDEXES GO STRAIGHT FROM 0 TO THE WIDTH OF THE CHUNK FROM 0 TO 3 IN THE 
	// X/Y/Z AXIS AND THAT IS THE COLORS.

	float3 inputPos;// = float3();

	inputPos.x = input.position.x + input.instancePosition.x;// + somemoddedinputcolor.x;
	inputPos.y = input.position.y + input.instancePosition.y;// + somemoddedinputcolor.y;
	inputPos.z = input.position.z + input.instancePosition.z;// + somemoddedinputcolor.z;



	float3 altlightposition = lightPosition;//float3(0,2.0f,1.0f);
	float3 altlightdirection = lightDirection;//float3(0,-1.0f,0);

	int cursortypeoption = int(cursorcolor.w);
	int gridtypeoption = int(gridcolor.w);

	float someTester = 0;
	float distMod = 0;
	float4 modColor = float4(0,0,0,1.0f);
	float4 chosengridcolor = float4(0,0,0,1.0f);
	
	float4 lightextrasscreencapturetype = trunc(lightextras.w);
	float4 lightextrasrandomval = lightextras.w - trunc(lightextras.w);


	/*if(cursortypeoption == 0)
	{
		
	}
	else
	{
		altlightposition = lightPosition;
		altlightdirection = lightDirection;
	}*/

	/*
	altlightposition = lightPosition;
	altlightdirection = lightDirection;*/


	//altlightposition.y += 0.1f;

	//float3 lightDir;
	//float lightIntensity;
	float4 colorer;

	colorer = ambientColor;

	lightDir = -altlightdirection;

	//float distTot = sc_check_distance_node_3d_geometry(altlightposition, inputPos, 0.1f, 0.1f, 0.1f, 1, 1, 1);
	float distTot = sc_check_distance_node_3d_geometry(altlightposition, inputPos, 9, 9, 9, 9, 9, 9);
	//float distTot = sc_check_distance_node_3d_geometry(altlightposition, inputPos, 3, 3, 3, 3, 3, 3);
	//float distTot = sc_check_distance_node_3d_geometry(altlightposition, inputPos, 1, 1, 1, 1, 1, 1);

	//float distTot = sqrt(((altlightposition.x - inputPos.x)*(altlightposition.x - inputPos.x)) + ((altlightposition.y - inputPos.y)*(altlightposition.y - inputPos.y)) + ((altlightposition.z - inputPos.z)*(altlightposition.z - inputPos.z)));

	float3 dirLightToFace = altlightposition - inputPos;
	dirLightToFace /= distTot;

	float someOtherDot = dot(dirLightToFace, lightDir);

	if(someOtherDot >= 0)
	{
		float DOTProdAngleWithHypAndOpp = saturate(dot(input.normal, dirLightToFace));

		//someOtherDot =  (DOTProdAngleWithHypAndOpp + someOtherDot) * 0.5f;

		someTester = lightextras.y - distTot;
		distMod = someTester;



		distMod *= 0.1f;	 //0.01f // 0.1f // 0.5f
		modColor = colorer;

		modColor += (diffuseColor * (DOTProdAngleWithHypAndOpp)) * distMod;
		modColor = saturate(modColor);

		//DOTProdAngleWithHypAndOpp = saturate(dot(input.normal, dirLightToFace));

		somemoddedinputcolor = somecolor + DOTProdAngleWithHypAndOpp * modColor;// * modColor * 0.75f;

		/*if(input.normal.x == 1.0)
		{
			somemoddedinputcolor *= 0.555f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.x == -1.0)
		{
			somemoddedinputcolor *=  0.145f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.y == 1.0)
		{
			somemoddedinputcolor*=  0.475f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.y == -1.0)
		{
			somemoddedinputcolor*=  0.135f;//float4(0.15,0.95,0.15,1);
		}
		if(input.normal.z == 1.0)
		{
			somemoddedinputcolor *=  0.765f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.z == -1.0)
		{
			somemoddedinputcolor *=  0.35f;//float4(0.15,0.95,0.15,1);
		}*/

		if(input.normal.x == 1.0)
		{
			somemoddedinputcolor *= 0.550f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.x == -1.0)
		{
			somemoddedinputcolor *=  0.560f;//float4(0.15,0.95,0.15,1); // 0.145f
		}
	
		if(input.normal.y == 1.0)
		{
			somemoddedinputcolor*=  0.530f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.y == -1.0)
		{
			somemoddedinputcolor*=  0.540f;//float4(0.15,0.95,0.15,1); // 0.135f
		}
		if(input.normal.z == 1.0)
		{
			somemoddedinputcolor *=  0.570f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.z == -1.0)
		{
			somemoddedinputcolor *=  0.580f;//float4(0.15,0.95,0.15,1);
		}



	
		float somedot = dot(input.normal, dirLightToFace);

		if(somedot <= 0)
		{	
			// Invert the light direction for calculations.
			lightDir = - altlightdirection;

			// Calculate the amount of the light on this pixel.
			lightIntensity = saturate(dot(input.normal, dirLightToFace));

			somemoddedinputcolor *=  1 + (saturate(lightIntensity * somedot * distTot*0.35f));
		}
	}
	else
	{
		float DOTProdAngleWithHypAndOpp = saturate(dot(input.normal, dirLightToFace));

		//someOtherDot =  (DOTProdAngleWithHypAndOpp + someOtherDot) * 0.5f;

		someTester = lightextras.y - distTot;
		distMod = someTester;
		distMod *= 0.1f;	 //0.01f
		modColor = colorer;

		modColor += (diffuseColor * (DOTProdAngleWithHypAndOpp)) * distMod;
		modColor = saturate(modColor);


		//DOTProdAngleWithHypAndOpp = saturate(dot(input.normal, dirLightToFace));


		somemoddedinputcolor = somecolor + DOTProdAngleWithHypAndOpp * modColor;// * modColor * 0.75f;


		if(input.normal.x == 1.0)
		{
			somemoddedinputcolor *= 0.550f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.x == -1.0)
		{
			somemoddedinputcolor *=  0.560f;//float4(0.15,0.95,0.15,1); // 0.145f
		}
	
		if(input.normal.y == 1.0)
		{
			somemoddedinputcolor*=  0.530f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.y == -1.0)
		{
			somemoddedinputcolor*=  0.540f;//float4(0.15,0.95,0.15,1); // 0.135f
		}
		if(input.normal.z == 1.0)
		{
			somemoddedinputcolor *=  0.570f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.z == -1.0)
		{
			somemoddedinputcolor *=  0.580f;//float4(0.15,0.95,0.15,1);
		}
	}
	//NORMALS CALCULATIONS
	//NORMALS CALCULATIONS
	//NORMALS CALCULATIONS




















	int x = int(input.color.x);
	int y = int(input.color.y);
	int z = int(input.color.z);
	int facetype = int(input.color.w);







	//int instancesw = int(input.paddingvert0);
	//int instancesh = int(input.paddingvert1);
	//int instancesd = int(input.paddingvert2);

	int instancesw = 128;//int(input.paddingvert0); // 256 // 240 // 320 // 480 // 128 //120
	int instancesh = 72;//int(input.paddingvert1); // 128 // 135 // 180 // 270 // 72 //68
	int instancesd = 1;//int(input.paddingvert2);

	float screensinw = (round(input.paddingvert0) * 2);
	float screensinh = round((input.paddingvert0 - floor(input.paddingvert0)) * 10 * 2);

	int screenperw = 2;//int(input.paddingvert0); // 256 // 240 // 320 // 480
	int screenperh = 2;//int(input.paddingvert1); // 128 // 135 // 180 // 270
	int screenperdepth = 1;//int(input.paddingvert2);

	//10 instances width
	//10 instances height
	//1 instance depth

	//4 bytes width
	//4 bytes height
	//4 bytes depth

	//4 or 8 multiplier
	int oriscreenx = instancesw * 8; //80 when using 20 width instances in SC_GlobalsChunkKeyboard //// 192 <=> 768 
 	int oriscreeny = instancesh * 8; //40 when using 10 height instances in SC_GlobalsChunkKeyboard //// 108 <=> 432
	//*2 when more screens in scgraphicssec.cs

	float somemul = 1/oriscreenx; //80 when using 20 width instances in SC_GlobalsChunkKeyboard //// 192 <=> 768

	float4 textureColor;

	float2 test = input.tex;

	input.xindex = (instancesw) - 1 - input.xindex;

	//xindex == index of uv texture from left to right or right to left.
	//yindex == index of uv texture from top to bottom or bottom to top
	
	if(tinyChunkWidth == 4)
	{
		if(facetype == 0 || facetype == 1 || facetype == 2 || facetype == 3 || facetype == 4 || facetype == 5) // == 4 backface
		//if(facetype == 4) // == 4 backface
		{
			if(input.xindex == 0.0f  && input.yindex == 0.0f)
			{		
				//somemul = (1/80);
				if(x == 0 &&  z == tinyChunkDepth-1)
				{
					test = (test/ float2(oriscreenx,oriscreeny));
					float2 testY = input.tex;
					test.x = (test.x + (somemul * (input.xindex)));
					test.x = ((test.x) + (((1.0f/float(oriscreenx)) * 1) * (input.xindex + (x))));
					test.y = ((test.y) + (((1.0f/float(oriscreeny)) * 1) * (input.yindex + (tinyChunkHeight-1- y))));
					//test.x *=-1;
					input.tex = test;
					textureColor = shaderTexture.Sample(SampleType, input.tex);	
				}
				else if(x == 1 &&  z == tinyChunkDepth-1)
				{
					test = (test/ float2(oriscreenx,oriscreeny));
					float2 testY = input.tex;
					test.x = (test.x + (somemul * (input.xindex)));
					test.x = ((test.x) + (((1.0f/float(oriscreenx)) * 1) * (input.xindex + (x))));
					test.y = ((test.y) + (((1.0f/float(oriscreeny)) * 1) * (input.yindex + (tinyChunkHeight-1- y))));
					//test.x *=-1;
					input.tex = test;
					textureColor = shaderTexture.Sample(SampleType, input.tex);	
				}
				else if(x == 2 &&  z == tinyChunkDepth-1)
				{
					test = (test/ float2(oriscreenx,oriscreeny));
					float2 testY = input.tex;
					test.x = (test.x + (somemul * (input.xindex)));
					test.x = ((test.x) + (((1.0f/float(oriscreenx)) * 1) * (input.xindex + (x))));
					test.y = ((test.y) + (((1.0f/float(oriscreeny)) * 1) * (input.yindex + (tinyChunkHeight-1- y))));
					//test.x *=-1;
					input.tex = test;
					textureColor = shaderTexture.Sample(SampleType, input.tex);	
				}
				else if(x == 3 &&  z == tinyChunkDepth-1)
				{
					test = (test/ float2(oriscreenx,oriscreeny));
					float2 testY = input.tex;
					test.x = (test.x + (somemul * (input.xindex)));
					test.x = ((test.x) + (((1.0f/float(oriscreenx)) * 1) * (input.xindex + (x))));
					test.y = ((test.y) + (((1.0f/float(oriscreeny)) * 1) * (input.yindex + (tinyChunkHeight-1- y))));
					//test.x *=-1;
					input.tex = test;
					textureColor = shaderTexture.Sample(SampleType, input.tex);	
				}
				else 
				{
					textureColor = somecolor;
				}
			}
			else //if(input.xindex == 0.0f  && input.yindex == 1.0f)
			{		
				//somemul = (1/80);
				if(x == 0 && z == tinyChunkDepth-1)
				{
					test = (test/ float2(oriscreenx,oriscreeny));
					float2 testY = input.tex;
					test.x = (test.x + (somemul * (input.xindex)));
					test.x = ((test.x) + (((1.0f/float(oriscreenx)) * 1) * ((input.xindex * tinyChunkWidth) + (x))));
					//test.x = ((test.x) + (((1.0f/float(oriscreenx)) * 1) * (input.xindex + (x))));
					//test.x = ((test.x) + (((1.0f/float(oriscreenx)) * 1) * (input.xindex + (x))));
					//test.x = ((test.x) + (((1.0f/float(oriscreenx)) * 1) * (input.xindex + (x))));
					test.y = ((test.y) + (((1.0f/float(oriscreeny)) * 1) * ((input.yindex * tinyChunkHeight) + (tinyChunkHeight-1- y))));
					//test.x *=-1;
					input.tex = test;
					textureColor = shaderTexture.Sample(SampleType, input.tex);	
				}
				else if(x == 1 &&  z == tinyChunkDepth-1)
				{
					test = (test/ float2(oriscreenx,oriscreeny));
					float2 testY = input.tex;
					test.x = (test.x + (somemul * (input.xindex)));
					test.x = ((test.x) + (((1.0f/float(oriscreenx)) * 1) * ((input.xindex * tinyChunkWidth) + (x))));
					test.y = ((test.y) + (((1.0f/float(oriscreeny)) * 1) * ((input.yindex * tinyChunkHeight) + (tinyChunkHeight-1- y))));
					//test.x *=-1;
					input.tex = test;
					textureColor = shaderTexture.Sample(SampleType, input.tex);	
				}
				else if(x == 2 &&  z == tinyChunkDepth-1)
				{
					test = (test/ float2(oriscreenx,oriscreeny));
					float2 testY = input.tex;
					test.x = (test.x + (somemul * (input.xindex)));
					test.x = ((test.x) + (((1.0f/float(oriscreenx)) * 1) * ((input.xindex * tinyChunkWidth) + (x))));
					test.y = ((test.y) + (((1.0f/float(oriscreeny)) * 1) * ((input.yindex * tinyChunkHeight) + (tinyChunkHeight-1- y))));
					//test.x *=-1;
					input.tex = test;
					textureColor = shaderTexture.Sample(SampleType, input.tex);	
				}
				else if(x == 3 &&  z == tinyChunkDepth-1)
				{
					test = (test/ float2(oriscreenx,oriscreeny));
					float2 testY = input.tex;
					test.x = (test.x + (somemul * (input.xindex)));
					test.x = ((test.x) + (((1.0f/float(oriscreenx)) * 1) * ((input.xindex * tinyChunkWidth) + (x))));
					test.y = ((test.y) + (((1.0f/float(oriscreeny)) * 1) * ((input.yindex * tinyChunkHeight) + (tinyChunkHeight-1- y))));
					//test.x *=-1;
					input.tex = test;
					textureColor = shaderTexture.Sample(SampleType, input.tex);	
				}
				else 
				{
					textureColor = somecolor;
				}
			}
		}
		else
		{
			textureColor = somecolor;
		}
	}
	else if(tinyChunkWidth == 8)
	{

		if(facetype == 0 || facetype == 1 || facetype == 2 || facetype == 3 || facetype == 4 || facetype == 5) // == 4 backface
		//if(facetype == 0) // == 4 backface
		{
			/*if(input.xindex == 0.0f  && input.yindex == 0.0f)
			{	
				if(x >= 0 && z == tinyChunkDepth - 1 && x < tinyChunkWidth && z == tinyChunkDepth - 1) //x >= 0 && z == tinyChunkDepth - 1 && x < tinyChunkWidth && z == tinyChunkDepth - 1
				{
					test = (test/ float2(oriscreenx,oriscreeny));
					float2 testY = input.tex;
					test.x = (test.x + (somemul * (input.xindex)));
					test.x = ((test.x) + (((1.0f/float(oriscreenx)) * 1) * ((input.xindex * tinyChunkWidth) + (x))));
					//test.x = ((test.x) + (((1.0f/float(oriscreenx)) * 1) * (input.xindex + (x))));
					//test.x = ((test.x) + (((1.0f/float(oriscreenx)) * 1) * (input.xindex + (x))));
					//test.x = ((test.x) + (((1.0f/float(oriscreenx)) * 1) * (input.xindex + (x))));
					test.y = ((test.y) + (((1.0f/float(oriscreeny)) * 1) * ((input.yindex * tinyChunkHeight) + (tinyChunkHeight-1- y))));
					//test.x *=-1;
					input.tex = test;
					textureColor = shaderTexture.Sample(SampleType, input.tex);	
				}
				else{
					textureColor = somecolor;
				}
			}
			else{
				textureColor = somecolor;
			}*/

			if(facetype == 0)
			{
				test = (test/ float2(oriscreenx,oriscreeny));
				float2 testY = input.tex;
				test.x = (test.x + (somemul * (input.xindex)));
				test.x = ((test.x) + (((1.0f/float(oriscreenx)) * 1) * ((input.xindex * tinyChunkWidth) + (x))));
				test.y = ((test.y) + (((1.0f/float(oriscreeny)) * 1) * ((input.yindex * tinyChunkHeight) + (tinyChunkHeight-1- y))));
				//test.x *=-1;
				input.tex = test;

				textureColor = shaderTexture.Sample(SampleType, input.tex);
			}
			else
			{
				
				//DRAW TEXTURES ON SIDES
				test = (test/ float2(oriscreenx,oriscreeny));
				float2 testY = input.tex;
				test.x = (test.x + (somemul * (input.xindex)));
				test.x = ((test.x) + (((1.0f/float(oriscreenx)) * 1) * ((input.xindex * tinyChunkWidth) + (x))));
				test.y = ((test.y) + (((1.0f/float(oriscreeny)) * 1) * ((input.yindex * tinyChunkHeight) + (tinyChunkHeight-1- y))));
				//test.x *=-1;
				input.tex = test;
				textureColor = shaderTexture.Sample(SampleType, input.tex);
				//DRAW TEXTURES ON SIDES
				

				//DONT DRAW TEXTURES ON SIDES
				//textureColor = somemoddedinputcolor;
				//DONT DRAW TEXTURES ON SIDES
			}

			/*if(z == tinyChunkDepth - 1)
			{
				test = (test/ float2(oriscreenx,oriscreeny));
				float2 testY = input.tex;
				test.x = (test.x + (somemul * (input.xindex)));
				test.x = ((test.x) + (((1.0f/float(oriscreenx)) * 1) * ((input.xindex * tinyChunkWidth) + (x))));
				test.y = ((test.y) + (((1.0f/float(oriscreeny)) * 1) * ((input.yindex * tinyChunkHeight) + (tinyChunkHeight-1- y))));
				input.tex = test;
				textureColor = shaderTexture.Sample(SampleType, input.tex);	
			}
			else
			{
				textureColor = somecolor;
			}*/
		}
		else
		{
			textureColor = somecolor;
		}
	}
	else if(tinyChunkWidth == 16)
	{
		if(facetype == 0 || facetype == 1 || facetype == 2 || facetype == 3 || facetype == 4 || facetype == 5) // == 4 backface
		//if(facetype == 4) // == 4 backface
		{
			/*if(input.xindex == 0.0f  && input.yindex == 0.0f)
			{	
				if(x >= 0 && z == tinyChunkDepth - 1 && x < tinyChunkWidth && z == tinyChunkDepth - 1) //x >= 0 && z == tinyChunkDepth - 1 && x < tinyChunkWidth && z == tinyChunkDepth - 1
				{
					test = (test/ float2(oriscreenx,oriscreeny));
					float2 testY = input.tex;
					test.x = (test.x + (somemul * (input.xindex)));
					test.x = ((test.x) + (((1.0f/float(oriscreenx)) * 1) * ((input.xindex * tinyChunkWidth) + (x))));
					//test.x = ((test.x) + (((1.0f/float(oriscreenx)) * 1) * (input.xindex + (x))));
					//test.x = ((test.x) + (((1.0f/float(oriscreenx)) * 1) * (input.xindex + (x))));
					//test.x = ((test.x) + (((1.0f/float(oriscreenx)) * 1) * (input.xindex + (x))));
					test.y = ((test.y) + (((1.0f/float(oriscreeny)) * 1) * ((input.yindex * tinyChunkHeight) + (tinyChunkHeight-1- y))));
					//test.x *=-1;
					input.tex = test;
					textureColor = shaderTexture.Sample(SampleType, input.tex);	
				}
				else{
					textureColor = somecolor;
				}
			}
			else{
				textureColor = somecolor;
			}*/

			if(z == tinyChunkDepth - 1)
			{
				test = (test/ float2(oriscreenx,oriscreeny));
				float2 testY = input.tex;
				test.x = (test.x + (somemul * (input.xindex)));
				test.x = ((test.x) + (((1.0f/float(oriscreenx)) * 1) * ((input.xindex * tinyChunkWidth) + (x))));
				test.y = ((test.y) + (((1.0f/float(oriscreeny)) * 1) * ((input.yindex * tinyChunkHeight) + (tinyChunkHeight-1- y))));
				input.tex = test;
				textureColor = shaderTexture.Sample(SampleType, input.tex);	
			}
			else
			{
				textureColor = somecolor;
			}
		}
		else
		{
			textureColor = somecolor;
		}
	}



	
	//1 == no color //0 == colored screencapture screencapturecolororgrayscale
	//1 == no color //0 == colored screencapture screencapturecolororgrayscale
	if(lightextrasscreencapturetype.w == 1)
	{
		textureColor = somemoddedinputcolor;
	}
	//1 == no color //0 == colored screencapture screencapturecolororgrayscale
	//1 == no color //0 == colored screencapture screencapturecolororgrayscale




	if(cursortypeoption == 1)
	{

	//float3 lightDir;
	//float lightIntensity;
	//float4 colorer;

	
	//float4 chosencolor = cursorcolorgreen;
	//float4 chosencolor = cursorcolorred;
	//float4 chosencolor = cursorcolorblue;
	//float4 chosencolor = cursorcolorgray;
	//float4 chosencolor = cursorcolorblack;
	//float4 chosencolor = cursorcolorwhite;

	colorer = ambientColor;

	lightDir = -altlightdirection;

	//inputPos.x = (input.position.x) + input.instancePosition.x;// + somemoddedinputcolor.x;
	//inputPos.y = (input.position.y) + input.instancePosition.y;// + somemoddedinputcolor.y;
	//inputPos.z = (input.position.z) + input.instancePosition.z;// + somemoddedinputcolor.z;

	inputPos = input.instancePosition.xyz;
	
	//CURRENT IF THINGS BREAK
	//distTot = sqrt(((altlightposition.x - inputPos.x)*(altlightposition.x - inputPos.x)) + ((altlightposition.y - inputPos.y)*(altlightposition.y - inputPos.y)) + ((altlightposition.z - inputPos.z)*(altlightposition.z - inputPos.z)));
	//CURRENT IF THINGS BREAK
	
	float offsetposy = 0;//0.005f;
	float thedisttotalt = 0.0f;

	if(lightextrasscreencapturetype.w == 0) //2 || cursortypeoption == 6)
	{
		distTot = sqrt(((altlightposition.x - inputPos.x)*(altlightposition.x - inputPos.x)) + (((altlightposition.y - inputPos.y)*(altlightposition.y - inputPos.y)) + offsetposy) + ((altlightposition.z - inputPos.z)*(altlightposition.z - inputPos.z)));
	}
	else if(lightextrasscreencapturetype.w == 1) //2 || cursortypeoption == 6)
	{
		thedisttotalt = sqrt(((altlightposition.x - inputPos.x)*(altlightposition.x - inputPos.x)) + (((altlightposition.y - inputPos.y)*(altlightposition.y - inputPos.y)) + offsetposy) + ((altlightposition.z - inputPos.z)*(altlightposition.z - inputPos.z)));

		float3 altinputPos = inputPos;
		altinputPos.y += offsetposy;
		distTot = sc_check_distance_node_3d_geometry(altlightposition, inputPos,0.1f,0.1f,0.1f,0.14f,0.14f,0.14f);
	}




	//distTot = sc_check_distance_node_3d_geometry(altlightposition, inputPos, 3.0f,3.0f,3.0f, 3.0f, 3.0f, 3.0f);



	//distTot = sc_check_distance_node_3d_geometry(altlightposition, inputPos,2.0f,2.0f,2.0f,2.0f,2.0f,2.0f);
	//distTot = sc_check_distance_node_3d_geometry(altlightposition, inputPos, 3.0f,3.0f,3.0f, 3.0f, 3.0f, 3.0f);
	//distTot = sc_check_distance_node_3d_geometry(altlightposition, inputPos,9.0f,9.0f,9.0f,9.0f,9.0f,9.0f);

	altlightposition.y +=offsetposy;

	//distTot = sc_check_distance_node_3d_geometry(altlightposition, inputPos,1.0f,1.0f,1.0f,1.15f,1.15f,1.15f);



	//SECURITY BADGE-ISH LIGHT =>
	/*float3 altinputPos = inputPos;
	altinputPos.y += offsetposy;
	distTot = sc_check_distance_node_3d_geometry(altlightposition, inputPos,1.0f,1.0f,1.0f,1.4f,1.4f,1.4f);*/
	//SECURITY BADGE-ISH LIGHT <=
	


	//distTot = trying_ellipsoid_with_sc_sebastian_lague_check_distanceconvertedto3dkinda(altlightposition,inputPos);
	





	//distTot = sc_check_distance_node_3d_geometry(altlightposition, inputPos,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f);

	//float altdistTot = sc_check_distance_node_3d_geometry(altlightposition, inputPos,1.4f,1.4f,1.4f,1.0f,1.0f,1.0f);



	//TEMPLE LIGHT - distTot = sc_check_distance_node_3d_geometry(altlightposition, inputPos,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f);
	//SECURITY BADGE-ISH LIGHT => distTot = sc_check_distance_node_3d_geometry(altlightposition, inputPos,1.0f,1.0f,1.0f,1.4f,1.4f,1.4f);



	
	dirLightToFace = altlightposition - inputPos;


	if(lightextrasscreencapturetype.w == 0)
	{
		dirLightToFace /= distTot;
	}
	else if(lightextrasscreencapturetype.w == 1)
	{
		dirLightToFace /= thedisttotalt;
	}

	

	someOtherDot = dot(dirLightToFace, lightDir);

	//float DOTProdAngleWithHypAndOpp = saturate(dot(input.normal, lightDir));

	float DOTProdAngleWithHypAndOpp = saturate(dot(input.normal, dirLightToFace));

	someOtherDot =  (DOTProdAngleWithHypAndOpp + someOtherDot) * 0.5f;




	someTester = 0.0f;

	if(lightextrasscreencapturetype.w == 1)
	{
		someTester = lightextras.y - (distTot);
	}
	else
	{
		someTester = lightextras.y - (distTot);
		//(lightextras.y * 1000) - (distTot);
	}



	distMod = someTester;
	distMod *= 0.01f; //0.01f	
	modColor = colorer; //float4(0.75f,0.75f,0.75f,1.0f);//


	if(distTot <= 0.5f) //lightextras.y
	{
		modColor += (diffuseColor * (someOtherDot)) * distMod;
		modColor = saturate(modColor);
		modColor.xyz = somemoddedinputcolor.xyz * modColor.xyz * 1.5f; //0.95f	
	}
	else
	{
		modColor += (diffuseColor * (someOtherDot)) * distMod;
		modColor = saturate(modColor);
		modColor.xyz = somemoddedinputcolor.xyz * modColor.xyz * 1.5f; //0.95f	
	}





	 


	color = ambientColor;
	// Calculate the amount of the light on this pixel.
	lightIntensity = saturate(dot(input.normal.xyz, lightDir));

	// Determine the final diffuse color based on the diffuse color and the amount of the light intensity.
	color += (diffuseColor * lightIntensity);
		
	// Saturate the ambient and diffuse color.
	color = saturate(color);

	// Calculate the reflection vector based on the light intensity, normal vector, and light direction.
	reflection = normalize(2 * lightIntensity * input.normal.xyz - lightDir);

	// Determine the amount of the specular light based on the reflection vector, viewing direction, and specular power.
	specular = pow(saturate(dot(reflection, altlightdirection.xyz)) * distTot, lightextras.x); //input..viewDirection
	specular = saturate(color + specular);
	textureColor =textureColor* modColor * specular; // * cursorcolorred.xyz
	//textureColor =modColor * specular; // * cursorcolorred.xyz

	//float4 chosencolor = gridcolorgreen;
	//float4 chosencolor = gridcolorred;
	//float4 chosencolor = gridcolorblue;
	//float4 chosencolor = gridcolorgray;
	//float4 chosencolor = gridcolorblack;
	//float4 chosencolor = gridcolorwhite;




	chosengridcolor = float4((gridcolor.x/255),(gridcolor.y/255),(gridcolor.z/255),1.0f);
	//gridcolorgreen = somemoddedinputcolor.xyz * modColor.xyz * 0.95f * gridcolorgreen;

	/*if(distTot < lightextras.y)
	{	
		
	}
	else
	{
		
	}
	*/








	/*
	if(cursortypeoption == 1) //2 || cursortypeoption == 6)
	{
		
	}*/






	
	float someTester2 = 0.0f;

	if(lightextrasscreencapturetype.w == 0)
	{
		someTester2 = lightextras.y - (distTot);
	}
	else if(lightextrasscreencapturetype.w == 1)
	{
		someTester2 = lightextras.y - (thedisttotalt);
	}
	
	
	






	float distMod2 = someTester2;
	distMod2 *= 0.01f; //0.01f	
	modColor = colorer ; //float4((cursorcolor.x/255),(cursorcolor.y/255),(cursorcolor.z/255),1.0f);//

	if(cursortypeoption == 0)
	{
		
	}
	else
	{
		
		float mulindex = 0.0025f;

		float4 internaldiffuse = float4(1.0f,1.0f,1.0f,1.0f);

		modColor = float4(0.75f,0.75f,0.75f,1.0f);

		if(round(trunc(lightextrasscreencapturetype.w)) == 0.0f) //COLORED
		{
			if(distTot <= 0.05f) //lightextras.y //0.5f // && altdistTot <= 0.25f
			{
				float2 thefloat2colorx = float2(x* mulindex,y* mulindex);
				float2 thefloat2colory = float2(y* mulindex,z* mulindex);
				float2 thefloat2colorz = float2(x* mulindex,z* mulindex);

				float someuvx = rand_1_05(thefloat2colorx);
				float someuvy = rand_1_05(thefloat2colory);
				float someuvz = rand_1_05(thefloat2colorz);

				//float norm = (someuvx + someuvy + someuvz) / 3;

				modColor.x -= (someuvx * mulindex);
				modColor.y -= (someuvy * mulindex);
				modColor.z -= (someuvz * mulindex);

				modColor += (float4((cursorcolor.x/255),(cursorcolor.y/255),(cursorcolor.z/255),1.0f) * (someOtherDot)) * distMod2;
				modColor = saturate(modColor);
				modColor.xyz = internaldiffuse.xyz * modColor.xyz * 1.5f; //0.95f			
			}
			else
			{
				float2 thefloat2colorx = float2(x* mulindex,y* mulindex);
				float2 thefloat2colory = float2(y* mulindex,z* mulindex);
				float2 thefloat2colorz = float2(x* mulindex,z* mulindex);

				float someuvx = rand_1_05(thefloat2colorx);
				float someuvy = rand_1_05(thefloat2colory);
				float someuvz = rand_1_05(thefloat2colorz);

				//float norm = (someuvx + someuvy + someuvz) / 3;

				modColor.x -= (someuvx * mulindex);
				modColor.y -= (someuvy * mulindex);
				modColor.z -= (someuvz * mulindex);

				modColor += (float4((cursorcolor.x/255),(cursorcolor.y/255),(cursorcolor.z/255),1.0f) * (someOtherDot)) * distMod2;
				modColor = saturate(modColor);
				modColor.xyz = internaldiffuse.xyz * modColor.xyz * 1.5f; //0.95f		
			}
		}
		else if(round(trunc(lightextrasscreencapturetype.w)) == 1.0f) //GRAYSCALE
		{
			if(thedisttotalt <= 0.05f)
			{
				//modColor = float4(0.15f,0.95f,0.15f,1.0f);

				modColor.x -= (0.5f) * (someOtherDot * 0.01f) * (1 / (distMod2 * 0.01f));
				modColor.y -= (0.5f) * (someOtherDot * 0.01f) * (1 / (distMod2 * 0.01f));
				modColor.z -= (0.5f) * (someOtherDot * 0.01f) * (1 / (distMod2 * 0.01f));

				//modColor.x -= (x * 0.05f);
				//modColor.y -= (y * 0.05f);
				//modColor.z -= (z * 0.05f);

				


				/*
				modColor.x -= (xn * mulindex);
				modColor.y -= (yn * mulindex);
				modColor.z -= (zn * mulindex);*/

			
				float2 thefloat2colorx = float2(x* mulindex,y* mulindex);
				float2 thefloat2colory = float2(y* mulindex,z* mulindex);
				float2 thefloat2colorz = float2(x* mulindex,z* mulindex);

				float someuvx = rand_1_05(thefloat2colorx);
				float someuvy = rand_1_05(thefloat2colory);
				float someuvz = rand_1_05(thefloat2colorz);
				
				/*
				float xn = noise(thefloat2colorx);
				float yn = noise(thefloat2colory);
				float zn = noise(thefloat2colorz);*/


				float norm = (someuvx + someuvy + someuvz) / 3;

				modColor.x -= (norm * mulindex);
				modColor.y -= (norm * mulindex);
				modColor.z -= (norm * mulindex);

				
				x += (1/((lightextras.w - trunc(lightextras.w)) * 0.1f)* 0.000001f);
				y += (1/((lightextras.w - trunc(lightextras.w)) * 0.1f)* 0.000001f);
				z += (1/((lightextras.w - trunc(lightextras.w)) * 0.1f)* 0.000001f);

				modColor.x -= (x * mulindex);
				modColor.y -= (x * mulindex);
				modColor.z -= (x * mulindex);

				/*modColor.x += xn;
				modColor.y += yn;
				modColor.z += zn;*/




				//modColor = float4(0.15f,0.95f,0.15f,1.0f);
				//modColor.y += 100;

				if(modColor.y > 255)
				{
					modColor.y = 255;
				}
				else if(modColor.y < 0)
				{
					modColor.y = 0;
				}
				//modColor += float4(0.15f,0.95f,0.15f,1.0f);
			}
			else
			{

				//NumberGenerator numgen = new NumberGenerator();
				//numgen.GetCurrentFloat();

				//modColor = float4(0.15f,0.95f,0.15f,1.0f);

				//modColor.y -= 0.15f;
				
				modColor.x -= (0.5f) * (someOtherDot * 0.01f) * (1 / (distMod2 * 0.01f));
				modColor.y -= (0.5f) * (someOtherDot * 0.01f) * (1 / (distMod2 * 0.01f));
				modColor.z -= (0.5f) * (someOtherDot * 0.01f) * (1 / (distMod2 * 0.01f));


				/*float xn = noise(x* 0.05f);
				float yn = noise(y* 0.05f);
				float zn = noise(z* 0.05f);*/

				/*
				modColor.x -= (xn * mulindex);
				modColor.y -= (yn * mulindex);
				modColor.z -= (zn * mulindex);*/	
				
				x += (1/((lightextras.w - trunc(lightextras.w)) * 0.1f)* 0.000001f);
				y += (1/((lightextras.w - trunc(lightextras.w)) * 0.1f)* 0.000001f);
				z += (1/((lightextras.w - trunc(lightextras.w)) * 0.1f)* 0.000001f);

				modColor.x -= (x * mulindex);
				modColor.y -= (x * mulindex);
				modColor.z -= (x * mulindex);

				/*modColor.x -= (x * mulindex);
				modColor.y -= (y * mulindex);
				modColor.z -= (z * mulindex);*/
	
				


				/*float2 thefloat2colorx = float2(x* mulindex,y* mulindex);
				float2 thefloat2colory = float2(y* mulindex,z* mulindex);
				float2 thefloat2colorz = float2(x* mulindex,z* mulindex);

				float someuvx = rand_1_05(thefloat2colorx);
				float someuvy = rand_2_10(thefloat2colory);
				float someuvz = rand_2_0004(thefloat2colorz);

				float norm = (someuvx + someuvy + someuvz) / 3;

				modColor.x -= (norm * mulindex);
				modColor.y -= (norm * mulindex);
				modColor.z -= (norm * mulindex);*/





















				/*float someuv2x = rand_2_0004(thefloat2colorx);
				float someuv2y = rand_1_05(thefloat2colory);
				float someuv2z = rand_2_10(thefloat2colorz);

				float norm2 = (someuv2x + someuv2y + someuv2z) / 3;

				modColor.x += (norm2 * mulindex);
				modColor.y -= (norm2 * mulindex);
				modColor.z += (norm2 * mulindex);

				float someuv3x = rand_2_10(thefloat2colorx);
				float someuv3y = rand_2_0004(thefloat2colory);
				float someuv3z = rand_1_05(thefloat2colorz);

				float norm3 = (someuv3x + someuv3y + someuv3z) / 3;

				modColor.x -= (norm3 * mulindex);
				modColor.y += (norm3 * mulindex);
				modColor.z -= (norm3 * mulindex);*/





				//NumberGenerator numgen = new NumberGenerator();
				//float2 thefloat2color = float2(textureColor.y,0.5);
				//float someuv = rand_1_05(thefloat2color);
				//swaptextureColorfinal.x = 0.0;
				//swaptextureColorfinal.y = someuv;//numgen.GetCurrentFloat();
				//float somesnoise = snoise(textureColor.xy) * 1.5f;
				//modColor = modColor * somesnoise;
				//textureColor.xy = textureColor.xy * somesnoise;

				//textureColor.x *= 0.1f * input.color.x;
				//textureColor.y *= 0.1f * input.color.y;
				//textureColor.z *= 0.1f * input.color.z;
				/*float xn = noise(textureColor.x);
				float yn = noise(textureColor.y);
				float zn = noise(textureColor.z);

				textureColor.x = xn;
				textureColor.y = yn;
				textureColor.z = zn;*/

				//textureColor = snoise(textureColor.xyz) * textureColor;







		
				/*if(modColor.y > 255)
				{
					modColor.y = 255;
				}*/


				if(modColor.y < 0)
				{
					modColor.y = 0;
				}


				//modColor += float4(0.15f,0.95f,0.15f,1.0f);
				//modColor *= 0.5f;//float4(0.15f,0.95f,0.15f,1.0f);
				
				/*float normalizeddistance = 0.0f;

				if(distMod2 < 1.0f)
				{
					normalizeddistance = 1 / distMod2;
				}
				else if(distMod2 >= 1.0f && distMod2 < 10.0f)
				{
					normalizeddistance = 10 / distMod2;
					//normalizeddistance = 1 / distMod2;
				}
				else if(distMod2 >= 10.0f)
				{
					normalizeddistance = 1000 / distMod2;
					//normalizeddistance = 1 / distMod2;
				}*/


				/*if()
				{

				}*/

				//float thedotvertical = dot(float3(0.0f,1.0f,0.0f), lightDir);
				//float thedotvertical = dot(float3(0.0f,1.0f,0.0f), lightDir);

				//modColor.y -= (thedotvertical * 0.0095f);


				//modColor -= (float4((cursorcolor.x/255),(cursorcolor.y/255),(cursorcolor.z/255),1.0f) * (someOtherDot)) * distMod2;
				/*modColor = saturate(modColor);
				modColor.xyz = internaldiffuse.xyz * modColor.xyz * 1.5f; //0.95f	
				*/
				/*modColor -= (float4((cursorcolor.x/255),(cursorcolor.y/255),(cursorcolor.z/255),1.0f) * (someOtherDot)) * distMod2;
				modColor = saturate(modColor);
				*/


				//modColor.xyz = internaldiffuse.xyz * modColor.xyz * 1.5f; //0.95f		//*1.5f		
			}





			/*if(distTot <= 0.05f) //lightextras.y //0.5f // && altdistTot <= 0.25f
			{
				modColor += (float4((cursorcolor.x/255),(cursorcolor.y/255),(cursorcolor.z/255),1.0f) * (someOtherDot)) * distMod2;
				modColor = saturate(modColor);
				//modColor.xyz = internaldiffuse.xyz * modColor.xyz * 1.5f; //0.95f
			}
			else
			{
				modColor += (float4((cursorcolor.x/255),(cursorcolor.y/255),(cursorcolor.z/255),1.0f) * (someOtherDot)) * distMod2;
				modColor = saturate(modColor);
				modColor.xyz = internaldiffuse.xyz * modColor.xyz * 1.5f; //0.95f
			}*/






		}



		color = ambientColor;
		// Calculate the amount of the light on this pixel.
		lightIntensity = saturate(dot(input.normal.xyz, lightDir));

		// Determine the final diffuse color based on the diffuse color and the amount of the light intensity.
		color += (diffuseColor * lightIntensity);
		
		// Saturate the ambient and diffuse color.
		color = saturate(color);
		//lightIntensity = 1.0f;
		// Calculate the reflection vector based on the light intensity, normal vector, and light direction.
		reflection = normalize(2 * lightIntensity * input.normal.xyz - lightDir);

		// Determine the amount of the specular light based on the reflection vector, viewing direction, and specular power.
		specular = pow(saturate(dot(reflection, altlightdirection.xyz)) * distTot, lightextras.x); //input..viewDirection
		specular = saturate(color + specular);

		//textureColor =textureColor;
		textureColor = textureColor * modColor * specular; // * cursorcolorred.xyz
	}











	/*
	if(cursortypeoption == 0 || cursortypeoption == 4)
	{
		modColor = diffuseColor;
		
		
		//modColor = diffuseColor;
		//somemoddedinputcolor = the_color;
		if(distTot <= 0.5f) //lightextras.y //0.5f
		{
			modColor += (diffuseColor * (someOtherDot)) * distMod2;
			modColor = saturate(modColor);
			modColor.xyz = somemoddedinputcolor.xyz * modColor.xyz * 1.5f; //0.95f	
		}
		else
		{
			modColor += (diffuseColor * (someOtherDot)) * distMod2;
			modColor = saturate(modColor);
			modColor.xyz = somemoddedinputcolor.xyz * modColor.xyz * 1.5f; //0.95f	
		}

		color = ambientColor;
		// Calculate the amount of the light on this pixel.
		lightIntensity = saturate(dot(input.normal.xyz, lightDir));

		// Determine the final diffuse color based on the diffuse color and the amount of the light intensity.
		color += (diffuseColor * lightIntensity);
		
		// Saturate the ambient and diffuse color.
		color = saturate(color);
		//lightIntensity = 1.0f;
		// Calculate the reflection vector based on the light intensity, normal vector, and light direction.
		reflection = normalize(2 * lightIntensity * input.normal.xyz - lightDir);

		// Determine the amount of the specular light based on the reflection vector, viewing direction, and specular power.
		specular = pow(saturate(dot(reflection, altlightdirection.xyz)) * distTot, lightextras.x); //input..viewDirection
		specular = saturate(color + specular);

		textureColor =textureColor;
		//textureColor = textureColor * modColor * specular; // * cursorcolorred.xyz
	}
	else if(cursortypeoption == 2 || cursortypeoption == 3 || cursortypeoption == 5 || cursortypeoption == 6) //cursortypeoption == 1 || 
	{

		modColor = float4(0.75f,0.75f,0.75f,1.0f);
		if(distTot <= 0.5f) //lightextras.y //0.5f
		{
			modColor += (float4((cursorcolor.x/255),(cursorcolor.y/255),(cursorcolor.z/255),1.0f) * (someOtherDot)) * distMod2;
			modColor = saturate(modColor);
			modColor.xyz = somemoddedinputcolor.xyz * modColor.xyz * 1.5f; //0.95f	
		}
		else
		{
			modColor += (float4((cursorcolor.x/255),(cursorcolor.y/255),(cursorcolor.z/255),1.0f) * (someOtherDot)) * distMod2;
			modColor = saturate(modColor);
			modColor.xyz = somemoddedinputcolor.xyz * modColor.xyz * 1.5f; //0.95f	
		}

		color = ambientColor;
		// Calculate the amount of the light on this pixel.
		lightIntensity = saturate(dot(input.normal.xyz, lightDir));

		// Determine the final diffuse color based on the diffuse color and the amount of the light intensity.
		color += (diffuseColor * lightIntensity);
		
		// Saturate the ambient and diffuse color.
		color = saturate(color);
		//lightIntensity = 1.0f;
		// Calculate the reflection vector based on the light intensity, normal vector, and light direction.
		reflection = normalize(2 * lightIntensity * input.normal.xyz - lightDir);

		// Determine the amount of the specular light based on the reflection vector, viewing direction, and specular power.
		specular = pow(saturate(dot(reflection, altlightdirection.xyz)) * distTot, lightextras.x); //input..viewDirection
		specular = saturate(color + specular);

		//textureColor =textureColor;
		textureColor = textureColor * modColor * specular; // * cursorcolorred.xyz
		
	}*/
	}







	if(gridtypeoption == 0)
	{
		textureColor = textureColor;
	}
	else if(gridtypeoption == 1)
	{
		//GRID LOZANGE FEATURE
		if(input.color.x == 0 && input.color.y == 3)
		{
			textureColor = textureColor* modColor * specular  * chosengridcolor ; //somemoddedinputcolor
		}
		else if(input.color.x == 1 && input.color.y == 2)
		{
			textureColor = textureColor* modColor * specular   * chosengridcolor; //somemoddedinputcolor
		}
		else if(input.color.x == 2 && input.color.y == 1)
		{
			textureColor = textureColor* modColor * specular   * chosengridcolor; //somemoddedinputcolor
		}
		else if(input.color.x == 3 && input.color.y == 0)
		{
			textureColor = textureColor* modColor * specular   * chosengridcolor; //somemoddedinputcolor
		}

		else if(input.color.x == 4 && input.color.y == 0)
		{
			textureColor = textureColor* modColor * specular  * chosengridcolor ; //somemoddedinputcolor
		}
		else if(input.color.x == 5 && input.color.y == 1)
		{
			textureColor = textureColor* modColor * specular  * chosengridcolor ; //somemoddedinputcolor
		}
		else if(input.color.x == 6 && input.color.y == 2)
		{
			textureColor = textureColor* modColor * specular  * chosengridcolor ; //somemoddedinputcolor
		}
			else if(input.color.x == 7 && input.color.y == 3)
		{
			textureColor = textureColor* modColor * specular   * chosengridcolor; //somemoddedinputcolor
		}

		else if(input.color.x == 7 && input.color.y == 4)
		{
			textureColor =textureColor* modColor * specular  * chosengridcolor ; //somemoddedinputcolor
		}
		else if(input.color.x == 6 && input.color.y == 5)
		{
			textureColor =textureColor* modColor * specular   * chosengridcolor; //somemoddedinputcolor
		}
		else if(input.color.x == 5 && input.color.y == 6)
		{
			textureColor =textureColor* modColor * specular   * chosengridcolor; //somemoddedinputcolor
		}
		else if(input.color.x == 4 && input.color.y == 7)
		{
			textureColor =textureColor* modColor * specular  * chosengridcolor ; //somemoddedinputcolor
		}

		else if(input.color.x == 3 && input.color.y == 7)
		{
			textureColor =textureColor* modColor * specular  * chosengridcolor ; //somemoddedinputcolor
		}
		else if(input.color.x == 2 && input.color.y == 6)
		{
			textureColor =textureColor* modColor * specular   * chosengridcolor; //somemoddedinputcolor
		}
		else if(input.color.x == 1 && input.color.y == 5)
		{
			textureColor =textureColor* modColor * specular   * chosengridcolor; //somemoddedinputcolor
		}
		else if(input.color.x == 0 && input.color.y == 4)
		{
			textureColor =textureColor* modColor * specular   * chosengridcolor; //somemoddedinputcolor
		}
		else
		{
			textureColor =textureColor* modColor * specular;
		}
		//GRID LOZANGE FEATURE
	}
	else if(gridtypeoption == 2)
	{
		
		//grid square SLIM LEFT
		if(input.color.x == 0 && input.color.y >= 0)
		{
			textureColor =textureColor* modColor * specular   * chosengridcolor ; //somemoddedinputcolor
		}
		else if(input.color.y == 0 && input.color.x >= 0)
		{
			textureColor =textureColor* modColor * specular   * chosengridcolor; //somemoddedinputcolor
		}
		else
		{
			textureColor =textureColor* modColor * specular ;
		}
		//grid square SLIM LEFT
	}
	else if(gridtypeoption == 3)
	{
		//grid square SLIM RIGHT
		if(input.color.x == tinyChunkWidth -1 && input.color.y >= 0)
		{
			textureColor =textureColor* modColor * specular   * chosengridcolor; //somemoddedinputcolor
		}
		else if(input.color.x >= 0 && input.color.y == tinyChunkHeight -1)
		{
			textureColor =textureColor* modColor * specular  * chosengridcolor ; //somemoddedinputcolor
		}
		else
		{
			textureColor =textureColor* modColor * specular ;
		}
		//grid square SLIM RIGHT
	}
	else if(gridtypeoption == 4)
	{
		//grid square feature LARGE
		if(input.color.x == 0 && input.color.y >= 0)
		{
			textureColor =textureColor* modColor * specular   * chosengridcolor ; //somemoddedinputcolor
		}
		else if(input.color.y == 0 && input.color.x >= 0)
		{
			textureColor =textureColor* modColor * specular   * chosengridcolor; //somemoddedinputcolor
		}
		else if(input.color.x == tinyChunkWidth -1 && input.color.y >= 0)
		{
			textureColor =textureColor* modColor * specular   * chosengridcolor; //somemoddedinputcolor
		}
		else if(input.color.x >= 0 && input.color.y == tinyChunkHeight -1)
		{
			textureColor =textureColor* modColor * specular  * chosengridcolor ; //somemoddedinputcolor
		}
		else
		{
			textureColor =textureColor* modColor * specular ;
		}
		//grid square feature LARGE
	}
	else if(gridtypeoption == 5)
	{
		//grid dotted corners feature
		if(input.color.x == 0 && input.color.y == 0)
		{
			textureColor =textureColor* modColor * specular   * chosengridcolor; //somemoddedinputcolor
		}
		else if(input.color.y == 0 && input.color.x == tinyChunkWidth-1)
		{
			textureColor =textureColor* modColor * specular  * chosengridcolor ; //somemoddedinputcolor
		}
		else if(input.color.x == 0 && input.color.y == tinyChunkHeight-1)
		{
			textureColor =textureColor* modColor * specular  * chosengridcolor ; //somemoddedinputcolor
		}
		else if(input.color.x == tinyChunkWidth-1 && input.color.y == tinyChunkHeight -1)
		{
			textureColor =textureColor* modColor * specular   * chosengridcolor; //somemoddedinputcolor
		}
		else
		{
			textureColor =textureColor* modColor * specular ;
		}
		//grid dotted corners feature
	}
	else if(gridtypeoption == 6)
	{
		//grid dotted middle feature
		if(input.color.x == 3 && input.color.y == 3)
		{
			textureColor =textureColor* modColor * specular   * chosengridcolor; //somemoddedinputcolor
		}
		else if(input.color.y == 4 && input.color.x == 4)
		{
			textureColor =textureColor* modColor * specular  * chosengridcolor ; //somemoddedinputcolor
		}
		else if(input.color.x == 3 && input.color.y == 4)
		{
			textureColor =textureColor* modColor * specular  * chosengridcolor ; //somemoddedinputcolor
		}
		else if(input.color.x ==4 && input.color.y == 3)
		{
			textureColor =textureColor* modColor * specular   * chosengridcolor; //somemoddedinputcolor
		}
		else
		{
			textureColor =textureColor* modColor * specular ;
		}
		//grid dotted middle feature
	}
	else if(gridtypeoption == 7)
	{
		//grid dotted middle feature
		if(input.color.x == 0 && input.color.y == 0)
		{
			textureColor =textureColor* modColor * specular   * chosengridcolor; //somemoddedinputcolor
		}
		else
		{
			textureColor =textureColor* modColor * specular ;
		}
		//grid dotted middle feature
	}


	//color of grid option // 6 + 1 null
	//color of light option // 6 + 1 null
	//intensity of cursor light option // trackbar
	//type of grid option // 5 grids + 1 null













	return textureColor ;//color;// textureColor;
}
