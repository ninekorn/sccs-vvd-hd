cbuffer MatrixBuffer :register(b0)
{
    matrix world;
    matrix view;
    matrix proj;
};


struct ConstantOutputType
{
    float edges[3] : SV_TessFactor;
    float inside : SV_InsideTessFactor;
};

struct HullOutputType
{
   	float4 position : POSITION0;
	float4 color : COLOR0; //byte map index xyz and w for typeofface 0 to 5
	float3 normal : NORMAL0;
	float paddingvert0 : PSIZE0;	//instance width
	float2 tex : TEXCOORD0;
	//float paddingvert1 : PSIZE1;	//instance height
	//float paddingvert2 : PSIZE2;	//instance depth
	float4 instancePosition : POSITION1;
	float4 instanceRadRotFORWARD : POSITION2;
	float4 instanceRadRotRIGHT : POSITION3;
	float4 instanceRadRotUP : POSITION4;
	float4 mapmatrix0 : POSITION5;
	float4 mapmatrix1 : POSITION6;
	float4 mapmatrix2 : POSITION7;
	float4 mapmatrix3 : POSITION8;
	float4 mapmatrix4 : POSITION9;
	float4 mapmatrix5 : POSITION10;
	float4 mapmatrix6 : POSITION11;
	float4 mapmatrix7 : POSITION12;
	float4 mapmatrix8 : POSITION13;
	float4 mapmatrix9 : POSITION14;
	float4 mapmatrix10 : POSITION15;
	float4 mapmatrix11 : POSITION16;
	float4 mapmatrix12 : POSITION17;
	float4 mapmatrix13 : POSITION18;
	float4 mapmatrix14 : POSITION19;
	float4 mapmatrix15 : POSITION20;

	float4 heightmapmat0 : POSITION21;
	float4 heightmapmat1 : POSITION22;
	float4 heightmapmat2 : POSITION23;
	float4 heightmapmat3 : POSITION24;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
	float4 color : COLOR0; //byte map index xyz and w for typeofface 0 to 5
	float3 normal : NORMAL0;
	float paddingvert0 : PSIZE0;	//instance width
	float2 tex : TEXCOORD0;
	//float paddingvert1 : PSIZE1;	//instance height
	//float paddingvert2 : PSIZE2;	//instance depth
	float4 instancePosition : POSITION1;
	float4 instanceRadRotFORWARD : POSITION2;
	float4 instanceRadRotRIGHT : POSITION3;
	float4 instanceRadRotUP : POSITION4;
	float4 mapmatrix0 : POSITION5;
	float4 mapmatrix1 : POSITION6;
	float4 mapmatrix2 : POSITION7;
	float4 mapmatrix3 : POSITION8;
	float4 mapmatrix4 : POSITION9;
	float4 mapmatrix5 : POSITION10;
	float4 mapmatrix6 : POSITION11;
	float4 mapmatrix7 : POSITION12;
	float4 mapmatrix8 : POSITION13;
	float4 mapmatrix9 : POSITION14;
	float4 mapmatrix10 : POSITION15;
	float4 mapmatrix11 : POSITION16;
	float4 mapmatrix12 : POSITION17;
	float4 mapmatrix13 : POSITION18;
	float4 mapmatrix14 : POSITION19;
	float4 mapmatrix15 : POSITION20;

	float4 heightmapmat0 : POSITION21;
	float4 heightmapmat1 : POSITION22;
	float4 heightmapmat2 : POSITION23;
	float4 heightmapmat3 : POSITION24;
};

[domain("tri")]

PixelInputType ColorDomainShader(ConstantOutputType input, float3 uvwCoord : SV_DomainLocation, const OutputPatch<HullOutputType, 3> patch)
{
	float3 vertexPosition;
	PixelInputType output;
 

 	// Determine the position of the new vertex.
	vertexPosition = uvwCoord.x * patch[0].position + uvwCoord.y * patch[1].position + uvwCoord.z * patch[2].position;
    
	// Calculate the position of the new vertex against the world, view, and projection matrices.
    //output.position = mul(float4(vertexPosition, 1.0f), worldMatrix);
    //output.position = mul(output.position, viewMatrix);
    //output.position = mul(output.position, projectionMatrix);

	// Send the input color into the pixel shader.
	//output.color = patch[0].color;

	float3 mod_input_vertex_pos;
	float3 MOVINGPOINT;
	float diffX;
	
	float diffY;
	float diffZ;
	float3 vertPos;

	//vertexPosition.w = 1.0f;

	//vertexPosition.x = vertexPosition.x * -1;

	mod_input_vertex_pos = vertexPosition;

	mod_input_vertex_pos.x += patch[0].instancePosition.x;
	mod_input_vertex_pos.y += patch[0].instancePosition.y;
	mod_input_vertex_pos.z += patch[0].instancePosition.z;
	//mod_input_vertex_pos.w = 1.0f;

	//mod_input_vertex_pos.xyz = mod_input_vertex_pos.xyz + (forwardDir * (someheightmapvalue * 0.000001));
	//mod_input_vertex_pos.xyz = mod_input_vertex_pos.xyz + (float3(0,0,1) * (someheightmapvalue * 0.01));

	float3 forwardDir = float3(patch[0].instanceRadRotFORWARD.x, patch[0].instanceRadRotFORWARD.y, patch[0].instanceRadRotFORWARD.z);
	float3 rightDir = float3(patch[0].instanceRadRotRIGHT.x, patch[0].instanceRadRotRIGHT.y, patch[0].instanceRadRotRIGHT.z); 
	float3 upDir = float3(patch[0].instanceRadRotUP.x, patch[0].instanceRadRotUP.y, patch[0].instanceRadRotUP.z);

	//mod_input_vertex_pos.z = mod_input_vertex_pos.z + (forwardDir.z * (someheightmapvalue * 0.000001));
	//mod_input_vertex_pos += someheightmapvalue;

	//float2 noise = (frac(sin(dot(float2(vertexPosition.x,vertexPosition.z) ,float2(12.9898,78.233)*2.0)) * 43758.5453));
	//float test = abs(noise.x + noise.y) * 0.5 * 0.001;
	//patch[0].color = float4(patch[0].color.x + (vertexPosition.x*0.1),patch[0].color.y+ (vertexPosition.y*0.1),patch[0].color.z+ (vertexPosition.z*0.1),patch[0].color.w);
   
		


	MOVINGPOINT = float3(patch[0].instancePosition.x, patch[0].instancePosition.y, patch[0].instancePosition.z);
	//MOVINGPOINT.xyz = MOVINGPOINT.xyz + (float3(0,0,1) * (someheightmapvalue * 0.001));
		

	vertPos = float3(mod_input_vertex_pos.x, mod_input_vertex_pos.y, mod_input_vertex_pos.z);	

	diffX = (vertPos.x - (patch[0].instancePosition.x));
	diffY = (vertPos.y - (patch[0].instancePosition.y));
	diffZ = (vertPos.z - (patch[0].instancePosition.z));
		
	//diffX = ((patch[0].instancePosition.x) - vertPos.x);
	//diffY = ((patch[0].instancePosition.y) - vertPos.y);
	//diffZ = ((patch[0].instancePosition.z) - vertPos.z);
		


	MOVINGPOINT = MOVINGPOINT + (-rightDir * diffX);
	MOVINGPOINT = MOVINGPOINT + (upDir * diffY);
	MOVINGPOINT = MOVINGPOINT + (forwardDir * diffZ);


		



	vertexPosition.x = MOVINGPOINT.x;
	vertexPosition.y = MOVINGPOINT.y;
	vertexPosition.z = MOVINGPOINT.z;


	//output.position = mul(mod_input_vertex_pos, world);
	output.position = mul(vertexPosition, world);
	output.position = mul(output.position, view);
	output.position = mul(output.position, proj);

	output.instancePosition.x = patch[0].instancePosition.x;
	output.instancePosition.y = patch[0].instancePosition.y;
	output.instancePosition.z = patch[0].instancePosition.z;

	output.instanceRadRotFORWARD.x = patch[0].instanceRadRotFORWARD.x;
	output.instanceRadRotFORWARD.y = patch[0].instanceRadRotFORWARD.y;
	output.instanceRadRotFORWARD.z = patch[0].instanceRadRotFORWARD.z;

	output.instanceRadRotRIGHT.x = patch[0].instanceRadRotRIGHT.x;
	output.instanceRadRotRIGHT.y = patch[0].instanceRadRotRIGHT.y;
	output.instanceRadRotRIGHT.z = patch[0].instanceRadRotRIGHT.z;

	output.instanceRadRotUP.x = patch[0].instanceRadRotUP.x;
	output.instanceRadRotUP.y = patch[0].instanceRadRotUP.y;
	output.instanceRadRotUP.z = patch[0].instanceRadRotUP.z;

	output.color = patch[0].color;












    return output;
}