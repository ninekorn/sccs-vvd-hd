using System;
using System.Collections.Generic;
using System.Text;
using SharpDX;
using Jitter;
using Jitter.Dynamics;
using Jitter.Collision;
using Jitter.LinearMath;
using Jitter.Collision.Shapes;
using Jitter.Forces;
using scmessageobject = sccs.scmessageobject.scmessageobject;
using scmessageobjectjitter = sccs.scmessageobject.scmessageobjectjitter;
using scgraphicssecpackage = sccs.scmessageobject.scgraphicssecpackage;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using Ab3d.OculusWrap;
using sccs.scgraphics;
using Ab3d.OculusWrap.DemoDX11;
using System.Runtime.InteropServices;
using System.IO;
using System.Security;
using System.Security.Permissions;
using Jitter.DataStructures;
using SingleBodyConstraints = Jitter.Dynamics.Constraints.SingleBody;
using Jitter.Dynamics.Constraints;
using Vector2 = SharpDX.Vector2;
using Vector3 = SharpDX.Vector3;
using Vector4 = SharpDX.Vector4;
using Quaternion = SharpDX.Quaternion;
using Matrix = SharpDX.Matrix;
using Plane = SharpDX.Plane;
using Ray = SharpDX.Ray;
using SharpDX.Multimedia;
using SharpDX.IO;
using System.Xml;
using SharpDX.XAudio2;
using System.Linq;
using SharpDX.Direct3D11;
using SharpDX.DXGI;

//using System.Windows.Forms;
using System.IO.Ports;

using SharpDX.D3DCompiler;
using System.Runtime.InteropServices;
//using Win32.DwmSharedSurface.Interop;
using Win32.Shared.Interop;


using SharpDX.DirectInput;
using Key = SharpDX.DirectInput.Key;

//using DSharpDXRastertek.Tut10.Graphics;
using SharpDX.Direct3D9;
using System.Windows.Forms;
//using Windows.ApplicationModel.Background;


namespace sccs

{
    public class scgraphicssec //: sccs.scgraphics.scupdate//SC_Intermediate_Update
    {

        public int initsccsvvdhdheightmaparrays = 0;
        public int resetsccsvvdhd = 0;
        public int hasinitsccsvvdhd = 0;
        public int hasinitsccsvvdhdassets = 0;
        public float planesizetilesforik = 0.1f;//has to be same size as the virtual desktop voxels size later on.



        float _voxel_mass = 100;
        int _inst_voxel_cube_x = 5;
        int _inst_voxel_cube_y = 1;
        int _inst_voxel_cube_z = 5;
        float _voxel_cube_size_x = 0.15f;//0.0115f //restitution
        float _voxel_cube_size_y = 0.15f;//0.0115f //static friction
        float _voxel_cube_size_z = 0.15f;//0.0015f //kinetic friction
        float voxel_general_size = 0.025f;
        int voxel_type = -1;
        sc_voxel[][] _world_voxel_cube_lists;
        Matrix[][][] worldMatrix_instances_voxel_cube;
        Matrix[] worldMatrix_base;
        sc_voxel.DLightBuffer[] _DLightBuffer_voxel_cube = new sc_voxel.DLightBuffer[1];


        Matrix[][][] worldmatrixinstancesvoxelsforcalculationsonly;




        public sccsikvoxellimbs[] ikarmvoxel;
        //Matrix[][][][] worldMatrix_instances_ikarmvoxel;
        int somechunkpriminstancesikarmvoxelwidthR = 2;
        int somechunkpriminstancesikarmvoxelheightR = 2;
        int somechunkpriminstancesikarmvoxeldepthR = 0;
        int somechunkpriminstancesikarmvoxelwidthL = 0;
        int somechunkpriminstancesikarmvoxelheightL = 0;
        int somechunkpriminstancesikarmvoxeldepthL = 0;

        public sccsikvoxellimbs[] ikvoxelbody;
        // Matrix[][][][] worldMatrix_instances_ikvoxelbody;
        int somechunkpriminstancesikvoxelbodywidthR = 1;
        int somechunkpriminstancesikvoxelbodyheightR = 0;
        int somechunkpriminstancesikvoxelbodydepthR = 0;
        int somechunkpriminstancesikvoxelbodywidthL = 0;
        int somechunkpriminstancesikvoxelbodyheightL = 0;
        int somechunkpriminstancesikvoxelbodydepthL = 0;

        public sccsikvoxellimbs[][] ikfingervoxel;
        //Matrix[][][][] worldMatrix_instances_ikarmvoxel;
        int somechunkpriminstancesikfingervoxelwidthR = 5;
        int somechunkpriminstancesikfingervoxelheightR = 1;
        int somechunkpriminstancesikfingervoxeldepthR = 0;
        int somechunkpriminstancesikfingervoxelwidthL = 0;
        int somechunkpriminstancesikfingervoxelheightL = 0;
        int somechunkpriminstancesikfingervoxeldepthL = 0;










        Vector3 screenNormalForward;

        Vector3 originalpointerofcamonscreen;

        int framecounterheightmaps = 0;
        public int hasinit = 0;

        scmessageobjectjitter[][] _sc_jitter_tasks;
        Matrix viewMatrix;
        Matrix projectionMatrix;
        Matrix originRot;
        Matrix rotatingMatrix;
        Matrix hmdrotMatrix;
        Matrix hmd_matrix;
        Matrix rotatingMatrixForPelvis;
        //Matrix _rightTouchMatrix;
        //Matrix _leftTouchMatrix;
        Matrix oriProjectionMatrix;
        Matrix extramatrix;
        Vector3 OFFSETPOS;
        Posef handPoseRight;
        Posef handPoseLeft;

        Matrix _worldMatrix;
        Matrix _viewMatrix;
        Matrix _projectionMatrix;

        Matrix _rightTouchMatrix;
        Matrix _leftTouchMatrix;

        /*
        SC_VR_Chunk.chunkData chunkDat = new SC_VR_Chunk.chunkData();
        sclevelgenchunk.chunkData chunkdatlevel = new sclevelgenchunk.chunkData();
        */



        double displayMidpoint;
        TrackingState trackingState;
        Posef[] eyePoses;
        EyeType eye;
        //EyeTexture eyeTexture;
        bool latencyMark = false;
        TrackingState trackState;
        PoseStatef poseStatefer;
        Posef hmdPose;
        Quaternionf hmdRot;
        Vector3 _hmdPoser;
        Quaternion _hmdRoter;
        Vector3 oculusRiftDir = Vector3.Zero;



        Stopwatch watchforgetmousepos = new Stopwatch();
        int stopwatchswtc = 0;


        Stopwatch watchforgetmouseclickl = new Stopwatch();
        int stopwatchmouseclickswtcl = 0;

        Stopwatch watchforgetmouseclickr = new Stopwatch();
        int stopwatchmouseclickswtcr = 0;

        Stopwatch watchforgetmouseposset = new Stopwatch();
        int stopwatchmousepossetswtc = 0;



        DateTime startTime;//= new DateTime();
        FastNoise somefastnoise = new FastNoise();

        //PERCEPTRON REGION

        SC_AI_Start perceptronRotationXAXIS;
        SC_AI_Start perceptronRotationYAXIS;
        SC_AI_Start perceptronRotationZAXIS;

        SC_AI.data_input dataForPerceptronXAxis;
        SC_AI.data_input dataForPerceptronYAXIS;
        SC_AI.data_input dataForPerceptronZAXIS;
        Matrix rotatedDroneMatrix;
        Matrix rotatedDroneMatrix1;
        Matrix rotatedDroneMatrix2;



        int swtccapturemouseinitpos = 0;
        int mousevirtualinitx = 0;
        int mousevirtualinity = 0;

        float mousevirtualx = 0;
        float mousevirtualy = 0;

        float lastmousevirtualx = 0;
        float lastmousevirtualy = 0;



        int memorymousex = 0;
        int memorymousey = 0;

        int mousebuttonframecounterl = 0;
        int mousebuttonframecounterr = 0;








        float RotationInstScreenx = 0;
        float RotationInstScreeny = 0;
        float RotationInstScreenz = 0;

        int mousex = 0;
        int mousey = 0;



        Quaternion _testQuater;
        //FastNoise fastNoise = new FastNoise();

        int setoncevrdesktop = 0;
        public int activatevrheightmapfeature = 1;

        public int activatelevelgen = 0;


        public int activatenotyetinfinitevoxelterrain = 0;

        scgraphicssecpackage scgraphicssecpackagemessage;

        public int mapWidth = 20;
        public int mapHeight = 1;
        public int mapDepth = 20;

        public int tinyChunkWidth = 20;
        public int tinyChunkHeight = 20;
        public int tinyChunkDepth = 20;

        public int mapObjectInstanceWidth = 1;
        public int mapObjectInstanceHeight = 1;
        public int mapObjectInstanceDepth = 1;

        float _planeSize = 0.1f;
        int InstanceCount = 0;




        //sclevelgenchunk.DInstanceType[] instances;


        int playerusebrush = 0;


        //HUMAN RIG
        int tempMultiInstancePhysicsTotal = 1;
        int _human_inst_rig_x = 1;
        int _human_inst_rig_y = 1;
        int _human_inst_rig_z = 1;
        const int _addToWorld = 0;
        public static scgraphicssec currentscgraphicssec;
        public scgraphicssec() //sccs.scgraphics.scdirectx _sccs.scgraphics.scdirectx, IntPtr _HWND
        {
            currentscgraphicssec = this;
        }

        World thejitterworld;
        World thejitterworld1;
        object somedata0;
        object somedata00;



        public int somevoxelvirtualdesktopw = 1;
        public int somevoxelvirtualdesktoph = 1;
        public int somevoxelvirtualdesktopd = 1;
        public SC_instancedChunkPrim[] somevoxelvirtualdesktop;
        public static SC_GlobalsVoxelInstancing somevoxelvirtualdesktopglobals;
        Vector4 ambientColor = new Vector4(0.45f, 0.45f, 0.45f, 1.0f);
        Vector4 diffuseColour = new Vector4(1, 1, 1, 1);
        Vector3 lightDirection = new Vector3(0, -1, -1);
        Vector3 dirLight = new Vector3(0, -1, 0);
        Vector3 lightpos = new Vector3(0, 20, 0);

        float[][][][][] perlinvalue;
        int[][][][][] perlinvalueswtc;




        Vector3[][][] _array_of_last_frame_voxel_pos;
        Vector3[][][] _array_of_last_frame_cube_pos;
        Vector3[][][] _array_of_last_frame_cone_pos;
        Vector3[][][] _array_of_last_frame_cylinder_pos;
        Vector3[][][] _array_of_last_frame_capsule_pos;
        Vector3[][][] _array_of_last_frame_sphere_pos;
        Matrix[][][] worldMatrixinstancesvoxelcube;
        Matrix[][][] worldMatrix_instances_screen_assets;

        Matrix[][][] worldMatrix_instances_screens;
        //Matrix[][][] world_last_Matrix_instances_screens;
        Matrix[][][] worldMatrix_instances_cubes;
        Matrix[][][] _screenDirMatrix;

        Vector3[][][] point3DCollection;
        Matrix[][][] _screenDirMatrix_correct_pos;



        SC_cube[][] _world_cube_list;
        //sc_voxel[][] worldvoxelcubelists;
        SC_cube[][] _world_screen_list;
        SC_cube[][] _world_screen_assets_list;


        public static Jitter.Forces.Buoyancy _buo;
        Jitter.Forces.Buoyancy[] _buoyancy_area;
        int has_water_buo_effect = -1;
        bool containsCoord;
        JVector rh_attract_force = JVector.Zero;
        JVector lh_attract_force = JVector.Zero;

        //the physics engine can run 4000 objects enabled and having angularOrLinear velocities but the voxels lag a bit at that many objects. but loading as many as 475000 cubes
        //having 36 vertices each and 72 triangles each but at that point it will also lag. will try later to improve the performance.

        float _voxel_rig_cube_size_x = 0.15f;//0.0115f //restitution
        float _voxel_rig_cube_size_y = 0.15f;//0.0115f //static friction
        float _voxel_rig_cube_size_z = 0.15f;//0.0015f //kinetic friction

        //PHYSICS CUBES
        int _inst_cube_x = 2;
        int _inst_cube_y = 2;
        int _inst_cube_z = 2;

        int consolewritecounter = 0;
        int consolewritecountermax = 0;
        int consolewritecounterswtc = 0;

        int someinstancebytesindex = 0;
        int resetvoxelladdercounter = 1;
        int resetvoxelladder = 0;


        int somechunkresetcounter = 0;
        int somechunkplayerspatiallocationresetcounter = 0;


        int sc_menu_scroller = 0;
        int sc_menu_scroller_counter = 0;


        double m11 = 0;
        double m12 = 0;
        double m13 = 0;
        double m14 = 0;
        double m21 = 0;
        double m22 = 0;
        double m23 = 0;
        double m24 = 0;
        double m31 = 0;
        double m32 = 0;
        double m33 = 0;
        double m34 = 0;
        double m41 = 0;
        double m42 = 0;
        double m43 = 0;
        double m44 = 0;

        double m11b = 0;
        double m12b = 0;
        double m13b = 0;
        double m14b = 0;
        double m21b = 0;
        double m22b = 0;
        double m23b = 0;
        double m24b = 0;
        double m31b = 0;
        double m32b = 0;
        double m33b = 0;
        double m34b = 0;
        double m41b = 0;
        double m42b = 0;
        double m43b = 0;
        double m44b = 0;

        double m11c = 0;
        double m12c = 0;
        double m13c = 0;
        double m14c = 0;
        double m21c = 0;
        double m22c = 0;
        double m23c = 0;
        double m24c = 0;
        double m31c = 0;
        double m32c = 0;
        double m33c = 0;
        double m34c = 0;
        double m41c = 0;
        double m42c = 0;
        double m43c = 0;
        double m44c = 0;

        double m11d = 0;
        double m12d = 0;
        double m13d = 0;
        double m14d = 0;
        double m21d = 0;
        double m22d = 0;
        double m23d = 0;
        double m24d = 0;
        double m31d = 0;
        double m32d = 0;
        double m33d = 0;
        double m34d = 0;
        double m41d = 0;
        double m42d = 0;
        double m43d = 0;
        double m44d = 0;

        Vector3 rayDirRighter;

        float vertoffsetx;
        float vertoffsety;
        float vertoffsetz;

        Matrix originRotScreen;
        Matrix rotatingMatrixScreen;
        float oriRotationScreenY { get; set; }
        float oriRotationScreenX { get; set; }
        float oriRotationScreenZ { get; set; }

        int _has_locked_screen_pos = 0;
        int _has_locked_screen_pos_counter = 0;
        Matrix _direction_offsetter;
        Matrix _screen_direction_offsetter_two;
        float sizeWidtherer = 0.0f;
        float sizeheighterer = 0.0f;



        float heightmapscale = 0.001f;
        float heightmapscaleMin = 0.0001f;
        float heightmapscaleMax = 100f;

        Vector3[] directionvectoroffsets;

        struct _rigid_data
        {
            public RigidBody _body;
            public Matrix position;
            public Vector3 directionToGrabber;
            public Vector3 rayGrabDir;
            public float rayGrabDirLength;
            public Vector3 grabHitPoint;
            public float grabHitPointLength;
            public float dirDiffX;
            public float dirDiffY;
            public float dirDiffZ;

            public int _index;
            public int _physics_engine_index;
        }

        _rigid_data _grab_rigid_data;


        //SCREEN SETTINGS
        int _inst_screen_x = 1;
        int _inst_screen_y = 1;
        int _inst_screen_z = 1;

        float _screen_size_x = 2; //0.0115f //1.5f
        float _screen_size_y = 2; //0.0115f //1.5f
        float _screen_size_z = 0.05f; //0.0025f

        float mulScreen = 0.85f;

        int _inst_screen_assets_x = 5;
        int _inst_screen_assets_y = 1;
        int _inst_screen_assets_z = 5;

        float _screen_assets_size_x = 0.0005f; //0.0115f //1.5f
        float _screen_assets_size_y = 0.0005f; //0.0115f //1.5f
        float _screen_assets_size_z = 0.5f;
        float _size_screen;
        bool is_static = false;
        //END OF
        double RotationScreenY { get; set; }
        double RotationScreenX { get; set; }
        double RotationScreenZ { get; set; }


        SC_cube.DLightBuffer[] _DLightBuffer_cube = new SC_cube.DLightBuffer[1];

        // sccs.scgraphics.sc_voxel.DLightBuffer[] _DLightBuffer_voxel_cube = new sc_voxel.DLightBuffer[1];






        public void Shutdown()
        {
            _DLightBuffer_cube = null;


            //sc_voxel[][] worldvoxelcubelists;

            if (_world_cube_list != null)
            {
                for (int i = 0; i < _world_cube_list.Length; i++)
                {
                    if (_world_cube_list[i] != null)
                    {
                        for (int j = 0; j < _world_cube_list[i].Length; j++)
                        {
                            if (_world_cube_list[i][j] != null)
                            {
                                _world_cube_list[i][j].ShutDown();
                            }

                        }
                    }

                }
            }


            if (_world_screen_list != null)
            {
                for (int i = 0; i < _world_screen_list.Length; i++)
                {
                    if (_world_screen_list[i] != null)
                    {
                        for (int j = 0; j < _world_screen_list[i].Length; j++)
                        {
                            if (_world_screen_list[i][j] != null)
                            {
                                _world_screen_list[i][j].ShutDown();
                            }

                        }
                    }

                }
            }

            if (_world_screen_assets_list != null)
            {
                for (int i = 0; i < _world_screen_assets_list.Length; i++)
                {
                    if (_world_screen_assets_list[i] != null)
                    {
                        for (int j = 0; j < _world_screen_assets_list[i].Length; j++)
                        {
                            if (_world_screen_assets_list[i][j] != null)
                            {
                                _world_screen_assets_list[i][j].ShutDown();
                            }

                        }
                    }
                }
            }




            if (ikvoxelbody != null)
            {
                for (int i = 0; i < ikvoxelbody.Length; i++)
                {
                    if (ikvoxelbody[i] != null)
                    {
                        ikvoxelbody[i].Dispose();
                        ikvoxelbody[i] = null;
                    }
                }
            }
            if (ikarmvoxel != null)
            {
                for (int i = 0; i < ikarmvoxel.Length; i++)
                {
                    if (ikarmvoxel[i] != null)
                    {
                        ikarmvoxel[i].Dispose();
                        ikarmvoxel[i] = null;
                    }
                }
            }


            if (ikfingervoxel != null)
            {
                for (int i = 0; i < ikfingervoxel.Length; i++)
                {
                    if (ikfingervoxel[i] != null)
                    {
                        for (int j = 0; j < ikfingervoxel[i].Length; j++)
                        {
                            if (ikfingervoxel[i][j] != null)
                            {
                                ikfingervoxel[i][j].Dispose();
                                ikfingervoxel[i][j] = null;
                            }
                        }
                    }
                }
            }








            thejitterworld = null;
            thejitterworld1 = null;

            somefastnoise = null;

            //PERCEPTRON REGION

            perceptronRotationXAXIS = null;
            perceptronRotationYAXIS = null;
            perceptronRotationZAXIS = null;

            //dataForPerceptronXAxis = null;
            //dataForPerceptronYAXIS = null;
            //dataForPerceptronZAXIS = null;


            if (somevoxelvirtualdesktop != null)
            {
                for (int i = 0; i < somevoxelvirtualdesktop.Length; i++)
                {
                    if (somevoxelvirtualdesktop[i] != null)
                    {

                        for (int j = 0; j < somevoxelvirtualdesktop[i].arrayOfChunkData.Length; j++)
                        {
                            if (somevoxelvirtualdesktop[i].arrayOfChunkData[j] != null)
                            {
                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].constantLightBuffer != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].constantLightBuffer.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].constantLightBuffer = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].constantMatrixPosBuffer != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].constantMatrixPosBuffer.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].constantMatrixPosBuffer = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].ConstantTessellationBuffer != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].ConstantTessellationBuffer.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].ConstantTessellationBuffer = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].IndicesBuffer != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].IndicesBuffer.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].IndicesBuffer = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].instanceBuffer != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].instanceBuffer.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].instanceBuffer = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].instanceBufferHeightmap != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].instanceBufferHeightmap.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].instanceBufferHeightmap = null;
                                }
                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceBufferLocD != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceBufferLocD.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceBufferLocD = null;
                                }
                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceBufferLocH != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceBufferLocH.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceBufferLocH = null;
                                }
                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceBufferLocW != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceBufferLocW.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceBufferLocW = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceRotationBufferFORWARD != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceRotationBufferFORWARD.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceRotationBufferFORWARD = null;
                                }
                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceRotationBufferRIGHT != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceRotationBufferRIGHT.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceRotationBufferRIGHT = null;
                                }
                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceRotationBufferUP != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceRotationBufferUP.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceRotationBufferUP = null;
                                }


                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].mapBuffer != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].mapBuffer.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].mapBuffer = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].vertexBuffer != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].vertexBuffer.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].vertexBuffer = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].DomainShader != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].DomainShader.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].DomainShader = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].GeometryShader != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].GeometryShader.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].GeometryShader = null;
                                }


                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].HullShader != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].HullShader.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].HullShader = null;
                                }


                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].PixelShader != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].PixelShader.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].PixelShader = null;
                                }


                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].VertexShader != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].VertexShader.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].VertexShader = null;
                                }



                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].arrayOfDeVectorMapTemp = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].arrayOfDeVectorMapTempTwo = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].arrayOfSomeMap = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].arrayOfVertex = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].heightmapmatrix = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesbytemaps = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesccsbytemapxyz = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesIndex = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesLocationD = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesLocationH = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesLocationW = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrix = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixb = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixc = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixd = null;




                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixbuffer != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixbuffer.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixbuffer = null;
                                }


                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixbufferb != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixbufferb.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixbufferb = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixbufferc != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixbufferc.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixbufferc = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixbufferd != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixbufferd.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixbufferd = null;
                                }


                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].Layout != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].Layout.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].Layout = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].lightBuffer != null)
                                {

                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].lightBuffer = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].matrixBuffer != null)
                                {

                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].matrixBuffer = null;
                                }


                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].samplerState != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].samplerState.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].samplerState = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].someoculusdirbuffer != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].someoculusdirbuffer.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].someoculusdirbuffer = null;
                                }




                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].originalArrayOfIndices = null;

                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].SC_instancedChunk_Instances = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].SC_instancedChunk_InstancesFORWARD = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].SC_instancedChunk_InstancesRIGHT = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].SC_instancedChunk_InstancesUP = null;

                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].someovrdir = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].tessellationBuffer = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].arrayOfVertex = null;



                                somevoxelvirtualdesktop[i].arrayOfChunkData[j] = null;

                            }
                        }


                        for (int j = 0; j < somevoxelvirtualdesktop[i].arrayofindexzeromesh.Length; j++)
                        {
                            if (somevoxelvirtualdesktop[i].arrayofindexzeromesh[j] != null)
                            {
                                somevoxelvirtualdesktop[i].arrayofindexzeromesh[j].ShutDown();
                                somevoxelvirtualdesktop[i].arrayofindexzeromesh[j] = null;
                            }
                        }


                        somevoxelvirtualdesktop[i].shaderOfChunk = null;
                        somevoxelvirtualdesktop[i].ShutDown();

                        somevoxelvirtualdesktop[i] = null;
                    }
                }
            }
            somevoxelvirtualdesktop = null;
            somevoxelvirtualdesktopglobals = null;










            somefastnoise = null;


            _array_of_last_frame_voxel_pos = null;
            _array_of_last_frame_cube_pos = null;
            _array_of_last_frame_cone_pos = null;
            _array_of_last_frame_cylinder_pos = null;
            _array_of_last_frame_capsule_pos = null;
            _array_of_last_frame_sphere_pos = null;
            worldMatrix_base = null;
            worldMatrixinstancesvoxelcube = null;
            worldMatrix_instances_screen_assets = null;

            worldMatrix_instances_screens = null;
            // world_last_Matrix_instances_screens;
            worldMatrix_instances_cubes = null;
            _screenDirMatrix = null;

            point3DCollection = null;
            _screenDirMatrix_correct_pos = null;



            _world_cube_list = null;
            //sc_voxel[][] worldvoxelcubelists;
            _world_screen_list = null;
            _world_screen_assets_list = null;


            _buo = null;
            _buoyancy_area = null;

            _DLightBuffer_cube = null;





            ///Vector3 screenNormalForward;

            //Vector3 originalpointerofcamonscreen;


            hasinit = 0;

            _sc_jitter_tasks = null;
            /*Matrix viewMatrix;
        Matrix projectionMatrix;
        Matrix originRot;
        Matrix rotatingMatrix;
        Matrix hmdrotMatrix;
        Matrix hmd_matrix;
        Matrix rotatingMatrixForPelvis;
        //Matrix _rightTouchMatrix;
        //Matrix _leftTouchMatrix;
        Matrix oriProjectionMatrix;
        Matrix extramatrix;
        Vector3 OFFSETPOS;
        Posef handPoseRight;
        Posef handPoseLeft;

        Matrix _worldMatrix;
        Matrix _viewMatrix;
        Matrix _projectionMatrix;

        Matrix _rightTouchMatrix;
        Matrix _leftTouchMatrix;*/


            //SC_VR_Chunk.chunkData chunkDat = new SC_VR_Chunk.chunkData();
            //sclevelgenchunk.chunkData chunkdatlevel = new sclevelgenchunk.chunkData();




            displayMidpoint = 0;
            /*TrackingState trackingState;
            Posef[] eyePoses;
            EyeType eye;
            //EyeTexture eyeTexture;
            bool latencyMark = false;
            TrackingState trackState;
            PoseStatef poseStatefer;
            Posef hmdPose;
            Quaternionf hmdRot;
            Vector3 _hmdPoser;
            Quaternion _hmdRoter;
            Vector3 oculusRiftDir = Vector3.Zero;*/



            watchforgetmousepos = null;//= new Stopwatch();
            stopwatchswtc = 0;


            watchforgetmouseclickl = null;//= new Stopwatch();
            stopwatchmouseclickswtcl = 0;

            watchforgetmouseclickr = null;//= new Stopwatch();
            stopwatchmouseclickswtcr = 0;

            watchforgetmouseposset = null;//= new Stopwatch();
            stopwatchmousepossetswtc = 0;



            //DateTime startTime;//= new DateTime();
            somefastnoise = null;//= new FastNoise();

            //PERCEPTRON REGION

            perceptronRotationXAXIS = null;//
            perceptronRotationYAXIS = null;//
            perceptronRotationZAXIS = null;//

            //SC_AI.data_input dataForPerceptronXAxis;
            //SC_AI.data_input dataForPerceptronYAXIS;
            //SC_AI.data_input dataForPerceptronZAXIS;
            /*Matrix rotatedDroneMatrix;
            Matrix rotatedDroneMatrix1;
            Matrix rotatedDroneMatrix2;*/



            swtccapturemouseinitpos = 0;
            mousevirtualinitx = 0;
            mousevirtualinity = 0;

            mousevirtualx = 0;
            mousevirtualy = 0;

            lastmousevirtualx = 0;
            lastmousevirtualy = 0;



            memorymousex = 0;
            memorymousey = 0;

            mousebuttonframecounterl = 0;
            mousebuttonframecounterr = 0;








            RotationInstScreenx = 0;
            RotationInstScreeny = 0;
            RotationInstScreenz = 0;

            mousex = 0;
            mousey = 0;



            //Quaternion _testQuater;
            //FastNoise fastNoise = new FastNoise();

            setoncevrdesktop = 0;
            activatevrheightmapfeature = 0;

            activatelevelgen = 0;


            activatenotyetinfinitevoxelterrain = 0;

            //scgraphicssecpackage scgraphicssecpackagemessage;

            mapWidth = 0;
            mapHeight = 0;
            mapDepth = 0;

            tinyChunkWidth = 0;
            tinyChunkHeight = 0;
            tinyChunkDepth = 0;

            mapObjectInstanceWidth = 0;
            mapObjectInstanceHeight = 0;
            mapObjectInstanceDepth = 0;

            _planeSize = 0;
            InstanceCount = 0;



            /*
        SC_VR_Chunk[] arrayOfChunks;

        //SC_VR_Chunk.DInstanceType[] instances;

        sclevelgenchunk[] arrayoflevelchunk;
        sclevelgenchunk[] arrayoflevelchunkfloortiles;
        sclevelgenchunk[] arrayoflevelfrontwall;
        sclevelgenchunk[] arrayoflevelbackwall;
        sclevelgenchunk[] arrayoflevelrightwall;
        sclevelgenchunk[] arrayoflevelleftwall;
        sclevelgenchunk[] arrayoflevelleftfrontinsidecorner;
        sclevelgenchunk[] arrayoflevelrightfrontinsidecorner;
        sclevelgenchunk[] arrayoflevelleftbackinsidecorner;
        sclevelgenchunk[] arrayoflevelrightbackinsidecorner;
        sclevelgenchunk[] arrayoflevelleftfrontoutsidecorner;
        sclevelgenchunk[] arrayoflevelrightfrontoutsidecorner;
        sclevelgenchunk[] arrayoflevelleftbackoutsidecorner;
        sclevelgenchunk[] arrayoflevelrightbackoutsidecorner;
            */



            //sclevelgenchunk.DInstanceType[] instances;


            playerusebrush = 0;


            //HUMAN RIG
            tempMultiInstancePhysicsTotal = 0;
            _human_inst_rig_x = 0;
            _human_inst_rig_y = 0;
            _human_inst_rig_z = 0;
            //_addToWorld = 0;



            thejitterworld = null;
            thejitterworld1 = null;
            somedata0 = null;
            somedata00 = null;



            somevoxelvirtualdesktopw = 0;
            somevoxelvirtualdesktoph = 0;
            somevoxelvirtualdesktopd = 0;
            somevoxelvirtualdesktop = null;
            somevoxelvirtualdesktopglobals = null;
            /*Vector4 ambientColor = new Vector4(0.45f, 0.45f, 0.45f, 1.0f);
            Vector4 diffuseColour = new Vector4(1, 1, 1, 1);
            Vector3 lightDirection = new Vector3(0, -1, -1);
            Vector3 dirLight = new Vector3(0, -1, 0);
            Vector3 lightpos = new Vector3(0, 20, 0);*/





            _array_of_last_frame_voxel_pos = null;
            _array_of_last_frame_cube_pos = null;
            _array_of_last_frame_cone_pos = null;
            _array_of_last_frame_cylinder_pos = null;
            _array_of_last_frame_capsule_pos = null;
            _array_of_last_frame_sphere_pos = null;
            worldMatrix_base = null;
            worldMatrixinstancesvoxelcube = null;
            worldMatrix_instances_screen_assets = null;

            worldMatrix_instances_screens = null;
            // world_last_Matrix_instances_screens;
            worldMatrix_instances_cubes = null;
            _screenDirMatrix = null;

            point3DCollection = null;
            _screenDirMatrix_correct_pos = null;



            _world_cube_list = null;
            //sc_voxel[][] worldvoxelcubelists;
            _world_screen_list = null;
            _world_screen_assets_list = null;


            _buo = null;
            _buoyancy_area = null;
            has_water_buo_effect = 0;
            /*bool containsCoord;
            JVector rh_attract_force = JVector.Zero;
            JVector lh_attract_force = JVector.Zero;
            */
            //the physics engine can run 4000 objects enabled and having angularOrLinear velocities but the voxels lag a bit at that many objects. but loading as many as 475000 cubes
            //having 36 vertices each and 72 triangles each but at that point it will also lag. will try later to improve the performance.
            _voxel_mass = 0;

            _inst_voxel_cube_x = 0;
            _inst_voxel_cube_y = 0;
            _inst_voxel_cube_z = 0;

            _voxel_cube_size_x = 0;//0.0115f //restitution
            _voxel_cube_size_y = 0;//0.0115f //static friction
            _voxel_cube_size_z = 0;//0.0015f //kinetic friction

            voxel_general_size = 0;
            voxel_type = 0;

            _voxel_rig_cube_size_x = 0;//0.0115f //restitution
            _voxel_rig_cube_size_y = 0;//0.0115f //static friction
            _voxel_rig_cube_size_z = 0;//0.0015f //kinetic friction

            //PHYSICS CUBES
            _inst_cube_x = 0;
            _inst_cube_y = 0;
            _inst_cube_z = 0;

            consolewritecounter = 0;
            consolewritecountermax = 0;
            consolewritecounterswtc = 0;

            someinstancebytesindex = 0;
            resetvoxelladdercounter = 0;
            resetvoxelladder = 0;


            somechunkresetcounter = 0;
            somechunkplayerspatiallocationresetcounter = 0;


            sc_menu_scroller = 0;
            sc_menu_scroller_counter = 0;


            m11 = 0;
            m12 = 0;
            m13 = 0;
            m14 = 0;
            m21 = 0;
            m22 = 0;
            m23 = 0;
            m24 = 0;
            m31 = 0;
            m32 = 0;
            m33 = 0;
            m34 = 0;
            m41 = 0;
            m42 = 0;
            m43 = 0;
            m44 = 0;

            m11b = 0;
            m12b = 0;
            m13b = 0;
            m14b = 0;
            m21b = 0;
            m22b = 0;
            m23b = 0;
            m24b = 0;
            m31b = 0;
            m32b = 0;
            m33b = 0;
            m34b = 0;
            m41b = 0;
            m42b = 0;
            m43b = 0;
            m44b = 0;

            m11c = 0;
            m12c = 0;
            m13c = 0;
            m14c = 0;
            m21c = 0;
            m22c = 0;
            m23c = 0;
            m24c = 0;
            m31c = 0;
            m32c = 0;
            m33c = 0;
            m34c = 0;
            m41c = 0;
            m42c = 0;
            m43c = 0;
            m44c = 0;

            m11d = 0;
            m12d = 0;
            m13d = 0;
            m14d = 0;
            m21d = 0;
            m22d = 0;
            m23d = 0;
            m24d = 0;
            m31d = 0;
            m32d = 0;
            m33d = 0;
            m34d = 0;
            m41d = 0;
            m42d = 0;
            m43d = 0;
            m44d = 0;

            //Vector3 rayDirRighter;

            vertoffsetx = 0;
            vertoffsety = 0;
            vertoffsetz = 0;

            /*Matrix originRotScreen;
            Matrix rotatingMatrixScreen;*/
            oriRotationScreenY = 0;// { get; set; }
            oriRotationScreenX = 0;//{ get; set; }
            oriRotationScreenZ = 0;//{ get; set; }

            _has_locked_screen_pos = 0;
            _has_locked_screen_pos_counter = 0;
            //Matrix _direction_offsetter;
            //Matrix _screen_direction_offsetter_two;
            sizeWidtherer = 0;
            sizeheighterer = 0;



            heightmapscale = 0;
            heightmapscaleMin = 0;
            heightmapscaleMax = 0;

            directionvectoroffsets = null;



            //_rigid_data _grab_rigid_data;


            //SCREEN SETTINGS
            _inst_screen_x = 0;
            _inst_screen_y = 0;
            _inst_screen_z = 0;

            _screen_size_x = 0; //0.0115f //1.5f
            _screen_size_y = 0; //0.0115f //1.5f
            _screen_size_z = 0; //0.0025f

            mulScreen = 0;

            _inst_screen_assets_x = 0;
            _inst_screen_assets_y = 0;
            _inst_screen_assets_z = 0;

            _screen_assets_size_x = 0;
            _screen_assets_size_y = 0;
            _screen_assets_size_z = 0;
            _size_screen = 0;
            RotationScreenY = 0;
            RotationScreenX = 0;
            RotationScreenZ = 0;
            _DLightBuffer_cube = null;

            // sccs.scgraphics.sc_voxel.DLightBuffer[] _DLightBuffer_voxel_cube = new sc_voxel.DLightBuffer[1];













            frame_counter_4_buttonY = 0;
            display_grid_type = 0;


            //[DllImport("User32.dll")]
            //private static extern bool SetCursorPos(X, Y);

            //TO STABILIZE THE MOUSE CURSOR ON THE SCREEN.
            //_MaxArraySize0 = 0; //50
            //_MaxArraySize1 = 0; //49
            //TO STABILIZE THE MOUSE CURSOR ON THE SCREEN.

            //SharpDX.Matrix _oculusR_Cursor_matrix = SharpDX.Matrix.Identity;
            _updateFunctionStopwatchRightThumbstickGoRight = null;// new Stopwatch();
            _updateFunctionStopwatchRightThumbstickGoLeft = null;//new Stopwatch();
            _updateFunctionStopwatchLeftThumbstick = null;//new Stopwatch();
            _updateFunctionStopwatchRight = null;//new Stopwatch();

            hasClickedBUTTONA = 0;
            hasClickedBUTTONACounter = 0;

            /*_startOnce02 = true;
            _updateFunctionBoolRight = true;
            _updateFunctionBoolLeft = true;
            _updateFunctionBoolLeftThumbStickGoLeft = true;
            _updateFunctionBoolLeftThumbStickGoRight = true;
            _updateFunctionBoolRightThumbStickGoLeft = true;
            _updateFunctionBoolRightThumbStickGoRight = true;
            _updateFunctionBoolLeftHandTrigger = true;
            _updateFunctionBoolRightHandTrigger = true;
            _updateFunctionBoolLeftIndexTrigger = true;
            _updateFunctionBoolRightIndexTrigger = true;
            _updateFunctionBoolTouchRightButtonA = true;
            _updateFunctionBoolLeftThumbStick = true;*/
            _frameCounterTouchRight = 0;

            /*Plane planer;

            Vector3 centerPosRight;
            SharpDX.Ray someRay;
            Vector3 intersectPointRight;
            bool intersecter;

            Vector3 centerPosLeft;
            Vector3 rayDirLeft;
            SharpDX.Ray someRayLeft;
            Vector3 intersectPointLeft;
            bool intersecterLeft;
            Vector3 stabilizedIntersectionPosLeft;
            Vector3 stabilizedIntersectionPosRight;
            */


            currentFrameLeft = 0;
            currentFrameRight = 0;
            averageXRight = 0;
            averageYRight = 0;
            averageZRight = 0;
            lastRightHitPointXFrameOne = 0;
            lastRightHitPointYFrameOne = 0;
            lastRightHitPointZFrameOne = 0;
            positionXRight = 0;
            positionYRight = 0;
            positionZRight = 0;
            averageXLeft = 0;
            averageYLeft = 0;
            averageZLeft = 0;
            lastLeftHitPointXFrameOne = 0;
            lastLeftHitPointYFrameOne = 0;
            lastLeftHitPointZFrameOne = 0;
            positionXLeft = 0;
            positionYLeft = 0;
            positionZLeft = 0;
            differenceX = 0;
            differenceY = 0;
            differenceZ = 0;
            percentXLeft = 0;
            percentYLeft = 0;

            widthLength = 0;
            heightLength = 0;
            currentPosWidth = 0;
            currentPosHeight = 0;

            percentXRight = 0;
            percentYRight = 0;

            currentX = 0;
            currentY = 0;
            currentZ = 0;

            _has_init_ray = 0;
            /*JMatrix _last_frame_rigid_grab_rot;
            Vector3 _last_frame_rigid_grab_pos;
            Vector3 _last_frame_handPos = Vector3.Zero;
            Vector3 _last_final_hand_pos_right;
            */

            //HERE IS THE MOUSE STABILIZER ARRAYS - THE BIGGER THE ARRAYS THE SLOWER AND MORE STABLE THE MOUSE IS ON THE SCREEN.
            arrayOfStabilizerPosRight = null;// new Vector3[_MaxArraySize0];
            arrayOfStabilizerPosXRight = null;// new [_MaxArraySize0];
            arrayOfStabilizerPosDifferenceXRight = null;//  new [_MaxArraySize1];
            arrayOfStabilizerPosYRight = null;// new [_MaxArraySize0];
            arrayOfStabilizerPosDifferenceYRight = null;//  new [_MaxArraySize1];

            arrayOfStabilizerPosZRight = null;//  new [_MaxArraySize0];
            arrayOfStabilizerPosDifferenceZRight = null;// new [_MaxArraySize1];



            arrayOfStabilizerPosLeft = null;// new Vector3[_MaxArraySize0];
            arrayOfStabilizerPosXLeft = null;// new [_MaxArraySize0];
            arrayOfStabilizerPosDifferenceXLeft = null;// new [_MaxArraySize1];
            arrayOfStabilizerPosYLeft = null;// new [_MaxArraySize0];
            arrayOfStabilizerPosDifferenceYLeft = null;// new [_MaxArraySize1];

            arrayOfStabilizerPosZLeft = null;// new [_MaxArraySize0];
            arrayOfStabilizerPosDifferenceZLeft = null;// new [_MaxArraySize1];

            //
            _arrayOfStabilizerPosRight = null;// new Vector3[_MaxArraySize0];
            _arrayOfStabilizerPosXRight = null;// new [_MaxArraySize0];
            _arrayOfStabilizerPosDifferenceXRight = null;// new [_MaxArraySize1];
            _arrayOfStabilizerPosYRight = null;// new [_MaxArraySize0];
            _arrayOfStabilizerPosDifferenceYRight = null;// new [_MaxArraySize1];

            _arrayOfStabilizerPosLeft = null;// new Vector3[_MaxArraySize0];
            _arrayOfStabilizerPosXLeft = null;// new [_MaxArraySize0];
            _arrayOfStabilizerPosDifferenceXLeft = null;// new [_MaxArraySize1];
            _arrayOfStabilizerPosYLeft = null;// new [_MaxArraySize0];
            _arrayOfStabilizerPosDifferenceYLeft = null;// new [_MaxArraySize1];

            _hasLockedMouse = 0;
            /*Matrix hmd_matrix_current = Matrix.Identity;
            Matrix hmdmatrixcurrentforpelvis = Matrix.Identity;

            SharpDX.Matrix _intersectTouchRightMatrix = SharpDX.Matrix.Identity;
            SharpDX.Matrix _intersectTouchLeftMatrix = SharpDX.Matrix.Identity;

            Matrix final_hand_pos_right_locked;
            Matrix final_hand_pos_left_locked;
            Matrix tempMatrix = Matrix.Identity;// tempMatrix
            Matrix _last_screen_pos = Matrix.Identity;*/
            had_locked_screen = -1;
            _tier_logic_swtch_lock_screen = 0;
            //Matrix _current_screen_pos = Matrix.Identity;

            //OCULUS TOUCH SETTINGS 
            //Ab3d.OculusWrap.Result resultsRight;
            //buttonPressedOculusTouchRight;
            thumbStickRight = null;
            handTriggerRight = null;
            indexTriggerRight = null;

            indexTriggerRightLastAbs = 0;
            indexTriggerLeftLastAbs = 0;

            //Ab3d.OculusWrap.Result resultsLeft;
            //buttonPressedOculusTouchLeft;
            thumbStickLeft = null;
            handTriggerLeft = null;
            indexTriggerLeft = null;
            //Posef handPoseLeft;
            //SharpDX.Quaternion _leftTouchQuat;
            //Posef handPoseRight;
            //SharpDX.Quaternion _rightTouchQuat;
            //Matrix _leftTouchMatrix = Matrix.Identity;
            //Matrix _rightTouchMatrix = Matrix.Identity;
            //OCULUS TOUCH SETTINGS

            /*
            Matrix hmdmatrixRot_;
            Matrix OriginRot = Matrix.Identity;
            Matrix RotatingMatrix = Matrix.Identity;
            Matrix RotatingMatrixForPelvis = Matrix.Identity;
            Matrix viewMatrix_ = Matrix.Identity;
            */


            lastbuttonPressedOculusTouchRight = 0;
            lastbuttonPressedOculusTouchLeft = 0;
            _indexMouseMove = 0;
            //bool restartFrameCounterRight = false;

            hasClickedHomeButtonTouchLeft = 0;
            hasClickedHomeButtonTouchLeftCounter = 0;

            //bool isHoldingBUTTONA = false;
            //bool hasClickedBUTTONB = false;
            hasClickedBUTTONX = 0;
            hasClickedBUTTONY = 0;
            //bool restartFrameCounterLeft = false;




            //bool _canResetCounterTouchRightButtonA = false;
            //bool _canResetCounterTouchRightButtonB = false;
            _frameCounterTouchLeft = 0;
            /*bool _canResetCounterTouchLeftButtonA = false;
            bool _canResetCounterTouchLeftButtonB = false;
            bool _canResetCounterTouchLeftButtonX = false;
            bool _canResetCounterTouchLeftButtonY = false;
            bool hasUsedThumbStickLeftW = false;
            bool hasUsedThumbStickLeftS = false;
            bool hasUsedThumbStickLeftA = false;
            bool hasUsedThumbStickRightD = false;
            bool hasUsedThumbStickRightQ = false;
            bool hasUsedThumbStickRightE = false;
            bool lastHasUsedHandTriggerLeft = false;
            bool hasUsedHandTriggerLeft = false;*/


            _out_of_bounds_oculus_rift = 0;
            _out_of_bounds_right = 0;
            _out_of_bounds_left = 0;
            _lastMousePosXRight = 0;
            _lastMousePosYRight = 0;



            //SPECTRUM
            //SPECTRUM
            //SPECTRUM
            //const _inst_spectrum_x = 42; // 36 // 210 //75 // 420
            //const _inst_spectrum_y = 1;
            //const _inst_spectrum_z = 21; // 36 // 210 //75 //5625 //210
            _spectrum_size_x = 0; //0.001115f
            _spectrum_size_y = 0;
            _spectrum_size_z = 0;
            _sound_byte_array = null;// new byte[_inst_spectrum_x * _inst_spectrum_z]; //44100
            _sound_byte_array_instant = null;//= new byte[_inst_spectrum_x * _inst_spectrum_z]; //44100 //176400
            has_spoken_main = 0;
            has_spoken_sec = 0;
            has_spoken_tier = 0;
            has_spoken_quart = 0;
            /*string last_xml_filepath = "";
            string last_wave_filepath = "";
            DateTime _time_of_recording_start = DateTime.Now;
            DateTime _time_of_recording_end = DateTime.Now;*/
            sc_can_start_rec_counter = 0;
            sc_can_start_rec_counter_before_add_index = 0;
            sc_play_file = 0;
            sc_play_file_counter = 0;
            sc_save_file = 0;
            sc_save_file_counter = 0;
            sc_start_recording = 0;
            sc_start_recording_counter = 0;
            //string short_path = "";
            //string instant_short_path = "";
            spectrum_noise_value = 0;
            _sound_player = null;//new SoundPlayer();
                                 //   Matrix spectrum_mat = Matrix.Identity;
            writer = null;//new XmlTextWriter(Console.Out);
                          //   string path;
            _records_counter = 0;
            _records_instant_counter = 0;
            _frames_to_access_counter = 0;
            _spectrum_work = 0;
            _spectrum_work_counter = 0;
            _has_recorded = 0;
            divxadd = 0;
            divyadd = 0;

            someemptybytes = 0;
            pixelsize = 0;
            somemindexy = 0;
            somemindexx = 0;

            somepixelsize = 0;
            somepixelval = 0;
            bytePoser = 0;

            somemultiplier = 0; // -25 // -100
            someresw = 0;//
            someresh = 0;//
            someindexmx = 0;
            someindexmy = 0;

            totalsize = 0;


            swtchy = 0;
            swtchx = 0;
            swtchz = 0;

            xx = 0;
            yy = 0;
            zz = 0;

            a = 0;//
            b = 0;//
            g = 0;//
            r = 0;//
            total = 0;//
            somenoise = 0;//
            somenoisevalue = 0;

            addmulsub = 0;//0 add // 1mul // 2sub


            hasgot0 = 1;
            hasgot1 = 0;
            hasgot2 = 0;
            hasgot3 = 0;
            hasgot4 = 0;
            hasgot5 = 0;
            hasgot6 = 0;
            hasgot7 = 0;
            hasgot8 = 0;
            hasgot9 = 0;
            hasgot10 = 0;
            hasgot11 = 0;


            noisehasgot0 = 0;
            noisehasgot1 = 0;
            noisehasgot2 = 0;
            noisehasgot3 = 0;
            noisehasgot4 = 0;
            noisehasgot5 = 0;
            noisehasgot6 = 0;
            noisehasgot7 = 0;
            noisehasgot8 = 0;
            noisehasgot9 = 0;
            noisehasgot10 = 0;
            noisehasgot11 = 0;

            hasgotswtc0 = 1;
            hasgotswtc1 = 0;
            hasgotswtc2 = 0;
            hasgotswtc3 = 0;
            hasgotswtc4 = 0;
            hasgotswtc5 = 0;
            hasgotswtc6 = 0;
            hasgotswtc7 = 0;
            hasgotswtc8 = 0;
            hasgotswtc9 = 0;
            hasgotswtc10 = 0;
            hasgotswtc11 = 0;

            swtchinstantsound = 0;









            directionvectoroffsets = null;
            _screenDirMatrix = null;
            _screenDirMatrix_correct_pos = null;
            point3DCollection = null;
            _world_cube_list = null;
            worldMatrixinstancesvoxelcube = null;
            _array_of_last_frame_cube_pos = null;
            _array_of_last_frame_voxel_pos = null;
            worldMatrix_instances_screens = null;
            _world_screen_list = null;
            _world_screen_assets_list = null;
            worldMatrix_instances_screen_assets = null;


            GC.Collect();
        }






















        public scmessageobjectjitter[][] createarraysforallvoxelassets(scmessageobjectjitter[][] _sc_jitter_tasks)
        {




            startTime = DateTime.Now;


            directionvectoroffsets = new Vector3[4];

            for (int i = 0; i < directionvectoroffsets.Length; i++)
            {
                directionvectoroffsets[i] = Vector3.Zero;
            }


            //Program.MessageBox((IntPtr)0, "test0", "scmsg", 0);           

            float r = 0; //0.75f
            float g = 0; //0.75f
            float b = 0; //0.75f
            float a = 1;
            Matrix _object_worldmatrix = Matrix.Identity;
            float offsetPosX;
            float offsetPosY;
            float offsetPosZ;

            if (Program.usejitterphysics == 1)
            {
                //SETTING UP SINGLE WORLD OBJECTS
                //END OF LOOP FOR PHYSICS ENGINE INSTANCES
                somedata0 = (object)_sc_jitter_tasks[0][0]._world_data[0];
                //World[] _jitter_worlds0 = (World[])somedata0;
                thejitterworld = (World)somedata0;
            }

            worldMatrix_base = new Matrix[1];
            worldMatrix_base[0] = Matrix.Identity;


            _screenDirMatrix = new Matrix[Program.physicsengineinstancex * Program.physicsengineinstancey * Program.physicsengineinstancez][][];
            _screenDirMatrix_correct_pos = new Matrix[Program.physicsengineinstancex * Program.physicsengineinstancey * Program.physicsengineinstancez][][];
            point3DCollection = new Vector3[Program.physicsengineinstancex * Program.physicsengineinstancey * Program.physicsengineinstancez][][];


            _world_cube_list = new SC_cube[Program.physicsengineinstancex * Program.physicsengineinstancey * Program.physicsengineinstancez][];
            //worldvoxelcubelists = new sc_voxel[Program.physicsengineinstancex * Program.physicsengineinstancey * Program.physicsengineinstancez][];
            worldMatrixinstancesvoxelcube = new Matrix[Program.physicsengineinstancex * Program.physicsengineinstancey * Program.physicsengineinstancez][][];
            _array_of_last_frame_cube_pos = new Vector3[Program.physicsengineinstancex * Program.physicsengineinstancey * Program.physicsengineinstancez][][];
            _array_of_last_frame_voxel_pos = new Vector3[Program.physicsengineinstancex * Program.physicsengineinstancey * Program.physicsengineinstancez][][];

            worldMatrix_instances_screens = new Matrix[Program.physicsengineinstancex * Program.physicsengineinstancey * Program.physicsengineinstancez][][];
            _world_screen_list = new SC_cube[Program.physicsengineinstancex * Program.physicsengineinstancey * Program.physicsengineinstancez][];
            _world_screen_assets_list = new SC_cube[Program.physicsengineinstancex * Program.physicsengineinstancey * Program.physicsengineinstancez][];
            worldMatrix_instances_screen_assets = new Matrix[Program.physicsengineinstancex * Program.physicsengineinstancey * Program.physicsengineinstancez][][];

            worldmatrixinstancesvoxelsforcalculationsonly = new Matrix[Program.physicsengineinstancex * Program.physicsengineinstancey * Program.physicsengineinstancez][][];

            perlinvalue = new float[Program.physicsengineinstancex * Program.physicsengineinstancey * Program.physicsengineinstancez][][][][];
            perlinvalueswtc = new int[Program.physicsengineinstancex * Program.physicsengineinstancey * Program.physicsengineinstancez][][][][];











            Vector3 physics_engine_offset_pos = Vector3.Zero;
            Vector3 world_pos_offset = Vector3.Zero;
            float offsetCubeY = 0;
            float offsetVoxelY = 0;
            float offsetCapsuleY = 0;
            float offsetConeY = 0;
            float offsetCylinderY = 0;
            float offsetSphereY = 0;



            string pathtoprojecttexture = System.IO.Directory.GetCurrentDirectory();


            idletexture = new _sc_texture_loader();
            bool _hasinit1 = idletexture.Initialize(scdirectx.D3D.device, "terrainGrassDirt.bmp");


            Program.MessageBox((IntPtr)0, "hasinit:" + _hasinit1, "scmsg", 0);



            //_sc_jitter_tasks[0][0].hasinit = 1;
            hasinit = 1;
            return _sc_jitter_tasks;
        }



        public _sc_texture_loader idletexture;








        public void flushsccsvvdhd()
        {

            if (somevoxelvirtualdesktop != null)
            {
                for (int i = 0; i < somevoxelvirtualdesktop.Length; i++)
                {
                    if (somevoxelvirtualdesktop[i] != null)
                    {

                        for (int j = 0; j < somevoxelvirtualdesktop[i].arrayOfChunkData.Length; j++)
                        {
                            if (somevoxelvirtualdesktop[i].arrayOfChunkData[j] != null)
                            {
                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].constantLightBuffer != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].constantLightBuffer.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].constantLightBuffer = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].constantMatrixPosBuffer != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].constantMatrixPosBuffer.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].constantMatrixPosBuffer = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].ConstantTessellationBuffer != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].ConstantTessellationBuffer.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].ConstantTessellationBuffer = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].IndicesBuffer != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].IndicesBuffer.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].IndicesBuffer = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].instanceBuffer != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].instanceBuffer.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].instanceBuffer = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].instanceBufferHeightmap != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].instanceBufferHeightmap.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].instanceBufferHeightmap = null;
                                }
                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceBufferLocD != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceBufferLocD.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceBufferLocD = null;
                                }
                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceBufferLocH != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceBufferLocH.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceBufferLocH = null;
                                }
                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceBufferLocW != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceBufferLocW.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceBufferLocW = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceRotationBufferFORWARD != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceRotationBufferFORWARD.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceRotationBufferFORWARD = null;
                                }
                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceRotationBufferRIGHT != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceRotationBufferRIGHT.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceRotationBufferRIGHT = null;
                                }
                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceRotationBufferUP != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceRotationBufferUP.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].InstanceRotationBufferUP = null;
                                }


                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].mapBuffer != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].mapBuffer.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].mapBuffer = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].vertexBuffer != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].vertexBuffer.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].vertexBuffer = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].DomainShader != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].DomainShader.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].DomainShader = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].GeometryShader != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].GeometryShader.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].GeometryShader = null;
                                }


                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].HullShader != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].HullShader.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].HullShader = null;
                                }


                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].PixelShader != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].PixelShader.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].PixelShader = null;
                                }


                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].VertexShader != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].VertexShader.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].VertexShader = null;
                                }



                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].arrayOfDeVectorMapTemp = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].arrayOfDeVectorMapTempTwo = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].arrayOfSomeMap = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].arrayOfVertex = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].heightmapmatrix = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesbytemaps = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesccsbytemapxyz = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesIndex = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesLocationD = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesLocationH = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesLocationW = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrix = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixb = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixc = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixd = null;




                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixbuffer != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixbuffer.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixbuffer = null;
                                }


                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixbufferb != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixbufferb.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixbufferb = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixbufferc != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixbufferc.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixbufferc = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixbufferd != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixbufferd.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].instancesmatrixbufferd = null;
                                }


                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].Layout != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].Layout.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].Layout = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].lightBuffer != null)
                                {

                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].lightBuffer = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].matrixBuffer != null)
                                {

                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].matrixBuffer = null;
                                }


                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].samplerState != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].samplerState.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].samplerState = null;
                                }

                                if (somevoxelvirtualdesktop[i].arrayOfChunkData[j].someoculusdirbuffer != null)
                                {
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].someoculusdirbuffer.Dispose();
                                    somevoxelvirtualdesktop[i].arrayOfChunkData[j].someoculusdirbuffer = null;
                                }




                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].originalArrayOfIndices = null;

                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].SC_instancedChunk_Instances = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].SC_instancedChunk_InstancesFORWARD = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].SC_instancedChunk_InstancesRIGHT = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].SC_instancedChunk_InstancesUP = null;

                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].someovrdir = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].tessellationBuffer = null;
                                somevoxelvirtualdesktop[i].arrayOfChunkData[j].arrayOfVertex = null;



                                somevoxelvirtualdesktop[i].arrayOfChunkData[j] = null;

                            }
                        }


                        for (int j = 0; j < somevoxelvirtualdesktop[i].arrayofindexzeromesh.Length; j++)
                        {
                            if (somevoxelvirtualdesktop[i].arrayofindexzeromesh[j] != null)
                            {
                                somevoxelvirtualdesktop[i].arrayofindexzeromesh[j].ShutDown();
                                somevoxelvirtualdesktop[i].arrayofindexzeromesh[j] = null;
                            }
                        }


                        somevoxelvirtualdesktop[i].shaderOfChunk = null;
                        somevoxelvirtualdesktop[i].ShutDown();

                        //somevoxelvirtualdesktop[i] = null;
                    }
                }
            }
            somevoxelvirtualdesktop = null;
            somevoxelvirtualdesktopglobals = null;
        }






        public void rebuildvirtualdesktopdimensions(int numberOfInstancesPerObjectInWidth, int numberOfInstancesPerObjectInHeight, int numberOfInstancesPerObjectInDepth, float sccsvvdhdvoxelsize)
        {

            somevoxelvirtualdesktopglobals = new SC_GlobalsVoxelInstancing();

            /*
            if (somevoxelvirtualdesktop != null)
            {
                for (int xxx = 0; xxx < somevoxelvirtualdesktopw; xxx++)
                {
                    for (int yyy = 0; yyy < somevoxelvirtualdesktoph; yyy++)
                    {
                        for (int zzz = 0; zzz < somevoxelvirtualdesktopd; zzz++)
                        {
                            int somevoxelindex = xxx + somevoxelvirtualdesktopw * (yyy + somevoxelvirtualdesktoph * zzz);

                            if (somevoxelvirtualdesktop[somevoxelindex] != null)
                            {
                                somevoxelvirtualdesktop[somevoxelindex].ShutDown();

                                somevoxelvirtualdesktop[somevoxelindex] = null;
                            }

                        }
                    }
                }
            }*/



            for (int xx = 0; xx < Program.physicsengineinstancex; xx++)
            {
                for (int yy = 0; yy < Program.physicsengineinstancey; yy++)
                {
                    for (int zz = 0; zz < Program.physicsengineinstancez; zz++)
                    {
                        var indexer00 = xx + Program.physicsengineinstancex * (yy + Program.physicsengineinstancey * zz);
                        var physics_engine_offset_pos = new Vector3(xx * 2, yy * 2, zz * 2);


                        worldMatrix_instances_screens[indexer00] = new Matrix[Program.worldwidth * Program.worldheight * Program.worlddepth][];
                        worldMatrixinstancesvoxelcube[indexer00] = new Matrix[Program.worldwidth * Program.worldheight * Program.worlddepth][];
                        _world_cube_list[indexer00] = new SC_cube[Program.worldwidth * Program.worldheight * Program.worlddepth];
                        //worldvoxelcubelists[indexer00] = new sc_voxel[Program.worldwidth * Program.worldheight * Program.worlddepth];
                        worldMatrixinstancesvoxelcube[indexer00] = new Matrix[Program.worldwidth * Program.worldheight * Program.worlddepth][];
                        _array_of_last_frame_cube_pos[indexer00] = new Vector3[Program.worldwidth * Program.worldheight * Program.worlddepth][];
                        _array_of_last_frame_voxel_pos[indexer00] = new Vector3[Program.worldwidth * Program.worldheight * Program.worlddepth][];
                        _world_screen_list[indexer00] = new SC_cube[Program.worldwidth * Program.worldheight * Program.worlddepth];

                        perlinvalue[indexer00] = new float[Program.worldwidth * Program.worldheight * Program.worlddepth][][][];
                        perlinvalueswtc[indexer00] = new int[Program.worldwidth * Program.worldheight * Program.worlddepth][][][];



                        var offsetCubeY = 0;
                        var offsetVoxelY = 0;
                        var offsetCapsuleY = 0;
                        var offsetConeY = 0;
                        var offsetCylinderY = 0;
                        var offsetSphereY = 0;


                        for (int x = 0; x < Program.worldwidth; x++)
                        {
                            for (int y = 0; y < Program.worldheight; y++)
                            {
                                for (int z = 0; z < Program.worlddepth; z++)
                                {
                                    var indexer01 = x + Program.worldwidth * (y + Program.worldheight * z);

                                    var world_pos_offset = new Vector3(x * 2, y * 2, z * 2);

                                    if (Program.usejitterphysics == 1)
                                    {
                                        somedata00 = (object)_sc_jitter_tasks[indexer00][indexer01]._world_data[0];
                                        //World _jitter_worlds = (World)_some_data_00;
                                        thejitterworld1 = (World)somedata00;//= _jitter_worlds[0];

                                    }







                                    RotationInstScreenx = 0;
                                    RotationInstScreeny = 0;
                                    RotationInstScreenz = 0;
                                    //pitcher = oriRotationScreenX0 * 0.0174532925f;
                                    //yawer = oriRotationScreenY0 * 0.0174532925f;
                                    //roller = oriRotationScreenZ0 * 0.0174532925f;
                                    var pitcher0 = (float)(Math.PI * (RotationInstScreenx) / 180.0f);
                                    var yawer0 = (float)(Math.PI * (RotationInstScreeny) / 180.0f);
                                    var roller0 = (float)(Math.PI * (RotationInstScreenz) / 180.0f);
                                    var somematrixroter = SharpDX.Matrix.RotationYawPitchRoll(yawer0, pitcher0, roller0);


                                    //VOXEL VIRTUAL DESKTOP
                                    //VOXEL VIRTUAL DESKTOP
                                    //VOXEL VIRTUAL DESKTOP

                                    somevoxelvirtualdesktopw = 1;
                                    somevoxelvirtualdesktoph = 1;
                                    somevoxelvirtualdesktopd = 1;

                                    //somevoxelvirtualdesktopglobals = new SC_GlobalsVoxelInstancing();

                                    somevoxelvirtualdesktopglobals.planeSize = sccsvvdhdvoxelsize; // * 10
                                    somevoxelvirtualdesktopglobals.tinyChunkWidth = 8; // 4  // 8 // 4  // 8
                                    somevoxelvirtualdesktopglobals.tinyChunkHeight = 8; // 4 // 8 // 4 // 8
                                    somevoxelvirtualdesktopglobals.tinyChunkDepth = 1; // 4 // 8 // 1 // 1 
                                    somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth = numberOfInstancesPerObjectInWidth; //256 // 512 // 128 //480 //120 // 240
                                    somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight = numberOfInstancesPerObjectInHeight; //128 // 256 // 72 //270 //72 // 135
                                    somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth = numberOfInstancesPerObjectInDepth;
                                    somevoxelvirtualdesktopglobals.numberOfObjectInWidth = 1;
                                    somevoxelvirtualdesktopglobals.numberOfObjectInHeight = 1;
                                    somevoxelvirtualdesktopglobals.numberOfObjectInDepth = 1;

                                    somevoxelvirtualdesktop = new SC_instancedChunkPrim[somevoxelvirtualdesktopw * somevoxelvirtualdesktoph * somevoxelvirtualdesktopd];

                                    //TO ADAPT TO THE MAIN SCREENDIVISIONS AND MAIN CHUNK HOLDER DIVISIONS CODE 
                                    perlinvalue[indexer00][indexer01] = new float[somevoxelvirtualdesktopw * somevoxelvirtualdesktoph * somevoxelvirtualdesktopd][][];
                                    perlinvalueswtc[indexer00][indexer01] = new int[somevoxelvirtualdesktopw * somevoxelvirtualdesktoph * somevoxelvirtualdesktopd][][];
                                    //TO ADAPT TO THE MAIN SCREENDIVISIONS AND MAIN CHUNK HOLDER DIVISIONS CODE 

                                    //Vector3 originvirtualdesktoppos = new Vector3(0, 0.5f, 15);
                                    //Vector3 originsomechunksceneposition = new Vector3(0, 0, 0);

                                    var pitch = (float)(Math.PI * (0) / 180.0f); //25 //5 //9
                                    var yaw = (float)(Math.PI * (0) / 180.0f);
                                    var roll = (float)(Math.PI * (0) / 180.0f);

                                    var somematrixrot = SharpDX.Matrix.RotationYawPitchRoll(yaw, pitch, roll);

                                    var somematrixrotfake = SharpDX.Matrix.RotationYawPitchRoll(0, 0, 0);
                                    //somematrixrot = Matrix.Identity;

                                    //Vector3 originvirtualdesktoppos = new Vector3(0, 0.5f, 15);

                                    float posoffsetx = somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * somevoxelvirtualdesktopglobals.tinyChunkWidth * somevoxelvirtualdesktopglobals.planeSize * 0.5f;
                                    float posoffsety = somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * somevoxelvirtualdesktopglobals.tinyChunkHeight * somevoxelvirtualdesktopglobals.planeSize * 0.5f;

                                    Vector3 originvirtualdesktoppos = new Vector3(-posoffsetx, -posoffsety, 0);
                                    //Vector3 originvirtualdesktoppos = new Vector3(0, 0, 0);

                                    originvirtualdesktoppos.X += sccs.scgraphics.scupdate.originPosScreen.X;
                                    originvirtualdesktoppos.Y += sccs.scgraphics.scupdate.originPosScreen.Y;
                                    originvirtualdesktoppos.Z += -sccs.scgraphics.scupdate.originPosScreen.Z;




                                    //Vector3 originvirtualdesktoppos = new Vector3(-0.4f, 0.4f, 0.4f);
                                    //Vector3 originvirtualdesktoppos = new Vector3(1.333333f * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * somevoxelvirtualdesktopglobals.numberOfObjectInWidth * somevoxelvirtualdesktopglobals.tinyChunkWidth * somevoxelvirtualdesktopglobals.planeSize, 0, 5); // somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth * somevoxelvirtualdesktopglobals.numberOfObjectInDepth * somevoxelvirtualdesktopglobals.tinyChunkDepth * somevoxelvirtualdesktopglobals.planeSize * 10
                                    //Vector3 originvirtualdesktoppos = new Vector3(-1 * 1.25f * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * somevoxelvirtualdesktopglobals.numberOfObjectInWidth * somevoxelvirtualdesktopglobals.tinyChunkWidth * somevoxelvirtualdesktopglobals.planeSize, 1, somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth * somevoxelvirtualdesktopglobals.numberOfObjectInDepth * somevoxelvirtualdesktopglobals.tinyChunkDepth * somevoxelvirtualdesktopglobals.planeSize * 10f);

                                    for (int xxx = 0; xxx < somevoxelvirtualdesktopw; xxx++)
                                    {
                                        for (int yyy = 0; yyy < somevoxelvirtualdesktoph; yyy++)
                                        {
                                            for (int zzz = 0; zzz < somevoxelvirtualdesktopd; zzz++)
                                            {
                                                int somevoxelindex = xxx + somevoxelvirtualdesktopw * (yyy + somevoxelvirtualdesktoph * zzz);

                                                //Vector3 somechunkpriminstancepos = new Vector3(xxx, yyy, zzz) * SC_Globals.numberOfInstancesPerObjectInWidth * SC_Globals.numberOfObjectInWidth * SC_Globals.tinyChunkWidth * SC_Globals.planeSize*4;
                                                Vector3 somevoxelposition = new Vector3(xxx, yyy, zzz);

                                                somevoxelposition.X *= somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * somevoxelvirtualdesktopglobals.numberOfObjectInWidth * somevoxelvirtualdesktopglobals.tinyChunkWidth * somevoxelvirtualdesktopglobals.planeSize;
                                                somevoxelposition.Y *= somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * somevoxelvirtualdesktopglobals.numberOfObjectInHeight * somevoxelvirtualdesktopglobals.tinyChunkHeight * somevoxelvirtualdesktopglobals.planeSize;
                                                somevoxelposition.Z *= somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth * somevoxelvirtualdesktopglobals.numberOfObjectInDepth * somevoxelvirtualdesktopglobals.tinyChunkDepth * somevoxelvirtualdesktopglobals.planeSize;

                                                somevoxelposition += originvirtualdesktoppos;


                                                float tempwidth = 0.1f;
                                                float tempheight = 0.1f;

                                                somematrixrot.M41 = somevoxelposition.X;
                                                somematrixrot.M42 = somevoxelposition.Y;
                                                somematrixrot.M43 = somevoxelposition.Z;

                                                /*Vector3 originvirtualdesktopposother = new Vector3(-posoffsetx, -posoffsety, 0);
                                                originvirtualdesktopposother.X += sccs.scgraphics.scupdate.originPosScreen.X;
                                                originvirtualdesktopposother.Y += sccs.scgraphics.scupdate.originPosScreen.Y;
                                                originvirtualdesktopposother.Z += -sccs.scgraphics.scupdate.originPosScreen.Z;

                                                somematrixrot.M41 += originvirtualdesktopposother.X;
                                                somematrixrot.M42 += originvirtualdesktopposother.Y;
                                                somematrixrot.M43 += originvirtualdesktopposother.Z;*/

                                                somematrixrotfake.M41 = somevoxelposition.X;
                                                somematrixrotfake.M42 = somevoxelposition.Y;
                                                somematrixrotfake.M43 = somevoxelposition.Z;


                                                int shaderswtc = 0;
                                                int voxeltype = 0;

                                                /*if (Program._useOculusRift == 1 && somevoxelvirtualdesktopglobals.tinyChunkWidth == 8 && somevoxelvirtualdesktopw == 1)
                                                {
                                                    shaderswtc = 3;
                                                    voxeltype = 0;
                                                }
                                                else if (Program._useOculusRift == 0 && somevoxelvirtualdesktopglobals.tinyChunkWidth == 8 && somevoxelvirtualdesktopw == 1)
                                                {
                                                    shaderswtc = 3;
                                                    voxeltype = 0;
                                                }
                                                else if (Program._useOculusRift == 1 && somevoxelvirtualdesktopglobals.tinyChunkWidth == 4 && somevoxelvirtualdesktopw == 1)
                                                {
                                                    shaderswtc = 3;
                                                    voxeltype = 0;
                                                }
                                                else if (Program._useOculusRift == 0 && somevoxelvirtualdesktopglobals.tinyChunkWidth == 4 && somevoxelvirtualdesktopw == 1)
                                                {
                                                    shaderswtc = 2;
                                                    voxeltype = 0;
                                                }
                                                else if (Program._useOculusRift == 1 && somevoxelvirtualdesktopglobals.tinyChunkWidth == 8 && somevoxelvirtualdesktopw == 2)
                                                {
                                                    shaderswtc = 3;
                                                    voxeltype = 3;
                                                }
                                                else if (Program._useOculusRift == 0 && somevoxelvirtualdesktopglobals.tinyChunkWidth == 8 && somevoxelvirtualdesktopw == 2)
                                                {
                                                    shaderswtc = 3;
                                                    voxeltype = 3;
                                                }
                                                else if (Program._useOculusRift == 1 && somevoxelvirtualdesktopglobals.tinyChunkWidth == 4 && somevoxelvirtualdesktopw == 2)
                                                {
                                                    shaderswtc = 3;
                                                    voxeltype = 3;
                                                }
                                                else if (Program._useOculusRift == 0 && somevoxelvirtualdesktopglobals.tinyChunkWidth == 4 && somevoxelvirtualdesktopw == 2)
                                                {
                                                    shaderswtc = 2;
                                                    voxeltype = 3;
                                                }*/

                                                if (Program._useOculusRift == 1 && somevoxelvirtualdesktopglobals.tinyChunkWidth == 8)
                                                {
                                                    shaderswtc = 3;
                                                    voxeltype = 0;
                                                }
                                                else if (Program._useOculusRift == 0 && somevoxelvirtualdesktopglobals.tinyChunkWidth == 8)
                                                {
                                                    shaderswtc = 3;
                                                    voxeltype = 0;
                                                }
                                                else if (Program._useOculusRift == 1 && somevoxelvirtualdesktopglobals.tinyChunkWidth == 4)
                                                {
                                                    shaderswtc = 3;
                                                    voxeltype = 0;
                                                }
                                                else if (Program._useOculusRift == 0 && somevoxelvirtualdesktopglobals.tinyChunkWidth == 4)
                                                {
                                                    shaderswtc = 2;
                                                    voxeltype = 0;
                                                }
                                                else if (Program._useOculusRift == 1 && somevoxelvirtualdesktopglobals.tinyChunkWidth == 16) //NOT DONE YET
                                                {
                                                    shaderswtc = 3; //5
                                                    voxeltype = 0;
                                                }
                                                else if (Program._useOculusRift == 0 && somevoxelvirtualdesktopglobals.tinyChunkWidth == 16)
                                                {
                                                    shaderswtc = 3; //4
                                                    voxeltype = 0;
                                                }




                                                //benchmarking and instancing chunked virtual desktops.
                                                //benchmarking and instancing chunked virtual desktops.
                                                //benchmarking and instancing chunked virtual desktops.
                                                somevoxelvirtualdesktop[somevoxelindex] = new SC_instancedChunkPrim();
                                                somevoxelvirtualdesktop[somevoxelindex].createChunk(sccs.scgraphics.scdirectx.D3D, tempwidth, tempheight, new Vector3(0, 10, 0), new Vector3(0, -1, 0), somevoxelposition, somevoxelindex, 0, 100, thejitterworld1, false, sccs.scgraphics.scdirectx.BodyTag.physicsinstancedvertexbindingchunk, somevoxelvirtualdesktopw, somevoxelvirtualdesktoph, somevoxelvirtualdesktopd, somevoxelvirtualdesktopglobals.numberOfObjectInWidth, somevoxelvirtualdesktopglobals.numberOfObjectInHeight, somevoxelvirtualdesktopglobals.numberOfObjectInDepth, somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth, somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight, somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth, somevoxelvirtualdesktopglobals.tinyChunkWidth, somevoxelvirtualdesktopglobals.tinyChunkHeight, somevoxelvirtualdesktopglobals.tinyChunkDepth, somevoxelvirtualdesktopglobals.planeSize, shaderswtc, 1.0f, 0, 0, somevoxelindex, voxeltype, somematrixrot, 1, xxx, yyy, zzz);
                                                //benchmarking and instancing chunked virtual desktops.
                                                //benchmarking and instancing chunked virtual desktops.
                                                //benchmarking and instancing chunked virtual desktops.


                                                //SET ROTATION BASED ON SHADER ROTATION; //FAKE ROTATION FOR CPU WORK INTERSECT
                                                somevoxelvirtualdesktop[somevoxelindex].currentWorldMatrix = somematrixrotfake;// somevoxelvirtualdesktop[somevoxelindex].worldmatofobj;
                                                somevoxelvirtualdesktop[somevoxelindex].currentWorldMatrix.M41 = somevoxelvirtualdesktop[somevoxelindex].worldmatofobj.M41;
                                                somevoxelvirtualdesktop[somevoxelindex].currentWorldMatrix.M42 = somevoxelvirtualdesktop[somevoxelindex].worldmatofobj.M42;
                                                somevoxelvirtualdesktop[somevoxelindex].currentWorldMatrix.M43 = somevoxelvirtualdesktop[somevoxelindex].worldmatofobj.M43;




                                                /*
                                                //TO ADAPT TO THE MAIN SCREENDIVISIONS AND MAIN CHUNK HOLDER DIVISIONS CODE 
                                                perlinvalue[indexer00][indexer01][somevoxelindex] = new float[somevoxelvirtualdesktopglobals.numberOfObjectInWidth * somevoxelvirtualdesktopglobals.numberOfObjectInHeight * somevoxelvirtualdesktopglobals.numberOfObjectInDepth][];
                                                perlinvalueswtc[indexer00][indexer01][somevoxelindex] = new int[somevoxelvirtualdesktopglobals.numberOfObjectInWidth * somevoxelvirtualdesktopglobals.numberOfObjectInHeight * somevoxelvirtualdesktopglobals.numberOfObjectInDepth][];
                                                //TO ADAPT TO THE MAIN SCREENDIVISIONS AND MAIN CHUNK HOLDER DIVISIONS CODE 


                                                for (int svvdix = 0; svvdix < somevoxelvirtualdesktopglobals.numberOfObjectInWidth; svvdix++)
                                                {
                                                    for (int svvdiy = 0; svvdiy < somevoxelvirtualdesktopglobals.numberOfObjectInHeight; svvdiy++)
                                                    {
                                                        for (int svvdiz = 0; svvdiz < somevoxelvirtualdesktopglobals.numberOfObjectInDepth; svvdiz++)
                                                        {
                                                            var index1 = svvdix + somevoxelvirtualdesktopglobals.numberOfObjectInWidth * (svvdiy + somevoxelvirtualdesktopglobals.numberOfObjectInHeight * svvdiz);


                                                            //TO ADAPT TO THE MAIN SCREENDIVISIONS AND MAIN CHUNK HOLDER DIVISIONS CODE 
                                                            perlinvalue[indexer00][indexer01][somevoxelindex][index1] = new float[somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth];
                                                            perlinvalueswtc[indexer00][indexer01][somevoxelindex][index1] = new int[somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth];
                                                            //TO ADAPT TO THE MAIN SCREENDIVISIONS AND MAIN CHUNK HOLDER DIVISIONS CODE 


                                                            for (int tvvdix = 0; tvvdix < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth; tvvdix++)
                                                            {
                                                                for (int tvvdiy = 0; tvvdiy < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight; tvvdiy++)
                                                                {
                                                                    for (int tvvdiz = 0; tvvdiz < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth; tvvdiz++)
                                                                    {
                                                                        var index2 = tvvdix + somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * (tvvdiy + somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * tvvdiz);

                                                                        //TO ADAPT TO THE MAIN SCREENDIVISIONS AND MAIN CHUNK HOLDER DIVISIONS CODE 
                                                                        //perlinvalue[indexer00][indexer01][index0][index1][index2] = new float[somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth][][];
                                                                        //perlinvalueswtc[indexer00][indexer01][index0][index1] = new int[somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth][][];
                                                                        //TO ADAPT TO THE MAIN SCREENDIVISIONS AND MAIN CHUNK HOLDER DIVISIONS CODE 


                                                                        perlinvalue[indexer00][indexer01][somevoxelindex][index1][index2] = 0;// [somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth];
                                                                        perlinvalueswtc[indexer00][indexer01][somevoxelindex][index1][index2] = 0;// new int[somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth];

                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }*/






                                                /*
                                                //originvirtualdesktoppos = new Vector3(-posoffsetx, -posoffsety, 0);
                                                somevoxelvirtualdesktop[somevoxelindex].currentWorldMatrix.M41 = somevoxelposition.X + posoffsetx; // somevoxelvirtualdesktop[somevoxelindex].worldmatofobj.M41;
                                                somevoxelvirtualdesktop[somevoxelindex].currentWorldMatrix.M42 = somevoxelposition.Y + posoffsety; // somevoxelvirtualdesktop[somevoxelindex].worldmatofobj.M42;
                                                somevoxelvirtualdesktop[somevoxelindex].currentWorldMatrix.M43 = somevoxelposition.Z ; // somevoxelvirtualdesktop[somevoxelindex].worldmatofobj.M43;
                                                */
                                                /*
                                                somevoxelvirtualdesktop[somevoxelindex].currentWorldMatrix.M41 = somevoxelvirtualdesktop[somevoxelindex].worldmatofobj.M41;
                                                somevoxelvirtualdesktop[somevoxelindex].currentWorldMatrix.M42 = somevoxelvirtualdesktop[somevoxelindex].worldmatofobj.M42;
                                                somevoxelvirtualdesktop[somevoxelindex].currentWorldMatrix.M43 = somevoxelvirtualdesktop[somevoxelindex].worldmatofobj.M43;
                                                */
                                                Matrix someinitmat = somevoxelvirtualdesktop[somevoxelindex].worldmatofobj;
                                                Quaternion somedirquat;
                                                Quaternion.RotationMatrix(ref someinitmat, out somedirquat);

                                                var dirInstanceRight = sc_maths._newgetdirleft(somedirquat);
                                                var dirInstanceUp = sc_maths._newgetdirup(somedirquat);
                                                var dirInstanceForward = sc_maths._newgetdirforward(somedirquat);

                                                //position = position - (new Vector4(dirInstanceRight.X, dirInstanceRight.Y, dirInstanceRight.Z, 1.0f) * (tinyChunkWidth * planeSize * 0.5f));
                                                //position = position - (new Vector4(dirInstanceUp.X, dirInstanceUp.Y, dirInstanceUp.Z, 1.0f) * (tinyChunkWidth * planeSize * 0.5f));
                                                //position = position + (new Vector4(dirInstanceForward.X, dirInstanceForward.Y, dirInstanceForward.Z, 1.0f) * (tinyChunkWidth * planeSize * 0.5f));

                                                Vector4 somevecx = new Vector4(dirInstanceRight.X, dirInstanceRight.Y, dirInstanceRight.Z, 1.0f);
                                                Vector4 somevecy = new Vector4(dirInstanceUp.X, dirInstanceUp.Y, dirInstanceUp.Z, 1.0f);
                                                Vector4 somevecz = new Vector4(dirInstanceForward.X, dirInstanceForward.Y, dirInstanceForward.Z, 1.0f);

                                                Vector4 somemainpos = new Vector4(someinitmat.M41, someinitmat.M42, someinitmat.M43, 1.0f);
                                                Vector4 someinstancepostest = somemainpos;// Vector4.Zero;

                                                //WARNING - USING THE SAME LOOP AS THE CHUNK CREATION IS DANGEROUS SINCE THIS MAIN LOOP X/Y/Z IS FOR THE ENTIRE POSITION SETUP AND NOT THE TINYCHUNKWIDTH/BYTECHUNKWIDTH SO IF ADDING ANYTHING OTHER THAN +1 ON THIS LOOP ITERATOR, IT WILL BREAK PROBABLY. SO JUST DON'T CHANGE THE MAIN LOOP AND IT SHOULD BE FINE, INSTEAD IF YOU WANT TO CHANGE THE POSITION, DO IT SO FROM THE VECTOR somechunkmeshpos. STEVE CHASSÉ AKA NINEKORN AKA NINE AKA 9 - 2021-AUGUST-18 NOTES
                                                //WARNING - USING THE SAME LOOP AS THE CHUNK CREATION IS DANGEROUS SINCE THIS MAIN LOOP X/Y/Z IS FOR THE ENTIRE POSITION SETUP AND NOT THE TINYCHUNKWIDTH/BYTECHUNKWIDTH SO IF ADDING ANYTHING OTHER THAN +1 ON THIS LOOP ITERATOR, IT WILL BREAK PROBABLY. SO JUST DON'T CHANGE THE MAIN LOOP AND IT SHOULD BE FINE, INSTEAD IF YOU WANT TO CHANGE THE POSITION, DO IT SO FROM THE VECTOR somechunkmeshpos. STEVE CHASSÉ AKA NINEKORN AKA NINE AKA 9 - 2021-AUGUST-18 NOTES
                                                //WARNING - USING THE SAME LOOP AS THE CHUNK CREATION IS DANGEROUS SINCE THIS MAIN LOOP X/Y/Z IS FOR THE ENTIRE POSITION SETUP AND NOT THE TINYCHUNKWIDTH/BYTECHUNKWIDTH SO IF ADDING ANYTHING OTHER THAN +1 ON THIS LOOP ITERATOR, IT WILL BREAK PROBABLY. SO JUST DON'T CHANGE THE MAIN LOOP AND IT SHOULD BE FINE, INSTEAD IF YOU WANT TO CHANGE THE POSITION, DO IT SO FROM THE VECTOR somechunkmeshpos. STEVE CHASSÉ AKA NINEKORN AKA NINE AKA 9 - 2021-AUGUST-18 NOTES
                                                someinstancepostest = someinstancepostest + (somevecx * (x * somevoxelvirtualdesktopglobals.tinyChunkWidth * somevoxelvirtualdesktopglobals.planeSize));
                                                someinstancepostest = someinstancepostest + (somevecy * (y * somevoxelvirtualdesktopglobals.tinyChunkWidth * somevoxelvirtualdesktopglobals.planeSize));
                                                someinstancepostest = someinstancepostest + (somevecz * (z * somevoxelvirtualdesktopglobals.tinyChunkWidth * somevoxelvirtualdesktopglobals.planeSize));
                                                //WARNING - USING THE SAME LOOP AS THE CHUNK CREATION IS DANGEROUS SINCE THIS MAIN LOOP X/Y/Z IS FOR THE ENTIRE POSITION SETUP AND NOT THE TINYCHUNKWIDTH/BYTECHUNKWIDTH SO IF ADDING ANYTHING OTHER THAN +1 ON THIS LOOP ITERATOR, IT WILL BREAK PROBABLY. SO JUST DON'T CHANGE THE MAIN LOOP AND IT SHOULD BE FINE, INSTEAD IF YOU WANT TO CHANGE THE POSITION, DO IT SO FROM THE VECTOR somechunkmeshpos. STEVE CHASSÉ AKA NINEKORN AKA NINE AKA 9 - 2021-AUGUST-18 NOTES
                                                //WARNING - USING THE SAME LOOP AS THE CHUNK CREATION IS DANGEROUS SINCE THIS MAIN LOOP X/Y/Z IS FOR THE ENTIRE POSITION SETUP AND NOT THE TINYCHUNKWIDTH/BYTECHUNKWIDTH SO IF ADDING ANYTHING OTHER THAN +1 ON THIS LOOP ITERATOR, IT WILL BREAK PROBABLY. SO JUST DON'T CHANGE THE MAIN LOOP AND IT SHOULD BE FINE, INSTEAD IF YOU WANT TO CHANGE THE POSITION, DO IT SO FROM THE VECTOR somechunkmeshpos. STEVE CHASSÉ AKA NINEKORN AKA NINE AKA 9 - 2021-AUGUST-18 NOTES
                                                //WARNING - USING THE SAME LOOP AS THE CHUNK CREATION IS DANGEROUS SINCE THIS MAIN LOOP X/Y/Z IS FOR THE ENTIRE POSITION SETUP AND NOT THE TINYCHUNKWIDTH/BYTECHUNKWIDTH SO IF ADDING ANYTHING OTHER THAN +1 ON THIS LOOP ITERATOR, IT WILL BREAK PROBABLY. SO JUST DON'T CHANGE THE MAIN LOOP AND IT SHOULD BE FINE, INSTEAD IF YOU WANT TO CHANGE THE POSITION, DO IT SO FROM THE VECTOR somechunkmeshpos. STEVE CHASSÉ AKA NINEKORN AKA NINE AKA 9 - 2021-AUGUST-18 NOTES

                                                someinitmat.M41 = someinstancepostest.X;
                                                someinitmat.M42 = someinstancepostest.Y;
                                                someinitmat.M43 = someinstancepostest.Z;

                                                somevoxelvirtualdesktop[somevoxelindex].worldmatofobj = someinitmat;



                                                somevoxelvirtualdesktop[somevoxelindex].lightBufferInstChunk[0] = new SC_instancedChunkPrim.DLightBufferEr()
                                                {
                                                    ambientColor = ambientColor,
                                                    diffuseColor = diffuseColour,
                                                    lightDirection = Vector4.Zero,
                                                    //padding0 = 0,
                                                    lightPosition = Vector4.Zero// lightpos,
                                                    //padding1 = 100
                                                };

                                                somevoxelvirtualdesktop[somevoxelindex].arrayOfMatrixBuff[0] = new SC_instancedChunkPrim.DMatrixBuffer()
                                                {
                                                    world = Matrix.Identity,
                                                    view = Matrix.Identity,
                                                    proj = Matrix.Identity,
                                                };


                                                //somevoxelvirtualdesktop[somevoxelindex].somechunk = null;
                                                //somevoxelvirtualdesktop[somevoxelindex].sccstrigvertbuilder = null;
                                            }
                                        }
                                    }
                                    //VOXEL VIRTUAL DESKTOP
                                    //VOXEL VIRTUAL DESKTOP
                                    //VOXEL VIRTUAL DESKTOP








                                    /*

                                    try
                                    {



                                        //_human_inst_rig_x = 10;
                                        //_human_inst_rig_y = 1;
                                        //_human_inst_rig_z = 10;

                                        ikvoxelbody = new sccsikvoxellimbs[(somechunkpriminstancesikvoxelbodywidthR)];

                                        Vector3 originpositionikvoxelbody = new Vector3(0, 0, 0); //around 0.165f to 0.17f

                                        int grabtargetitem = 1;

                                        Matrix worldmatofobj = Matrix.Identity;
                                        //worldmatofobj.M41 = originpositionikvoxelbody.X;
                                        //worldmatofobj.M42 = originpositionikvoxelbody.Y;
                                        //worldmatofobj.M43 = originpositionikvoxelbody.Z;

                                        //float pelvisvaluey = -0.625f;
                                        //int realtorsowidth = 4;
                                        float ikvoxelrigbodysize = 0.1f;

                                        Vector3 somechunkpriminstanceikvoxelbodypos = Vector3.Zero;

                                        for (int xxx = 0; xxx < somechunkpriminstancesikvoxelbodywidthR; xxx++)
                                        {

                                            float posX = (xxx);
                                            float posY = (0);
                                            float posZ = (0);

                                            var xxi = xxx;
                                            var yyi = 0;
                                            var zzi = 0;

                                            if (xxi < 0)
                                            {
                                                xxi *= -1;
                                                xxi = (somechunkpriminstancesikvoxelbodywidthR) + xxi;
                                            }
                                            if (yyi < 0)
                                            {
                                                yyi *= -1;
                                                yyi = (somechunkpriminstancesikvoxelbodyheightR) + yyi;
                                            }
                                            if (zzi < 0)
                                            {
                                                zzi *= -1;
                                                zzi = (somechunkpriminstancesikvoxelbodydepthR) + zzi;
                                            }

                                            int somechunkpriminstanceikvoxelbodyindex = xxi;

                                            somechunkpriminstanceikvoxelbodypos = ((new Vector3(posX, posY, posZ)) + originpositionikvoxelbody);

                                            ikvoxelbody[somechunkpriminstanceikvoxelbodyindex] = new sccsikvoxellimbs();
                                            _sc_jitter_tasks = ikvoxelbody[somechunkpriminstanceikvoxelbodyindex].createikbody(_sc_jitter_tasks, tempMultiInstancePhysicsTotal, somechunkpriminstanceikvoxelbodypos, null, worldmatofobj, _human_inst_rig_x, _human_inst_rig_y, _human_inst_rig_z, grabtargetitem);


                                        }






                                        grabtargetitem = 0;
                                        ikarmvoxel = new sccsikvoxellimbs[(somechunkpriminstancesikarmvoxelwidthR) + (somechunkpriminstancesikarmvoxelheightR)];

                                        Vector3 originpositionikarmvoxel = new Vector3(0, 0, 0);

                                        //float pelvisvaluey = -0.625f;
                                        //int realtorsowidth = 4;
                                        //float ikvoxelrigsize = 0.1f;

                                        Vector3 somechunkpriminstanceikarmvoxelpos = Vector3.Zero;

                                        for (int xxx = 0; xxx < somechunkpriminstancesikarmvoxelwidthR; xxx++)
                                        {
                                            for (int yyy = 0; yyy < somechunkpriminstancesikarmvoxelheightR; yyy++)
                                            {


                                                float posX = (xxx);
                                                float posY = (yyy);
                                                float posZ = (0);

                                                var xxi = xxx;
                                                var yyi = yyy;
                                                var zzi = 0;

                                                if (xxi < 0)
                                                {
                                                    xxi *= -1;
                                                    xxi = (somechunkpriminstancesikarmvoxelwidthR) + xxi;
                                                }
                                                if (yyi < 0)
                                                {
                                                    yyi *= -1;
                                                    yyi = (somechunkpriminstancesikarmvoxelheightR) + yyi;
                                                }
                                                if (zzi < 0)
                                                {
                                                    zzi *= -1;
                                                    zzi = (somechunkpriminstancesikarmvoxeldepthR) + zzi;
                                                }

                                                int somechunkpriminstanceikarmvoxelindex = xxi + (yyi * (somechunkpriminstancesikarmvoxelheightR));

                                                somechunkpriminstanceikarmvoxelpos = ((new Vector3(posX, posY, posZ)) + originpositionikarmvoxel);


                                                if (somechunkpriminstanceikarmvoxelindex == 0) // bottom left
                                                {

                                                    somechunkpriminstanceikarmvoxelpos.X = 0;
                                                    somechunkpriminstanceikarmvoxelpos.Y = 0;

                                                }
                                                else if (somechunkpriminstanceikarmvoxelindex == 1) // top right
                                                {

                                                    somechunkpriminstanceikarmvoxelpos.X = 0;
                                                    somechunkpriminstanceikarmvoxelpos.Y = 0;

                                                }
                                                else if (somechunkpriminstanceikarmvoxelindex == 2)
                                                {
                                                    somechunkpriminstanceikarmvoxelpos.X = 0;
                                                    somechunkpriminstanceikarmvoxelpos.Y = 0;
                                                }
                                                else if (somechunkpriminstanceikarmvoxelindex == 3)
                                                {
                                                    somechunkpriminstanceikarmvoxelpos.X = 0;
                                                    somechunkpriminstanceikarmvoxelpos.Y = 0;
                                                }

                                                //somechunkpriminstanceikarmvoxelpos = ((new Vector3(posX, posY, posZ)) + originpositionikarmvoxel);

                                                ikarmvoxel[somechunkpriminstanceikarmvoxelindex] = new sccsikvoxellimbs();
                                                _sc_jitter_tasks = ikarmvoxel[somechunkpriminstanceikarmvoxelindex].createikarm(_sc_jitter_tasks, tempMultiInstancePhysicsTotal, somechunkpriminstanceikarmvoxelpos, ikvoxelbody[0], somechunkpriminstanceikarmvoxelindex, _human_inst_rig_x, _human_inst_rig_y, _human_inst_rig_z, grabtargetitem);

                                                for (int zzz = -somechunkpriminstancesikarmvoxeldepthL; zzz <= somechunkpriminstancesikarmvoxeldepthR; zzz++)
                                                {

                                                }
                                            }
                                        }


                                    }
                                    catch (Exception ex)
                                    {
                                        Program.MessageBox((IntPtr)0, "create" + ex.ToString(), "scmsg", 0);

                                    }



                                    _inst_voxel_cube_x = 10;
                                    _inst_voxel_cube_y = 1;
                                    _inst_voxel_cube_z = 1;

                                    offsetVoxelY = 40;
                                    //VOXELS
                                    r = 0.95f; //0.75f
                                    g = 0.35f; //0.75f
                                    b = 0.35f; //0.75f
                                    a = 1;
                                    _object_worldmatrix = Matrix.Identity;
                                    offsetPosX = _voxel_cube_size_x * (1.15f); //x between each world instance
                                    offsetPosY = _voxel_cube_size_y * (1.15f); //y between each world instance
                                    offsetPosZ = _voxel_cube_size_z * (1.15f); //z between each world instance
                                                                               //_offsetPos = new Vector3(0, 0, 0);
                                    _object_worldmatrix = sccs.scgraphics.scdirectx.WorldMatrix;
                                    _object_worldmatrix.M41 = 0 + x + physics_engine_offset_pos.X + world_pos_offset.X;
                                    _object_worldmatrix.M42 = 3 + y + physics_engine_offset_pos.Y + world_pos_offset.Y + offsetVoxelY;
                                    _object_worldmatrix.M43 = 0 + z + physics_engine_offset_pos.Z + world_pos_offset.Z;
                                    _object_worldmatrix.M44 = 1;
                                    var sc_voxel_spheroid = new sc_voxel();
                                    voxel_general_size = somevoxelvirtualdesktopglobals.planeSize * 0.005f; //0.0015f //0.00075f
                                    voxel_type = 1;
                                    bool is_static = false;
                                    _voxel_mass = 100;

                                    var _hasinit00 = sc_voxel_spheroid.Initialize(sccs.scgraphics.scdirectx.D3D, sccs.scgraphics.scdirectx.D3D.SurfaceWidth, sccs.scgraphics.scdirectx.D3D.SurfaceHeight, 0, 1, 1, 1,
                                        _voxel_cube_size_x, _voxel_cube_size_y, _voxel_cube_size_z, new Vector4(r, g, b, a), _inst_voxel_cube_x, _inst_voxel_cube_y, _inst_voxel_cube_z, Program.consoleHandle,
                                        _object_worldmatrix, 2, offsetPosX, offsetPosY, offsetPosZ, thejitterworld1, _voxel_mass, is_static, sccs.scgraphics.scdirectx.BodyTag.sc_perko_voxel,
                                        9, 9, 9, 9, 9, 9, 9, 9, 9, 60, 60, 60, 60, 60, 60,
                                        //9, 9, 9, 9, 9, 9, 9, 9, 9, 35, 34, 40, 59, 23, 22,
                                        voxel_general_size, Vector3.Zero, 7, 0, 0, 0, 2, voxel_type); //, "terrainGrassDirt.bmp" //0.00035f
                                                                                                      //9, 9, 9, 9, 9, 9, 20, 19, 20, 19, 20, 19
                                                                                                      //9, 9, 9, 9, 9, 9, 35, 34, 40, 59, 20, 19, 
                                                                                                      //FOR CUBES AND SET TO voxel_type = 1                  
                                                                                                      //var _hasinit00 = sc_voxel_spheroid.Initialize(sccs.scgraphics.scdirectx.D3D, sccs.scgraphics.scdirectx.D3D.SurfaceWidth, sccs.scgraphics.scdirectx.D3D.SurfaceHeight, 1, 1, 1, _voxel_cube_size_x, _voxel_cube_size_y, _voxel_cube_size_z, new Vector4(r, g, b, a), _inst_voxel_cube_x, _inst_voxel_cube_y, _inst_voxel_cube_z, Hwnd, _object_worldmatrix, 2, offsetPosX, offsetPosY, offsetPosZ, World, _voxel_mass, is_static, SCCoreSystems.sc_console.sccs.scgraphics.scdirectx.BodyTag._voxel_spheroid, 2, 2, 2, 2, 2, 2, 20, 19, 20, 19, 20, 19, voxel_general_size, Vector3.Zero, 250, 0, 0, 0, 2, voxel_type); //, "terrainGrassDirt.bmp" //0.00035f                                  
                                                                                                      //FOR CUBES AND SET TO voxel_type = 1

                                    _array_of_last_frame_voxel_pos[indexer00][indexer01] = new Vector3[_inst_voxel_cube_x * _inst_voxel_cube_y * _inst_voxel_cube_z];

                                    worldvoxelcubelists[indexer00][indexer01] = sc_voxel_spheroid;
                                    worldMatrixinstancesvoxelcube[indexer00][indexer01] = new Matrix[_inst_voxel_cube_x * _inst_voxel_cube_y * _inst_voxel_cube_z];
                                    for (int i = 0; i < worldMatrixinstancesvoxelcube[indexer00][indexer01].Length; i++)
                                    {
                                        _array_of_last_frame_voxel_pos[indexer00][indexer01][i] = Vector3.Zero;
                                        worldMatrixinstancesvoxelcube[indexer00][indexer01][i] = Matrix.Identity;
                                    }
                                    */


                                }
                            }
                        }
                    }
                }
            }

            hasinitsccsvvdhd = 1;
        }















        public void buildtherestofassets()
        {



            if (Program.usejitterphysics == 1 && Program.usejitterphysicsbuo == 1)
            {
                _buoyancy_area = new Jitter.Forces.Buoyancy[1];
            }

            //lightpos = new Vector3(0, 100, 0);
            //ambientColor = new Vector4(0.45f, 0.45f, 0.45f, 1.0f);
            ambientColor = new Vector4(0.45f, 0.45f, 0.45f, 1.0f);
            diffuseColour = new Vector4(1, 1, 1, 1);
            lightDirection = new Vector3(0, -1, -1);


          

            //VOXEL INSTANCED OBJECTS
            ambientColor = new Vector4(0.45f, 0.45f, 0.45f, 1.0f);
            diffuseColour = new Vector4(1, 1, 1, 1);
            lightDirection = new Vector3(0, -1, -1);
            lightpos = new Vector3(0, 5, 0);
            dirLight = new Vector3(0, -1, 0);


            _DLightBuffer_voxel_cube[0] = new sc_voxel.DLightBuffer()
            {
                ambientColor = ambientColor,
                diffuseColor = diffuseColour,
                lightDirection = dirLight,
                padding0 = 0,
                lightPosition = lightpos,
                padding1 = 100
            };

            _DLightBuffer_cube[0] = new SC_cube.DLightBuffer()
            {
                ambientColor = ambientColor,
                diffuseColor = diffuseColour,
                lightDirection = dirLight,
                padding0 = 0,
                lightPosition = lightpos,
                padding1 = 100
            };







            var physics_engine_offset_pos = Vector3.Zero;
            var world_pos_offset = Vector3.Zero;

            //_inst_voxel_cube_x = 10;
            //_inst_voxel_cube_y = 10;
            //_inst_voxel_cube_z = 10;

            var offsetVoxelY = 0; // 40
                                  //VOXELS
            r = 0.35f; //0.75f
            g = 0.35f; //0.75f
            b = 0.35f; //0.75f
            a = 1;
            var _object_worldmatrix = Matrix.Identity;
            var offsetPosX = _voxel_cube_size_x * (1.15f); //x between each world instance
            var offsetPosY = _voxel_cube_size_y * (1.15f); //y between each world instance
            var offsetPosZ = _voxel_cube_size_z * (1.15f); //z between each world instance
                                                           //_offsetPos = new Vector3(0, 0, 0);
                                                           //_object_worldmatrix = _object_worldmatrix;
            _object_worldmatrix.M41 = 0 + 0 + physics_engine_offset_pos.X + world_pos_offset.X;
            _object_worldmatrix.M42 = 3 + 0 + physics_engine_offset_pos.Y + world_pos_offset.Y + offsetVoxelY;
            _object_worldmatrix.M43 = 0 + 0 + physics_engine_offset_pos.Z + world_pos_offset.Z;
            _object_worldmatrix.M44 = 1;
            var sc_voxel_spheroid = new sc_voxel();
            voxel_general_size = 0.00005f; //0.0015f //0.00075f // somevoxelvirtualdesktopglobals.planeSize //0.00005f
            voxel_type = 1;
            var is_static = false;
            _voxel_mass = 100;
            var _hasinit00 = sc_voxel_spheroid.Initialize(scdirectx.D3D, scdirectx.D3D.SurfaceWidth, scdirectx.D3D.SurfaceHeight, 0, 1, 1, 1,
            _voxel_cube_size_x, _voxel_cube_size_y, _voxel_cube_size_z, new Vector4(r, g, b, a), _inst_voxel_cube_x, _inst_voxel_cube_y, _inst_voxel_cube_z, sccsvvdhd.Form1.theHandle,
                _object_worldmatrix, 2, offsetPosX, offsetPosY, offsetPosZ, null, _voxel_mass, is_static, scdirectx.BodyTag.sc_perko_voxel,
                9, 9, 9, 9, 9, 9, 9, 9, 9, 60, 60, 60, 60, 60, 60,
                //9, 9, 9, 9, 9, 9, 9, 9, 9, 35, 34, 40, 59, 23, 22,
                voxel_general_size, Vector3.Zero, 7, 0, 0, 0, 2, voxel_type); //, "terrainGrassDirt.bmp" //0.00035f
                                                                              //9, 9, 9, 9, 9, 9, 20, 19, 20, 19, 20, 19
                                                                              //9, 9, 9, 9, 9, 9, 35, 34, 40, 59, 20, 19, 
                                                                              //FOR CUBES AND SET TO voxel_type = 1                  
                                                                              //var _hasinit00 = sc_voxel_spheroid.Initialize(SC_console_directx.D3D, SC_console_directx.D3D.SurfaceWidth, SC_console_directx.D3D.SurfaceHeight, 1, 1, 1, _voxel_cube_size_x, _voxel_cube_size_y, _voxel_cube_size_z, new Vector4(r, g, b, a), _inst_voxel_cube_x, _inst_voxel_cube_y, _inst_voxel_cube_z, Hwnd, _object_worldmatrix, 2, offsetPosX, offsetPosY, offsetPosZ, World, _voxel_mass, is_static, SCCoreSystems.sc_console.SC_console_directx.BodyTag._voxel_spheroid, 2, 2, 2, 2, 2, 2, 20, 19, 20, 19, 20, 19, voxel_general_size, Vector3.Zero, 250, 0, 0, 0, 2, voxel_type); //, "terrainGrassDirt.bmp" //0.00035f                                  
                                                                              //FOR CUBES AND SET TO voxel_type = 1

            //_array_of_last_frame_voxel_pos[indexer00][indexer01] = new Vector3[_inst_voxel_cube_x * _inst_voxel_cube_y * _inst_voxel_cube_z];
            _world_voxel_cube_lists = new sc_voxel[Program.physicsengineinstancex * Program.physicsengineinstancey * Program.physicsengineinstancez][];

            _world_voxel_cube_lists[0] = new sc_voxel[Program.worldwidth * Program.worldheight * Program.worlddepth];

            _world_voxel_cube_lists[0][0] = sc_voxel_spheroid;

            worldMatrix_instances_voxel_cube = new Matrix[Program.physicsengineinstancex * Program.physicsengineinstancey * Program.physicsengineinstancez][][];
            worldMatrix_instances_voxel_cube[0] = new Matrix[Program.worldwidth * Program.worldheight * Program.worlddepth][];
            worldMatrix_instances_voxel_cube[0][0] = new Matrix[_inst_voxel_cube_x * _inst_voxel_cube_y * _inst_voxel_cube_z];


            worldmatrixinstancesvoxelsforcalculationsonly = new Matrix[Program.physicsengineinstancex * Program.physicsengineinstancey * Program.physicsengineinstancez][][];
            worldmatrixinstancesvoxelsforcalculationsonly[0] = new Matrix[Program.worldwidth * Program.worldheight * Program.worlddepth][];
            worldmatrixinstancesvoxelsforcalculationsonly[0][0] = new Matrix[_inst_voxel_cube_x * _inst_voxel_cube_y * _inst_voxel_cube_z];

            /*for (int i = 0; i < worldMatrix_instances_voxel_cube[0][0].Length; i++)
            {
                //_array_of_last_frame_voxel_pos[indexer00][indexer01][i] = Vector3.Zero;
                worldMatrix_instances_voxel_cube[0][0][i] = Matrix.Identity;
                worldMatrix_instances_voxel_cube[0][0][i].M41 = i * 0.01f;
            }*/


            for (int x = 0; x < _inst_voxel_cube_x; x++)
            {
                for (int y = 0; y < _inst_voxel_cube_y; y++)
                {
                    for (int z = 0; z < _inst_voxel_cube_z; z++)
                    {
                        var currentByte = (((x * _inst_voxel_cube_x) + (y)) * _inst_voxel_cube_y) + z;

                        worldMatrix_instances_voxel_cube[0][0][currentByte] = Matrix.Identity;
                        worldMatrix_instances_voxel_cube[0][0][currentByte].M41 = x * 0.01f;
                        worldMatrix_instances_voxel_cube[0][0][currentByte].M42 = y * 0.01f;
                        worldMatrix_instances_voxel_cube[0][0][currentByte].M43 = z * 0.01f;

                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][currentByte] = Matrix.Identity;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][currentByte].M41 = x * 0.01f;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][currentByte].M42 = y * 0.01f;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][currentByte].M43 = z * 0.01f;
                    }
                }
            }


            //VOXEL INSTANCED OBJECTS
            //VOXEL INSTANCED OBJECTS























            /*
            Model = new DModel();

            // Initialize the model object.
            if (!Model.Initialize(sccs.scgraphics.scdirectx.D3D.device, "Cube.txt", "seafloor.bmp"))
            {
                Program.MessageBox((IntPtr)0, "!Model", "scmsg", 0);
                //MessageBox.Show("Could not initialize the model object.");
                //return false;
            }
            LightShader = new DLightShader();


            // Initialize the texture shader object.
            if (!LightShader.Initialize(sccs.scgraphics.scdirectx.D3D.device, sccsvvdhd.Form1.theHandle))
            {
                Program.MessageBox((IntPtr)0, "!LightShader", "scmsg", 0);
                //MessageBox.Show("Could not initialize the texture shader object.");
                //return false;
            }

            // Create the light object.
            Light = new DLight();

            // Iniialize the light object.  Changed to white in Tutorial 7
            // Added Setting of Ambiant Light to 15& brightness and adjust the Light direction along the X-Axis instead of the Z to see the ambient effect easier.
            Light.SetAmbientColor(0.45f, 0.45f, 0.45f, 1.0f);
            Light.SetDiffuseColour(1, 1, 1, 1);
            Light.SetDirection(0, 0, 1);
            Light.SetSpecularColor(1, 1, 1, 1);
            Light.SetSpecularPower(32);*/





            //perceptronRotationXAXIS = new SC_AI_Start();
            //perceptronRotationYAXIS = new SC_AI_Start();
            //perceptronRotationZAXIS = new SC_AI_Start();
            
            dataForPerceptronXAxis = new SC_AI.data_input();
            dataForPerceptronYAXIS = new SC_AI.data_input();
            dataForPerceptronZAXIS = new SC_AI.data_input();
            perceptronRotationXAXIS = new SC_AI_Start(worldmatrixinstancesvoxelsforcalculationsonly[0][0][19], worldmatrixinstancesvoxelsforcalculationsonly[0][0][6]);
            perceptronRotationZAXIS = new SC_AI_Start(worldmatrixinstancesvoxelsforcalculationsonly[0][0][19], worldmatrixinstancesvoxelsforcalculationsonly[0][0][6]);
            perceptronRotationYAXIS = new SC_AI_Start(worldmatrixinstancesvoxelsforcalculationsonly[0][0][19], worldmatrixinstancesvoxelsforcalculationsonly[0][0][6]);

            dataForPerceptronXAxis.CompassTypeSwitch = 2;
            dataForPerceptronYAXIS.CompassTypeSwitch = 1;
            dataForPerceptronZAXIS.CompassTypeSwitch = 2;

            dataForPerceptronXAxis.angleX = 0;
            dataForPerceptronXAxis.angleY = 0;
            dataForPerceptronXAxis.angleZ = 0;
            














            /*
           _size_screen = 0.0005f;
           sizeWidtherer = (float)(((float)sccs.scgraphics.scdirectx.D3D.SurfaceWidth * mulScreen) * _size_screen);
           sizeheighterer = (float)((float)(sccs.scgraphics.scdirectx.D3D.SurfaceHeight * mulScreen) * _size_screen);
           */
            //float sizeWidther = (float)(sizeWidth * 0.5f);
            //float sizeHeighter = (float)(sizeheight * 0.5f);
            //float sizeDepther = (float)(sizedepth * 0.5f);

            /*
            //_screenCorners = new DModelClass4_cube[4];
            rotatingMatrixScreen.M41 = sccs.scgraphics.scupdate.originPosScreen.X;
            rotatingMatrixScreen.M42 = sccs.scgraphics.scupdate.originPosScreen.Y;
            rotatingMatrixScreen.M43 = sccs.scgraphics.scupdate.originPosScreen.Z;
            _screenDirMatrix[0] = new Matrix[1][];
            point3DCollection[0] = new Vector3[1][];
            _screenDirMatrix_correct_pos[0] = new Matrix[1][];
            _screenDirMatrix[0][0] = new Matrix[4];
            point3DCollection[0][0] = new Vector3[4];
            _screenDirMatrix_correct_pos[0][0] = new Matrix[4];
            for (int i = 0; i < _screenDirMatrix[0][0].Length; i++)
            {
                _screenDirMatrix[0][0][i] = new Matrix();
                _screenDirMatrix[0][0][i] = rotatingMatrixScreen;
            }
            _screenDirMatrix[0][0][0].M41 = _world_screen_list[0][0].Vertices[16].position.X;// + originPosScreen.X;
            _screenDirMatrix[0][0][0].M42 = _world_screen_list[0][0].Vertices[16].position.Y;// + originPosScreen.Y;
            _screenDirMatrix[0][0][0].M43 = _world_screen_list[0][0].Vertices[16].position.Z;// + originPosScreen.Z;
            _screenDirMatrix[0][0][1].M41 = _world_screen_list[0][0].Vertices[13].position.X;// + originPosScreen.X;
            _screenDirMatrix[0][0][1].M42 = _world_screen_list[0][0].Vertices[13].position.Y;// + originPosScreen.Y;
            _screenDirMatrix[0][0][1].M43 = _world_screen_list[0][0].Vertices[13].position.Z;// + originPosScreen.Z;
            _screenDirMatrix[0][0][2].M41 = _world_screen_list[0][0].Vertices[15].position.X;// + originPosScreen.X;
            _screenDirMatrix[0][0][2].M42 = _world_screen_list[0][0].Vertices[15].position.Y;// + originPosScreen.Y;
            _screenDirMatrix[0][0][2].M43 = _world_screen_list[0][0].Vertices[15].position.Z;// + originPosScreen.Z;
            _screenDirMatrix[0][0][3].M41 = _world_screen_list[0][0].Vertices[17].position.X;// + originPosScreen.X;
            _screenDirMatrix[0][0][3].M42 = _world_screen_list[0][0].Vertices[17].position.Y;// + originPosScreen.Y;
            _screenDirMatrix[0][0][3].M43 = _world_screen_list[0][0].Vertices[17].position.Z;// + originPosScreen.Z;
                                                                                             //16//13//15//17 
                                                                                             //8//9//10//11
            for (int i = 0; i < _screenDirMatrix[0][0].Length; i++)
            {
                point3DCollection[0][0][i] = new Vector3(_screenDirMatrix[0][0][i].M41, _screenDirMatrix[0][0][i].M42, _screenDirMatrix[0][0][i].M43);
            }*/





            //lightpos = new Vector3(0, 100, 0);
            //ambientColor = new Vector4(0.45f, 0.45f, 0.45f, 1.0f);
            /*ambientColor = new Vector4(0.45f, 0.45f, 0.45f, 1.0f);
            diffuseColour = new Vector4(1, 1, 1, 1);
            lightDirection = new Vector3(0, -1, -1);


            _DLightBuffer_cube[0] = new sccsr15forms.SC_cube.DLightBuffer()
            {
                ambientColor = ambientColor,
                diffuseColor = diffuseColour,
                lightDirection = dirLight,
                padding0 = 0,
                lightPosition = lightpos,
                padding1 = 100
            };*/

            /*
            _DLightBuffer_voxel_cube[0] = new sccs.scgraphics.sc_voxel.DLightBuffer()
            {
                ambientColor = ambientColor,
                diffuseColor = diffuseColour,
                lightDirection = dirLight,
                padding0 = 0,
                lightPosition = lightpos,
                padding1 = 100
            };*/





            /*_screenDirMatrix[0][0][0].M41 = _world_screen_list[0][0].Vertices[16].position.X;// + originPosScreen.X;
            _screenDirMatrix[0][0][0].M42 = _world_screen_list[0][0].Vertices[16].position.Y;// + originPosScreen.Y;
            _screenDirMatrix[0][0][0].M43 = _world_screen_list[0][0].Vertices[16].position.Z;// + originPosScreen.Z;
            _screenDirMatrix[0][0][1].M41 = _world_screen_list[0][0].Vertices[13].position.X;// + originPosScreen.X;
            _screenDirMatrix[0][0][1].M42 = _world_screen_list[0][0].Vertices[13].position.Y;// + originPosScreen.Y;
            _screenDirMatrix[0][0][1].M43 = _world_screen_list[0][0].Vertices[13].position.Z;// + originPosScreen.Z;
            _screenDirMatrix[0][0][2].M41 = _world_screen_list[0][0].Vertices[15].position.X;// + originPosScreen.X;
            _screenDirMatrix[0][0][2].M42 = _world_screen_list[0][0].Vertices[15].position.Y;// + originPosScreen.Y;
            _screenDirMatrix[0][0][2].M43 = _world_screen_list[0][0].Vertices[15].position.Z;// + originPosScreen.Z;
            _screenDirMatrix[0][0][3].M41 = _world_screen_list[0][0].Vertices[17].position.X;// + originPosScreen.X;
            _screenDirMatrix[0][0][3].M42 = _world_screen_list[0][0].Vertices[17].position.Y;// + originPosScreen.Y;
            _screenDirMatrix[0][0][3].M43 = _world_screen_list[0][0].Vertices[17].position.Z;// + originPosScreen.Z;
            */
            //16//13//15//17 
            //8//9//10//11

            /*
            _screenDirMatrix[0][0][0].M41 = positionOfScreen.X - (posoffsetxx);// + originPosScreen.X;
            _screenDirMatrix[0][0][0].M42 = positionOfScreen.Y - (posoffsetyy);// + originPosScreen.Y;
            _screenDirMatrix[0][0][0].M43 = 0;// + originPosScreen.Z;

            _screenDirMatrix[0][0][1].M41 = positionOfScreen.X - (posoffsetxx);// + originPosScreen.X;
            _screenDirMatrix[0][0][1].M42 = positionOfScreen.Y + (posoffsetyy);// + originPosScreen.Y;
            _screenDirMatrix[0][0][1].M43 = 0;// + originPosScreen.Z;

            _screenDirMatrix[0][0][2].M41 = positionOfScreen.X + (posoffsetxx);// + originPosScreen.X;
            _screenDirMatrix[0][0][2].M42 = positionOfScreen.Y - (posoffsetyy);// + originPosScreen.Y;
            _screenDirMatrix[0][0][2].M43 = 0;// + originPosScreen.Z;

            _screenDirMatrix[0][0][3].M41 = positionOfScreen.X + (posoffsetxx);// + originPosScreen.X;
            _screenDirMatrix[0][0][3].M42 = positionOfScreen.Y + (posoffsetyy);// + originPosScreen.Y;
            _screenDirMatrix[0][0][3].M43 = 0;// + originPosScreen.Z;
            */


        }



    
        public scmessageobjectjitter[][] sccswriteikrigtobuffer(scgraphicssecpackage scgraphicssecpackagemessage)
        {


            scmessageobjectjitter[][] _sc_jitter_tasks = scgraphicssecpackagemessage.scjittertasks;
            Matrix viewMatrix = scgraphicssecpackagemessage.viewMatrix;
            Matrix projectionMatrix = scgraphicssecpackagemessage.projectionMatrix; //_projectionMatrix;
            Matrix originRot = scgraphicssecpackagemessage.originRot; // originRot;
            Matrix rotatingMatrix = scgraphicssecpackagemessage.rotatingMatrix; //rotatingMatrix;
            Matrix hmdrotMatrix = scgraphicssecpackagemessage.hmdmatrixRot; //hmdmatrixRot;
            Matrix hmd_matrix = scgraphicssecpackagemessage.hmd_matrix; //hmd_matrix;
            Matrix rotatingMatrixForPelvis = scgraphicssecpackagemessage.rotatingMatrixForPelvis; //rotatingMatrixForPelvis;
            Matrix _rightTouchMatrix = scgraphicssecpackagemessage.rightTouchMatrix; //_rightTouchMatrix;
            Matrix _leftTouchMatrix = scgraphicssecpackagemessage.leftTouchMatrix; //_leftTouchMatrix;
            Matrix oriProjectionMatrix = scgraphicssecpackagemessage.oriProjectionMatrix; //oriProjectionMatrix;
            Matrix extramatrix = scgraphicssecpackagemessage.someextrapelvismatrix; //someextrapelvismatrix;
            Vector3 OFFSETPOS = scgraphicssecpackagemessage.offsetpos; // OFFSETPOS;
            Posef handPoseRight = scgraphicssecpackagemessage.handPoseRight; //handPoseRight;
            Posef handPoseLeft = scgraphicssecpackagemessage.handPoseLeft; //handPoseLeft;


            var viewmatrix0 = scupdate.Camera.ViewMatrix;// Matrix.LookAtLH(new Vector3(0, 0, -viewZ), new Vector3(0, 0, 0), Vector3.UnitY);
            var projectionMatrix0 = Matrix.PerspectiveFovLH((float)Math.PI / 4.0f, scdirectx.D3D.SurfaceWidth / (float)scdirectx.D3D.SurfaceHeight, 0.1f, 1000.0f);
            var viewProj0 = Matrix.Multiply(viewmatrix0, scdirectx.D3D.ProjectionMatrix);





            //TO CHANGE HEIGHTMAPS SIZE
            //TO CHANGE HEIGHTMAPS SIZE
            //var heightmapmatrix = sc_maths.Scaling(heightmapscale) * ikarmvoxel[0].worldMatrix_instances_r_hand_grab[0][0][0];// worldMatrix_instances_r_hand_grab[0][0][0];
            //heightmapmatrix.M41 = sccs.scgraphics.scupdate.OFFSETPOS.X;
            //heightmapmatrix.M42 = sccs.scgraphics.scupdate.OFFSETPOS.Y;
            //heightmapmatrix.M43 = sccs.scgraphics.scupdate.OFFSETPOS.Z;






            if (Program._useOculusRift == 1)
            {

                hmd_matrix_current = Matrix.Identity;
                hmdmatrixcurrentforpelvis = Matrix.Identity;
                //HEADSET POSITION
                displayMidpoint = scdirectx.D3D.OVR.GetPredictedDisplayTime(scdirectx.D3D.sessionPtr, 0);
                trackingState = scdirectx.D3D.OVR.GetTrackingState(scdirectx.D3D.sessionPtr, displayMidpoint, true);
                latencyMark = false;
                trackState = scdirectx.D3D.OVR.GetTrackingState(scdirectx.D3D.sessionPtr, 0.0f, latencyMark);
                poseStatefer = trackState.HeadPose;
                hmdPose = poseStatefer.ThePose;
                hmdRot = hmdPose.Orientation;
                _hmdPoser = new Vector3(hmdPose.Position.X, hmdPose.Position.Y, hmdPose.Position.Z);
                _hmdRoter = new Quaternion(hmdPose.Orientation.X, hmdPose.Orientation.Y, hmdPose.Orientation.Z, hmdPose.Orientation.W);
                //SET CAMERA POSITION
                //Camera.SetPosition(hmdPose.Position.X, hmdPose.Position.Y, hmdPose.Position.Z);
                Quaternion quatter = new Quaternion(hmdRot.X, hmdRot.Y, hmdRot.Z, hmdRot.W);
                oculusRiftDir = sc_maths._getDirection(Vector3.ForwardRH, quatter);

                Matrix.RotationQuaternion(ref quatter, out hmd_matrix_current);

            }

            Matrix finalRotationMatrix = originRot * rotatingMatrix * rotatingMatrixForPelvis * hmdrotMatrix;





            try
            {

          
            for (int xxx = 0; xxx < somechunkpriminstancesikvoxelbodywidthR; xxx++)
            {

                float posX = (xxx);
                float posY = (0);
                float posZ = (0);


                var xxi = xxx;
                var yyi = 0;
                var zzi = 0;

                if (xxi < 0)
                {
                    xxi *= -1;
                    xxi = (somechunkpriminstancesikvoxelbodywidthR) + xxi;
                }
                if (yyi < 0)
                {
                    yyi *= -1;
                    yyi = (somechunkpriminstancesikvoxelbodyheightR) + yyi;
                }
                if (zzi < 0)
                {
                    zzi *= -1;
                    zzi = (somechunkpriminstancesikvoxelbodydepthR) + zzi;
                }

                int somechunkpriminstanceikvoxelbodyindex = xxi;// + (somechunkpriminstancesikvoxelbodywidthL) * (yyi + (somechunkpriminstancesikvoxelbodyheightL) * zzi);

                scgraphicssecpackagemessage.scjittertasks = ikvoxelbody[somechunkpriminstanceikvoxelbodyindex].writeikbodytobuffer(scgraphicssecpackagemessage.scjittertasks, viewmatrix0, projectionMatrix0, OFFSETPOS, originRot, rotatingMatrix, hmdrotMatrix, hmd_matrix, rotatingMatrixForPelvis, _rightTouchMatrix, _leftTouchMatrix, handPoseRight, handPoseLeft, oriProjectionMatrix);



                //
                //for (int yyy = -somechunkpriminstancesikvoxelbodyheightL; yyy <= somechunkpriminstancesikvoxelbodyheightR; yyy++)
                //{
                //    for (int zzz = -somechunkpriminstancesikvoxelbodydepthL; zzz <= somechunkpriminstancesikvoxelbodydepthR; zzz++)
                //    {
                //    }
                //}
            }



                /*

                for (int xxx = 0; xxx < somechunkpriminstancesikvoxelbodywidthR; xxx++)
                {
                    for (int yyy = 0; yyy < somechunkpriminstancesikvoxelbodyheightR; yyy++)
                    {

                        float posX = (xxx);
                        float posY = (yyy);
                        float posZ = (0);


                        var xxi = xxx;
                        var yyi = yyy;
                        var zzi = 0;

                        if (xxi < 0)
                        {
                            xxi *= -1;
                            xxi = (somechunkpriminstancesikvoxelbodywidthR) + xxi;
                        }
                        if (yyi < 0)
                        {
                            yyi *= -1;
                            yyi = (somechunkpriminstancesikvoxelbodyheightR) + yyi;
                        }
                        if (zzi < 0)
                        {
                            zzi *= -1;
                            zzi = (somechunkpriminstancesikvoxelbodydepthR) + zzi;
                        }

                        //int somechunkpriminstanceikarmvoxelindex = xxi + (somechunkpriminstancesikarmvoxelwidthL) * (yyi + (somechunkpriminstancesikarmvoxelheightL) * zzi);
                        int somechunkpriminstanceikvoxelbodyindex = xxi + (yyi * (somechunkpriminstancesikvoxelbodyheightR));



                        scgraphicssecpackagemessage.scjittertasks = ikvoxelbody[somechunkpriminstanceikvoxelbodyindex].writeikbodytobuffer(scgraphicssecpackagemessage.scjittertasks, viewMatrix, projectionMatrix, OFFSETPOS, originRot, rotatingMatrix, hmdrotMatrix, hmd_matrix, rotatingMatrixForPelvis, _rightTouchMatrix, _leftTouchMatrix, handPoseRight, handPoseLeft, oriProjectionMatrix);
                        //scgraphicssecpackagemessage.scjittertasks = ikvoxelbody[somechunkpriminstanceikvoxelbodyindex].setikbodytargetnlimbspositionsNrotations(scgraphicssecpackagemessage.scjittertasks, viewMatrix, projectionMatrix, OFFSETPOS, originRot, rotatingMatrix, hmdrotMatrix, hmd_matrix, ikvoxelbody[somechunkpriminstanceikvoxelbodyindex]._player_pelvis[0][0]._arrayOfInstances[0].current_pos, _rightTouchMatrix, _leftTouchMatrix, handPoseRight, handPoseLeft, oriProjectionMatrix, ikvoxelbody[somechunkpriminstanceikvoxelbodyindex]._player_torso[0][0], lightpos, dirlight, finalRotationMatrix, ikvoxelbody[somechunkpriminstanceikvoxelbodyindex]._player_pelvis[0][0], hmd_matrix_current, extramatrix, hmdmatrixcurrentforpelvis);



                        /*
                        for (int zzz = -somechunkpriminstancesikarmvoxeldepthL; zzz <= somechunkpriminstancesikarmvoxeldepthR; zzz++)
                        {

                        }
                    }
                }*/
















                for (int xxx = 0; xxx < somechunkpriminstancesikarmvoxelwidthR; xxx++)
                {
                    for (int yyy = 0; yyy < somechunkpriminstancesikarmvoxelheightR; yyy++)
                    {

                        float posX = (xxx);
                        float posY = (yyy);
                        float posZ = (0);


                        var xxi = xxx;
                        var yyi = yyy;
                        var zzi = 0;

                        if (xxi < 0)
                        {
                            xxi *= -1;
                            xxi = (somechunkpriminstancesikarmvoxelwidthR) + xxi;
                        }
                        if (yyi < 0)
                        {
                            yyi *= -1;
                            yyi = (somechunkpriminstancesikarmvoxelheightR) + yyi;
                        }
                        if (zzi < 0)
                        {
                            zzi *= -1;
                            zzi = (somechunkpriminstancesikarmvoxeldepthR) + zzi;
                        }

                        //int somechunkpriminstanceikarmvoxelindex = xxi + (somechunkpriminstancesikarmvoxelwidthL) * (yyi + (somechunkpriminstancesikarmvoxelheightL) * zzi);
                        int somechunkpriminstanceikarmvoxelindex = xxi + (yyi * (somechunkpriminstancesikarmvoxelheightR));
                        scgraphicssecpackagemessage.scjittertasks = ikarmvoxel[somechunkpriminstanceikarmvoxelindex].writeikarmtobuffer(scgraphicssecpackagemessage.scjittertasks, viewmatrix0, projectionMatrix0, OFFSETPOS, originRot, rotatingMatrix, hmdrotMatrix, hmd_matrix, rotatingMatrixForPelvis, _rightTouchMatrix, _leftTouchMatrix, handPoseRight, handPoseLeft, oriProjectionMatrix);
                        //scgraphicssecpackagemessage.scjittertasks = ikarmvoxel[somechunkpriminstanceikarmvoxelindex].setiktargetnlimbspositionsNrotations(scgraphicssecpackagemessage.scjittertasks, viewMatrix, projectionMatrix, OFFSETPOS, originRot, rotatingMatrix, hmdrotMatrix, hmd_matrix, ikvoxelbody[0]._player_pelvis[0][0]._arrayOfInstances[0].current_pos, _rightTouchMatrix, _leftTouchMatrix, handPoseRight, handPoseLeft, oriProjectionMatrix, ikvoxelbody[0]._player_torso[0][0], lightpos, dirlight, finalRotationMatrix, ikvoxelbody[0]._player_pelvis[0][0], ikvoxelbody[0], somechunkpriminstanceikarmvoxelindex, rotatingMatrixForPelvis, extramatrix, directionvectoroffsets, Vector3.Zero, Vector3.Zero);



                        for (int xxxx = 0; xxxx < somechunkpriminstancesikfingervoxelwidthR; xxxx++)
                        {
                            for (int yyyy = 0; yyyy < somechunkpriminstancesikfingervoxelheightR; yyyy++)
                            {

                                float posXx = (xxxx);
                                float posYy = (yyyy);
                                float posZz = (0);


                                var xxxi = xxxx;
                                var yyyi = yyyy;
                                var zzzi = 0;

                                if (xxxi < 0)
                                {
                                    xxxi *= -1;
                                    xxxi = (somechunkpriminstancesikfingervoxelwidthR) + xxxi;
                                }
                                if (yyi < 0)
                                {
                                    yyyi *= -1;
                                    yyyi = (somechunkpriminstancesikfingervoxelheightR) + yyyi;
                                }
                                if (zzzi < 0)
                                {
                                    zzzi *= -1;
                                    zzzi = (somechunkpriminstancesikfingervoxeldepthR) + zzzi;
                                }

                                //int somechunkpriminstanceikfingervoxelindex = xxi + (somechunkpriminstancesikfingervoxelwidthL) * (yyi + (somechunkpriminstancesikfingervoxelheightL) * zzi);
                                int somechunkpriminstanceikfingervoxelindex = xxxi + (yyyi * (somechunkpriminstancesikfingervoxelheightR));
                                scgraphicssecpackagemessage.scjittertasks = ikfingervoxel[somechunkpriminstanceikarmvoxelindex][somechunkpriminstanceikfingervoxelindex].writeikfingertobuffer(scgraphicssecpackagemessage.scjittertasks, viewmatrix0, projectionMatrix0, OFFSETPOS, originRot, rotatingMatrix, hmdrotMatrix, hmd_matrix, rotatingMatrixForPelvis, _rightTouchMatrix, _leftTouchMatrix, handPoseRight, handPoseLeft, oriProjectionMatrix);
                                //scgraphicssecpackagemessage.scjittertasks = ikarmvoxel[somechunkpriminstanceikarmvoxelindex].setiktargetnlimbspositionsNrotations(scgraphicssecpackagemessage.scjittertasks, viewMatrix, projectionMatrix, OFFSETPOS, originRot, rotatingMatrix, hmdrotMatrix, hmd_matrix, ikvoxelbody[0]._player_pelvis[0][0]._arrayOfInstances[0].current_pos, _rightTouchMatrix, _leftTouchMatrix, handPoseRight, handPoseLeft, oriProjectionMatrix, ikvoxelbody[0]._player_torso[0][0], lightpos, dirlight, finalRotationMatrix, ikvoxelbody[0]._player_pelvis[0][0], ikvoxelbody[0], somechunkpriminstanceikarmvoxelindex, rotatingMatrixForPelvis, extramatrix, directionvectoroffsets, Vector3.Zero, Vector3.Zero);

                                /*
                                for (int zzz = -somechunkpriminstancesikarmvoxeldepthL; zzz <= somechunkpriminstancesikarmvoxeldepthR; zzz++)
                                {

                                }*/
                            }
                        }
                        /*
                        for (int zzz = -somechunkpriminstancesikarmvoxeldepthL; zzz <= somechunkpriminstancesikarmvoxeldepthR; zzz++)
                        {

                        }*/
                    }
                }
            }
            catch (Exception ex)
            {
                Program.MessageBox((IntPtr)0, "", "sccsmsg", 0);
            }

            return scgraphicssecpackagemessage.scjittertasks;
        }









        public scmessageobjectjitter[][] workonikshaders(scgraphicssecpackage scgraphicssecpackagemessage)
        {
            //Program.MessageBox((IntPtr)0, "workonshaders", "scmsg", 0);

            var _sc_jitter_tasks = scgraphicssecpackagemessage.scjittertasks;
            var viewMatrix = scgraphicssecpackagemessage.viewMatrix;
            var projectionMatrix = scgraphicssecpackagemessage.projectionMatrix; //_projectionMatrix;
            var originRot = scgraphicssecpackagemessage.originRot; // originRot;
            var rotatingMatrix = scgraphicssecpackagemessage.rotatingMatrix; //rotatingMatrix;
            var hmdrotMatrix = scgraphicssecpackagemessage.hmdmatrixRot; //hmdmatrixRot;
            var hmd_matrix = scgraphicssecpackagemessage.hmd_matrix; //hmd_matrix;
            var rotatingMatrixForPelvis = scgraphicssecpackagemessage.rotatingMatrixForPelvis; //rotatingMatrixForPelvis;
            var _rightTouchMatrix = scgraphicssecpackagemessage.rightTouchMatrix; //_rightTouchMatrix;
            var _leftTouchMatrix = scgraphicssecpackagemessage.leftTouchMatrix; //_leftTouchMatrix;
            var oriProjectionMatrix = scgraphicssecpackagemessage.oriProjectionMatrix; //oriProjectionMatrix;
            var extramatrix = scgraphicssecpackagemessage.someextrapelvismatrix; //someextrapelvismatrix;
            var OFFSETPOS = scupdate.OFFSETPOS;// scgraphicssecpackagemessage.offsetpos; // OFFSETPOS;
            var handPoseRight = scgraphicssecpackagemessage.handPoseRight; //handPoseRight;
            var handPoseLeft = scgraphicssecpackagemessage.handPoseLeft; //handPoseLeft;

            var _worldMatrix = scdirectx.D3D.WorldMatrix;
            var _viewMatrix = viewMatrix;
            var _projectionMatrix = oriProjectionMatrix;


            var viewmatrix0 = scupdate.Camera.ViewMatrix;// Matrix.LookAtLH(new Vector3(0, 0, -viewZ), new Vector3(0, 0, 0), Vector3.UnitY);
            var projectionMatrix0 = Matrix.PerspectiveFovLH((float)Math.PI / 4.0f, scdirectx.D3D.SurfaceWidth / (float)scdirectx.D3D.SurfaceHeight, 0.1f, 1000.0f);
            var viewProj0 = Matrix.Multiply(viewmatrix0, scdirectx.D3D.ProjectionMatrix);


            //_worldMatrix.Transpose();

            /*7
            if (Program.useOculusRift == 1)
            {
                //_projectionMatrix = oriProjectionMatrix;
                _viewMatrix.Transpose();
            }
            else
            {
                _worldMatrix.Transpose();
                _viewMatrix.Transpose();
                _projectionMatrix = scgraphicssecpackagemessage.projectionMatrix;
                _projectionMatrix.Transpose();
            }*/



            /*if (Program.useOculusRift == 1)
            {

                Matrix hmd_matrix_current = Matrix.Identity;
                Matrix hmdmatrixcurrentforpelvis = Matrix.Identity;
                //HEADSET POSITION
                displayMidpoint = scdirectx.D3D.OVR.GetPredictedDisplayTime(scdirectx.D3D.sessionPtr, 0);
                trackingState = scdirectx.D3D.OVR.GetTrackingState(scdirectx.D3D.sessionPtr, displayMidpoint, true);
                latencyMark = false;
                trackState = scdirectx.D3D.OVR.GetTrackingState(scdirectx.D3D.sessionPtr, 0.0f, latencyMark);
                poseStatefer = trackState.HeadPose;
                hmdPose = poseStatefer.ThePose;
                hmdRot = hmdPose.Orientation;
                _hmdPoser = new Vector3(hmdPose.Position.X, hmdPose.Position.Y, hmdPose.Position.Z);
                _hmdRoter = new Quaternion(hmdPose.Orientation.X, hmdPose.Orientation.Y, hmdPose.Orientation.Z, hmdPose.Orientation.W);
                //SET CAMERA POSITION
                //Camera.SetPosition(hmdPose.Position.X, hmdPose.Position.Y, hmdPose.Position.Z);
                Quaternion quatter = new Quaternion(hmdRot.X, hmdRot.Y, hmdRot.Z, hmdRot.W);
                oculusRiftDir = sc_maths._getDirection(Vector3.ForwardRH, quatter);

                Matrix.RotationQuaternion(ref quatter, out hmd_matrix_current);

            }*/

            Matrix finalRotationMatrix = originRot * rotatingMatrix * rotatingMatrixForPelvis * hmdrotMatrix;



            Vector3 lightpos = new Vector3(0, 5, 0);
            Vector3 dirlight = new Vector3(0, -1, 0);


            if (Program.createikrig == 1)
            {


                /*
                for (int xxx = 0; xxx < somechunkpriminstancesikvoxelbodywidthR; xxx++)
                {
                    for (int yyy = 0; yyy < somechunkpriminstancesikvoxelbodyheightR; yyy++)
                    {

                        float posX = (xxx);
                        float posY = (yyy);
                        float posZ = (0);


                        var xxi = xxx;
                        var yyi = yyy;
                        var zzi = 0;

                        if (xxi < 0)
                        {
                            xxi *= -1;
                            xxi = (somechunkpriminstancesikvoxelbodywidthR) + xxi;
                        }
                        if (yyi < 0)
                        {
                            yyi *= -1;
                            yyi = (somechunkpriminstancesikvoxelbodyheightR) + yyi;
                        }
                        if (zzi < 0)
                        {
                            zzi *= -1;
                            zzi = (somechunkpriminstancesikvoxelbodydepthR) + zzi;
                        }

                        //int somechunkpriminstanceikarmvoxelindex = xxi + (somechunkpriminstancesikarmvoxelwidthL) * (yyi + (somechunkpriminstancesikarmvoxelheightL) * zzi);
                        int somechunkpriminstanceikvoxelbodyindex = xxi + (yyi * (somechunkpriminstancesikvoxelbodyheightR));



                        scgraphicssecpackagemessage.scjittertasks = ikvoxelbody[somechunkpriminstanceikvoxelbodyindex].setikbodytargetnlimbspositionsNrotations(scgraphicssecpackagemessage.scjittertasks, viewMatrix, projectionMatrix, OFFSETPOS, originRot, rotatingMatrix, hmdrotMatrix, hmd_matrix, ikvoxelbody[somechunkpriminstanceikvoxelbodyindex]._player_pelvis[0][0]._arrayOfInstances[0].current_pos, _rightTouchMatrix, _leftTouchMatrix, handPoseRight, handPoseLeft, oriProjectionMatrix, ikvoxelbody[somechunkpriminstanceikvoxelbodyindex]._player_torso[0][0], lightpos, dirlight, finalRotationMatrix, ikvoxelbody[somechunkpriminstanceikvoxelbodyindex]._player_pelvis[0][0], hmd_matrix_current, extramatrix, hmdmatrixcurrentforpelvis);
                        scgraphicssecpackagemessage.scjittertasks = ikvoxelbody[somechunkpriminstanceikvoxelbodyindex].ikbodyrender(scgraphicssecpackagemessage.scjittertasks, viewMatrix, projectionMatrix, OFFSETPOS, originRot, rotatingMatrix, hmdrotMatrix, hmd_matrix, rotatingMatrixForPelvis, _rightTouchMatrix, _leftTouchMatrix, handPoseRight, handPoseLeft, oriProjectionMatrix);




                        /*
                        for (int zzz = -somechunkpriminstancesikarmvoxeldepthL; zzz <= somechunkpriminstancesikarmvoxeldepthR; zzz++)
                        {

                        }
                    }
                }*/





                for (int xxx = 0; xxx < somechunkpriminstancesikvoxelbodywidthR; xxx++)
                {
                    float posX = (xxx);
                    float posY = (0);
                    float posZ = (0);

                    var xxi = xxx;
                    var yyi = 0;
                    var zzi = 0;

                    if (xxi < 0)
                    {
                        xxi *= -1;
                        xxi = (somechunkpriminstancesikvoxelbodywidthR) + xxi;
                    }
                    if (yyi < 0)
                    {
                        yyi *= -1;
                        yyi = (somechunkpriminstancesikvoxelbodyheightR) + yyi;
                    }
                    if (zzi < 0)
                    {
                        zzi *= -1;
                        zzi = (somechunkpriminstancesikvoxelbodydepthR) + zzi;
                    }

                    int somechunkpriminstanceikvoxelbodyindex = xxi;// + (somechunkpriminstancesikvoxelbodywidthL ) * (yyi + (somechunkpriminstancesikvoxelbodyheightL) * zzi);

                    scgraphicssecpackagemessage.scjittertasks = ikvoxelbody[somechunkpriminstanceikvoxelbodyindex].setikbodytargetnlimbspositionsNrotations(scgraphicssecpackagemessage.scjittertasks, viewmatrix0, projectionMatrix0, OFFSETPOS, originRot, rotatingMatrix, hmdrotMatrix, hmd_matrix, ikvoxelbody[somechunkpriminstanceikvoxelbodyindex]._player_pelvis[0][0]._arrayOfInstances[0].current_pos, _rightTouchMatrix, _leftTouchMatrix, handPoseRight, handPoseLeft, oriProjectionMatrix, ikvoxelbody[somechunkpriminstanceikvoxelbodyindex]._player_torso[0][0], lightpos, dirlight, finalRotationMatrix, ikvoxelbody[somechunkpriminstanceikvoxelbodyindex]._player_pelvis[0][0], hmd_matrix_current, extramatrix, hmdmatrixcurrentforpelvis);
                    scgraphicssecpackagemessage.scjittertasks = ikvoxelbody[somechunkpriminstanceikvoxelbodyindex].ikbodyrender(scgraphicssecpackagemessage.scjittertasks, viewmatrix0, projectionMatrix0, OFFSETPOS, originRot, rotatingMatrix, hmdrotMatrix, hmd_matrix, rotatingMatrixForPelvis, _rightTouchMatrix, _leftTouchMatrix, handPoseRight, handPoseLeft, oriProjectionMatrix);





                    //for (int yyy = -somechunkpriminstancesikvoxelbodyheightL; yyy <= somechunkpriminstancesikvoxelbodyheightR; yyy++)
                    //{
                    //    for (int zzz = -somechunkpriminstancesikvoxelbodydepthL; zzz <= somechunkpriminstancesikvoxelbodydepthR; zzz++)
                    //    {
                    //
                    //    }
                    //}
                }





                for (int xxx = 0; xxx < somechunkpriminstancesikarmvoxelwidthR; xxx++)
                {
                    for (int yyy = 0; yyy < somechunkpriminstancesikarmvoxelheightR; yyy++)
                    {

                        float posX = (xxx);
                        float posY = (yyy);
                        float posZ = (0);

                        var xxi = xxx;
                        var yyi = yyy;
                        var zzi = 0;

                        if (xxi < 0)
                        {
                            xxi *= -1;
                            xxi = (somechunkpriminstancesikarmvoxelwidthR) + xxi;
                        }
                        if (yyi < 0)
                        {
                            yyi *= -1;
                            yyi = (somechunkpriminstancesikarmvoxelheightR) + yyi;
                        }
                        if (zzi < 0)
                        {
                            zzi *= -1;
                            zzi = (somechunkpriminstancesikarmvoxeldepthR) + zzi;
                        }

                        int somechunkpriminstanceikarmvoxelindex = xxi + (yyi * (somechunkpriminstancesikarmvoxelheightR));


                        var sometest = ikarmvoxel[somechunkpriminstanceikarmvoxelindex];


                        scgraphicssecpackagemessage.scjittertasks = ikarmvoxel[somechunkpriminstanceikarmvoxelindex].setiktargetnlimbspositionsNrotations(scgraphicssecpackagemessage.scjittertasks, viewmatrix0, projectionMatrix0, OFFSETPOS, originRot, rotatingMatrix, hmdrotMatrix, hmd_matrix, ikvoxelbody[0]._player_pelvis[0][0]._arrayOfInstances[0].current_pos, _rightTouchMatrix, _leftTouchMatrix, handPoseRight, handPoseLeft, oriProjectionMatrix, ikvoxelbody[0]._player_torso[0][0], lightpos, dirlight, finalRotationMatrix, ikvoxelbody[0]._player_pelvis[0][0], ikvoxelbody[0], somechunkpriminstanceikarmvoxelindex, rotatingMatrixForPelvis, extramatrix, directionvectoroffsets, Vector3.Zero, Vector3.Zero, 0);
                        scgraphicssecpackagemessage.scjittertasks = ikarmvoxel[somechunkpriminstanceikarmvoxelindex].ikarmrender(scgraphicssecpackagemessage.scjittertasks, viewmatrix0, projectionMatrix0, OFFSETPOS, originRot, rotatingMatrix, hmdrotMatrix, hmd_matrix, rotatingMatrixForPelvis, _rightTouchMatrix, _leftTouchMatrix, handPoseRight, handPoseLeft, oriProjectionMatrix);



                        for (int xxxx = 0; xxxx < somechunkpriminstancesikfingervoxelwidthR; xxxx++)
                        {
                            for (int yyyy = 0; yyyy < somechunkpriminstancesikfingervoxelheightR; yyyy++)
                            {

                                float posXx = (xxxx);
                                float posYy = (yyyy);
                                float posZz = (0);


                                var xxxi = xxxx;
                                var yyyi = yyyy;
                                var zzzi = 0;

                                if (xxxi < 0)
                                {
                                    xxxi *= -1;
                                    xxxi = (somechunkpriminstancesikfingervoxelwidthR) + xxxi;
                                }
                                if (yyi < 0)
                                {
                                    yyyi *= -1;
                                    yyyi = (somechunkpriminstancesikfingervoxelheightR) + yyyi;
                                }
                                if (zzzi < 0)
                                {
                                    zzzi *= -1;
                                    zzzi = (somechunkpriminstancesikfingervoxeldepthR) + zzzi;
                                }

                                //int somechunkpriminstanceikfingervoxelindex = xxi + (somechunkpriminstancesikfingervoxelwidthL) * (yyi + (somechunkpriminstancesikfingervoxelheightL) * zzi);
                                int somechunkpriminstanceikfingervoxelindex = xxxi + (yyyi * (somechunkpriminstancesikfingervoxelheightR));


                                scgraphicssecpackagemessage.scjittertasks = ikfingervoxel[somechunkpriminstanceikarmvoxelindex][somechunkpriminstanceikfingervoxelindex].setiktargetnfingerspositionsNrotations(scgraphicssecpackagemessage.scjittertasks, viewmatrix0, projectionMatrix0, OFFSETPOS, originRot, rotatingMatrix, hmdrotMatrix, hmd_matrix, ikarmvoxel[0]._player_rght_hnd[0][0]._arrayOfInstances[0].current_pos, _rightTouchMatrix, _leftTouchMatrix, handPoseRight, handPoseLeft, oriProjectionMatrix, ikarmvoxel[0]._player_rght_hnd[0][0], lightpos, dirlight, finalRotationMatrix, ikarmvoxel[0]._player_rght_hnd[0][0], ikvoxelbody[0], somechunkpriminstanceikarmvoxelindex, rotatingMatrixForPelvis, extramatrix, directionvectoroffsets, Vector3.Zero, Vector3.Zero, ikarmvoxel[somechunkpriminstanceikarmvoxelindex], somechunkpriminstanceikfingervoxelindex);
                                scgraphicssecpackagemessage.scjittertasks = ikfingervoxel[somechunkpriminstanceikarmvoxelindex][somechunkpriminstanceikfingervoxelindex].ikfingerrender(scgraphicssecpackagemessage.scjittertasks, viewmatrix0, projectionMatrix0, OFFSETPOS, originRot, rotatingMatrix, hmdrotMatrix, hmd_matrix, rotatingMatrixForPelvis, _rightTouchMatrix, _leftTouchMatrix, handPoseRight, handPoseLeft, oriProjectionMatrix);



                                /*
                                for (int zzz = -somechunkpriminstancesikarmvoxeldepthL; zzz <= somechunkpriminstancesikarmvoxeldepthR; zzz++)
                                {

                                }*/
                            }
                        }


                    }
                }
            }

            return scgraphicssecpackagemessage.scjittertasks;
        }


        public scmessageobjectjitter[][] createikrig(scgraphicssecpackage scgraphicssecpackagemessage)//scmessageobjectjitter[][] scjittertasks)
        {

            //scmessageobjectjitter[][] _sc_jitter_tasks;
            var scjittertasks = scgraphicssecpackagemessage.scjittertasks;


            for (int xx = 0; xx < Program.physicsengineinstancex; xx++)
            {
                for (int yy = 0; yy < Program.physicsengineinstancey; yy++)
                {
                    for (int zz = 0; zz < Program.physicsengineinstancez; zz++)
                    {
                        var indexer00 = xx + Program.physicsengineinstancex * (yy + Program.physicsengineinstancey * zz);
                        Vector3 physics_engine_offset_pos = new Vector3(xx * 2, yy * 2, zz * 2);


                        worldMatrix_instances_screens[indexer00] = new Matrix[Program.worldwidth * Program.worldheight * Program.worlddepth][];
                        worldMatrixinstancesvoxelcube[indexer00] = new Matrix[Program.worldwidth * Program.worldheight * Program.worlddepth][];
                        _world_cube_list[indexer00] = new SC_cube[Program.worldwidth * Program.worldheight * Program.worlddepth];
                        //worldvoxelcubelists[indexer00] = new sc_voxel[Program.worldwidth * Program.worldheight * Program.worlddepth];
                        worldMatrixinstancesvoxelcube[indexer00] = new Matrix[Program.worldwidth * Program.worldheight * Program.worlddepth][];
                        _array_of_last_frame_cube_pos[indexer00] = new Vector3[Program.worldwidth * Program.worldheight * Program.worlddepth][];
                        _array_of_last_frame_voxel_pos[indexer00] = new Vector3[Program.worldwidth * Program.worldheight * Program.worlddepth][];
                        _world_screen_list[indexer00] = new SC_cube[Program.worldwidth * Program.worldheight * Program.worlddepth];


                        float offsetCubeY = 0;
                        float offsetVoxelY = 0;
                        float offsetCapsuleY = 0;
                        float offsetConeY = 0;
                        float offsetCylinderY = 0;
                        float offsetSphereY = 0;


                        for (int x = 0; x < Program.worldwidth; x++)
                        {
                            for (int y = 0; y < Program.worldheight; y++)
                            {
                                for (int z = 0; z < Program.worlddepth; z++)
                                {
                                    var indexer01 = x + Program.worldwidth * (y + Program.worldheight * z);

                                    Vector3 world_pos_offset = new Vector3(x * 2, y * 2, z * 2);
                                    if (Program.usejitterphysics == 1)
                                    {

                                        somedata00 = (object)_sc_jitter_tasks[indexer00][indexer01]._world_data[0];
                                        //World _jitter_worlds = (World)_some_data_00;
                                        thejitterworld1 = (World)somedata00;//= _jitter_worlds[0];

                                    }



                                    if (Program.createikrig == 1)
                                    {
                                        try
                                        {

                                            _human_inst_rig_x = 4; //30 //10
                                            _human_inst_rig_y = 1;
                                            _human_inst_rig_z = 4; //30 //10

                                            ikvoxelbody = new sccsikvoxellimbs[(somechunkpriminstancesikvoxelbodywidthR)];

                                            Vector3 originpositionikvoxelbody = new Vector3(0, 0, 0); //around 0.165f to 0.17f

                                            int grabtargetitem = 1;

                                            Matrix worldmatofobj = Matrix.Identity;
                                            //worldmatofobj.M41 = originpositionikvoxelbody.X;
                                            //worldmatofobj.M42 = originpositionikvoxelbody.Y;
                                            //worldmatofobj.M43 = originpositionikvoxelbody.Z;

                                            //float pelvisvaluey = -0.625f;
                                            //int realtorsowidth = 4;
                                            float ikvoxelrigbodysize = 0.1f;

                                            Vector3 somechunkpriminstanceikvoxelbodypos = Vector3.Zero;

                                            for (int xxx = 0; xxx < somechunkpriminstancesikvoxelbodywidthR; xxx++)
                                            {

                                                float posX = (xxx);
                                                float posY = (0);
                                                float posZ = (0);

                                                var xxi = xxx;
                                                var yyi = 0;
                                                var zzi = 0;

                                                if (xxi < 0)
                                                {
                                                    xxi *= -1;
                                                    xxi = (somechunkpriminstancesikvoxelbodywidthR) + xxi;
                                                }
                                                if (yyi < 0)
                                                {
                                                    yyi *= -1;
                                                    yyi = (somechunkpriminstancesikvoxelbodyheightR) + yyi;
                                                }
                                                if (zzi < 0)
                                                {
                                                    zzi *= -1;
                                                    zzi = (somechunkpriminstancesikvoxelbodydepthR) + zzi;
                                                }

                                                int somechunkpriminstanceikvoxelbodyindex = xxi;


                                                ikvoxelbody[somechunkpriminstanceikvoxelbodyindex] = new sccsikvoxellimbs();
                                                somechunkpriminstanceikvoxelbodypos = ((new Vector3(posX, posY, posZ)) + originpositionikvoxelbody); 


                                                Matrix finalRotationMatrix = scupdate.originRot * scupdate.rotatingMatrix * scupdate.rotatingMatrixForPelvis * scupdate.hmdmatrixRot;

                                                scjittertasks = ikvoxelbody[somechunkpriminstanceikvoxelbodyindex].createikbody(scjittertasks, tempMultiInstancePhysicsTotal, somechunkpriminstanceikvoxelbodypos, null, worldmatofobj, _human_inst_rig_x, _human_inst_rig_y, _human_inst_rig_z, grabtargetitem, finalRotationMatrix);
                                            }





                                            grabtargetitem = 0;
                                            ikarmvoxel = new sccsikvoxellimbs[(somechunkpriminstancesikarmvoxelwidthR) + (somechunkpriminstancesikarmvoxelheightR)];
                                            ikfingervoxel = new sccsikvoxellimbs[(somechunkpriminstancesikarmvoxelwidthR) + (somechunkpriminstancesikarmvoxelheightR)][];

                                            Vector3 originpositionikarmvoxel = new Vector3(0, 0, 0);

                                            //float pelvisvaluey = -0.625f;
                                            //int realtorsowidth = 4;
                                            //float ikvoxelrigsize = 0.1f;

                                            Vector3 somechunkpriminstanceikarmvoxelpos = Vector3.Zero;

                                            for (int xxx = 0; xxx < somechunkpriminstancesikarmvoxelwidthR; xxx++)
                                            {
                                                for (int yyy = 0; yyy < somechunkpriminstancesikarmvoxelheightR; yyy++)
                                                {
                                                    float posX = (xxx);
                                                    float posY = (yyy);
                                                    float posZ = (0);

                                                    var xxi = xxx;
                                                    var yyi = yyy;
                                                    var zzi = 0;

                                                    if (xxi < 0)
                                                    {
                                                        xxi *= -1;
                                                        xxi = (somechunkpriminstancesikarmvoxelwidthR) + xxi;
                                                    }
                                                    if (yyi < 0)
                                                    {
                                                        yyi *= -1;
                                                        yyi = (somechunkpriminstancesikarmvoxelheightR) + yyi;
                                                    }
                                                    if (zzi < 0)
                                                    {
                                                        zzi *= -1;
                                                        zzi = (somechunkpriminstancesikarmvoxeldepthR) + zzi;
                                                    }

                                                    int somechunkpriminstanceikarmvoxelindex = xxi + (yyi * (somechunkpriminstancesikarmvoxelheightR));

                                                    somechunkpriminstanceikarmvoxelpos = ((new Vector3(posX, posY, posZ)) + originpositionikarmvoxel);


                                                    if (somechunkpriminstanceikarmvoxelindex == 0) // bottom left
                                                    {

                                                        somechunkpriminstanceikarmvoxelpos.X = 0;
                                                        somechunkpriminstanceikarmvoxelpos.Y = 0;

                                                    }
                                                    else if (somechunkpriminstanceikarmvoxelindex == 1) // top right
                                                    {

                                                        somechunkpriminstanceikarmvoxelpos.X = 0;
                                                        somechunkpriminstanceikarmvoxelpos.Y = 0;

                                                    }
                                                    else if (somechunkpriminstanceikarmvoxelindex == 2)
                                                    {
                                                        somechunkpriminstanceikarmvoxelpos.X = 0;
                                                        somechunkpriminstanceikarmvoxelpos.Y = 0;
                                                    }
                                                    else if (somechunkpriminstanceikarmvoxelindex == 3)
                                                    {
                                                        somechunkpriminstanceikarmvoxelpos.X = 0;
                                                        somechunkpriminstanceikarmvoxelpos.Y = 0;
                                                    }

                                                    //somechunkpriminstanceikarmvoxelpos = ((new Vector3(posX, posY, posZ)) + originpositionikarmvoxel);
                                                    Matrix finalRotationMatrix = scupdate.originRot * scupdate.rotatingMatrix * scupdate.rotatingMatrixForPelvis * scupdate.hmdmatrixRot;

                                                    ikarmvoxel[somechunkpriminstanceikarmvoxelindex] = new sccsikvoxellimbs();
                                                    _sc_jitter_tasks = ikarmvoxel[somechunkpriminstanceikarmvoxelindex].createikarm(scjittertasks, tempMultiInstancePhysicsTotal, somechunkpriminstanceikarmvoxelpos, ikvoxelbody[0], somechunkpriminstanceikarmvoxelindex, _human_inst_rig_x, _human_inst_rig_y, _human_inst_rig_z, grabtargetitem, 0, null, finalRotationMatrix);

                                                    grabtargetitem = 0;
                                                    ikfingervoxel[somechunkpriminstanceikarmvoxelindex] = new sccsikvoxellimbs[(somechunkpriminstancesikfingervoxelwidthR) + (somechunkpriminstancesikfingervoxelheightR)];

                                                    Vector3 originpositionikfingervoxel = new Vector3(0, 0, 0);

                                                    //float pelvisvaluey = -0.625f;
                                                    //int realtorsowidth = 4;
                                                    //float ikvoxelrigsize = 0.1f;

                                                    Vector3 somechunkpriminstanceikfingervoxelpos = Vector3.Zero;

                                                    for (int xxxx = 0; xxxx < somechunkpriminstancesikfingervoxelwidthR; xxxx++)
                                                    {
                                                        for (int yyyy = 0; yyyy < somechunkpriminstancesikfingervoxelheightR; yyyy++)
                                                        {
                                                            float posXx = (xxxx);
                                                            float posYy = (yyyy);
                                                            float posZz = (0);

                                                            var xxxi = xxxx;
                                                            var yyyi = yyyy;
                                                            var zzzi = 0;

                                                            if (xxxi < 0)
                                                            {
                                                                xxxi *= -1;
                                                                xxxi = (somechunkpriminstancesikfingervoxelwidthR) + xxxi;
                                                            }
                                                            if (yyyi < 0)
                                                            {
                                                                yyyi *= -1;
                                                                yyyi = (somechunkpriminstancesikfingervoxelheightR) + yyyi;
                                                            }
                                                            if (zzzi < 0)
                                                            {
                                                                zzzi *= -1;
                                                                zzzi = (somechunkpriminstancesikfingervoxeldepthR) + zzzi;
                                                            }

                                                            int somechunkpriminstanceikfingervoxelindex = xxxi + (yyyi * (somechunkpriminstancesikfingervoxelheightR));

                                                            somechunkpriminstanceikfingervoxelpos = ((new Vector3(posXx, posYy, posZz)) + originpositionikfingervoxel);


                                                            if (somechunkpriminstanceikfingervoxelindex == 0) // bottom left
                                                            {

                                                                somechunkpriminstanceikfingervoxelpos.X = 0;
                                                                somechunkpriminstanceikfingervoxelpos.Y = 0;

                                                            }
                                                            else if (somechunkpriminstanceikfingervoxelindex == 1) // top right
                                                            {

                                                                somechunkpriminstanceikfingervoxelpos.X = 0;
                                                                somechunkpriminstanceikfingervoxelpos.Y = 0;

                                                            }
                                                            else if (somechunkpriminstanceikfingervoxelindex == 2)
                                                            {
                                                                somechunkpriminstanceikfingervoxelpos.X = 0;
                                                                somechunkpriminstanceikfingervoxelpos.Y = 0;
                                                            }
                                                            else if (somechunkpriminstanceikfingervoxelindex == 3)
                                                            {
                                                                somechunkpriminstanceikfingervoxelpos.X = 0;
                                                                somechunkpriminstanceikfingervoxelpos.Y = 0;
                                                            }

                                                            //somechunkpriminstanceikfingervoxelpos = ((new Vector3(posX, posY, posZ)) + originpositionikfingervoxel);

                                                            ikfingervoxel[somechunkpriminstanceikarmvoxelindex][somechunkpriminstanceikfingervoxelindex] = new sccsikvoxellimbs();
                                                            scjittertasks = ikfingervoxel[somechunkpriminstanceikarmvoxelindex][somechunkpriminstanceikfingervoxelindex].createikfingers(scjittertasks, tempMultiInstancePhysicsTotal, somechunkpriminstanceikfingervoxelpos, ikvoxelbody[0], somechunkpriminstanceikarmvoxelindex, _human_inst_rig_x, _human_inst_rig_y, _human_inst_rig_z, grabtargetitem, 1, ikarmvoxel[somechunkpriminstanceikarmvoxelindex], somechunkpriminstanceikfingervoxelindex);

                                                            /*for (int zzz = -somechunkpriminstancesikfingervoxeldepthL; zzz <= somechunkpriminstancesikfingervoxeldepthR; zzz++)
                                                            {

                                                            }*/

                                                        }
                                                    }

                                                    /*
                                                    for (int zzz = -somechunkpriminstancesikarmvoxeldepthL; zzz <= somechunkpriminstancesikarmvoxeldepthR; zzz++)
                                                    {

                                                    }*/
                                                }
                                            }

                                            //Program.MessageBox((IntPtr)0, "ikrig has been created", "sccsmsg", 0);

                                        }
                                        catch (Exception ex)
                                        {
                                            Program.MessageBox((IntPtr)0, "create" + ex.ToString(), "scmsg", 0);

                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return scjittertasks;
        }






















        public scmessageobjectjitter[][] createvirtualdesktopstandard(scmessageobjectjitter[][] _sc_jitter_tasks)
        {

            //PHYSICS SCREENS
            /*_grab_rigid_data = new _rigid_data();
            _grab_rigid_data._body = null;
            _grab_rigid_data.position = Matrix.Identity;
            _grab_rigid_data._index = -1;
            _grab_rigid_data._physics_engine_index = -1;*/
            //SET TO 0 AND YOU HAVE USE A SHADERRESOURCE INSTEAD for the texture instead of using the color. cheap way for the moment as my switch wasnt working.
            r = 0;
            g = 0;
            b = 0;
            a = 0;
            var _object_worldmatrix = Matrix.Identity;
            var _offsetPos = new Vector3(0.15f, 0.15f, 0.15f);
            _object_worldmatrix = sccs.scgraphics.scdirectx.D3D.WorldMatrix;
            _object_worldmatrix.M41 = 0 + sccs.scgraphics.scupdate.originPos.X; //-1.5f
            _object_worldmatrix.M42 = 2 + 0 + sccs.scgraphics.scupdate.originPos.Y;
            _object_worldmatrix.M43 = -6.5f + sccs.scgraphics.scupdate.originPos.Z - 3; //-1.5f
            _object_worldmatrix.M44 = 1;



            _size_screen = somevoxelvirtualdesktopglobals.planeSize;// 0.0005f;
            var sizeWidth01 = somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * somevoxelvirtualdesktopglobals.tinyChunkWidth * somevoxelvirtualdesktopglobals.planeSize;//(float)((float)(sccs.scgraphics.scdirectx.D3D.SurfaceHeight * mulScreen) * _size_screen) * _screen_size_y;
            var sizeheight01 = somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * somevoxelvirtualdesktopglobals.tinyChunkHeight * somevoxelvirtualdesktopglobals.planeSize;// (float)(((float)sccs.scgraphics.scdirectx.D3D.SurfaceWidth * mulScreen) * _size_screen) * _screen_size_x;
            var sizedepth01 = somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth * somevoxelvirtualdesktopglobals.tinyChunkDepth * somevoxelvirtualdesktopglobals.planeSize;// 1 * _screen_size_z;
            float sizeWidther01 = (float)(sizeWidth01 * 0.5f);
            float sizeHeighter01 = (float)(sizeheight01 * 0.5f);
            float sizeDepther01 = (float)(sizedepth01 * 0.5f);
            var offsetPosX = sizeWidth01 * 2;
            var offsetPosY = sizeheight01 * 2;
            var offsetPosZ = sizedepth01 * 2;


            var tempMatrix0 = somevoxelvirtualdesktop[0].worldmatofobj;
            Quaternion screenquat;
            Quaternion.RotationMatrix(ref tempMatrix0, out screenquat);
            var screenNormalRight0 = sc_maths._getDirection(Vector3.Right, screenquat);
            screenNormalRight0.Normalize();
            var screenNormalUp0 = sc_maths._getDirection(Vector3.Up, screenquat);
            screenNormalUp0.Normalize();
            var screenNormalForward0 = sc_maths._getDirection(Vector3.ForwardRH, screenquat);
            screenNormalForward0.Normalize();

            Vector3 offsetposition = new Vector3(tempMatrix0.M41, tempMatrix0.M42, tempMatrix0.M43) + (screenNormalRight0 * sizeWidther01);
            offsetposition = offsetposition + (screenNormalUp0 * sizeHeighter01);
            offsetposition = offsetposition - (screenNormalForward0 * somevoxelvirtualdesktopglobals.planeSize);


            _object_worldmatrix.M41 = offsetposition.X; //-1.5f
            _object_worldmatrix.M42 = offsetposition.Y;
            _object_worldmatrix.M43 = offsetposition.Z; //-1.5f
            _object_worldmatrix.M44 = 1;
            _world_screen_list[0] = new SC_cube[1];
            _world_screen_list[0][0] = new SC_cube();
            worldMatrix_instances_screens[0] = new Matrix[1][];
            _world_screen_list[0][0].Initialize(sccs.scgraphics.scdirectx.D3D, sccs.scgraphics.scdirectx.D3D.SurfaceWidth, sccs.scgraphics.scdirectx.D3D.SurfaceHeight, 1, 1, 1, sizeWidther01, sizeHeighter01, sizeDepther01, new Vector4(r, g, b, a), _inst_screen_x, _inst_screen_y, _inst_screen_z, Program.consoleHandle, _object_worldmatrix, 3, offsetPosX, offsetPosY, offsetPosZ, thejitterworld, sccs.scgraphics.scdirectx.BodyTag.physicsInstancedScreen, true, 0, 100, 0, 0, 0); //, "terrainGrassDirt.bmp" //0.00035f
            if (Program.usejitterphysics == 1 && Program.usejitterphysicsbuo == 1)
            {
                _buo.Add(_world_screen_list[0][0]._arrayOfInstances[0].transform.Component.rigidbody, 3);
                _world_screen_list[0][0]._arrayOfInstances[0].transform.Component.rigidbody.AllowDeactivation = false;
            }
            worldMatrix_instances_screens[0][0] = new Matrix[1];
            worldMatrix_instances_screens[0][0][0] = _object_worldmatrix;// _world_screen_list[0][0]._arrayOfInstances[0].current_pos; //
            _world_screen_list[0][0]._arrayOfInstances[0].current_pos = _object_worldmatrix;
            _world_screen_list[0][0].indexofshader = sccs.scgraphics.scupdate._shaderManager.createcubeshaders(sccs.scgraphics.scdirectx.D3D.device, sccsvvdhd.Form1.theHandle, 0, 0);

            hasinitsccsvvdhd = 1;

            return _sc_jitter_tasks;
        }




        public scmessageobjectjitter[][] createvirtualdesktopassets(scmessageobjectjitter[][] _sc_jitter_tasks)
        {


            //PHYSICS SCREENS
            /*_grab_rigid_data = new _rigid_data();
            _grab_rigid_data._body = null;
            _grab_rigid_data.position = Matrix.Identity;
            _grab_rigid_data._index = -1;
            _grab_rigid_data._physics_engine_index = -1;*/
            //SET TO 0 AND YOU HAVE USE A SHADERRESOURCE INSTEAD for the texture instead of using the color. cheap way for the moment as my switch wasnt working.
            r = 0;
            g = 0;
            b = 0;
            a = 0;
            var _object_worldmatrix = Matrix.Identity;
            var _offsetPos = new Vector3(0.15f, 0.15f, 0.15f);
            _object_worldmatrix = sccs.scgraphics.scdirectx.D3D.WorldMatrix;
            _object_worldmatrix.M41 = 0 + sccs.scgraphics.scupdate.originPos.X; //-1.5f
            _object_worldmatrix.M42 = 2 + 0 + sccs.scgraphics.scupdate.originPos.Y;
            _object_worldmatrix.M43 = -6.5f + sccs.scgraphics.scupdate.originPos.Z - 3; //-1.5f
            _object_worldmatrix.M44 = 1;




            /*
            _object_worldmatrix.M41 += _offsetPos.X;
            _object_worldmatrix.M42 += _offsetPos.Y;
            _object_worldmatrix.M43 += _offsetPos.Z;
            _size_screen = 0.0005f;
            var sizeWidth01 = (float)(((float)sccs.scgraphics.scdirectx.D3D.SurfaceWidth * mulScreen) * _size_screen) * _screen_size_x;
            var sizeheight01 = (float)((float)(sccs.scgraphics.scdirectx.D3D.SurfaceHeight * mulScreen) * _size_screen) * _screen_size_y;
            var sizedepth01 = 1 * _screen_size_z;
            float sizeWidther01 = (float)(sizeWidth01 * 0.5f);
            float sizeHeighter01 = (float)(sizeheight01 * 0.5f);
            float sizeDepther01 = (float)(sizedepth01 * 0.5f);
            offsetPosX = sizeWidth01 * 2;
            offsetPosY = sizeheight01 * 2;
            offsetPosZ = sizedepth01 * 2;
            _world_screen_list[0] = new SC_cube[1];
            _world_screen_list[0][0] = new SC_cube();
            worldMatrix_instances_screens[0] = new Matrix[1][];
            _world_screen_list[0][0].Initialize(sccs.scgraphics.scdirectx.D3D, sccs.scgraphics.scdirectx.D3D.SurfaceWidth, sccs.scgraphics.scdirectx.D3D.SurfaceHeight, 1, 1, 1, sizeWidther01, sizeHeighter01, sizeDepther01, new Vector4(r, g, b, a), _inst_screen_x, _inst_screen_y, _inst_screen_z, Program.consoleHandle, _object_worldmatrix, 3, offsetPosX, offsetPosY, offsetPosZ, thejitterworld, sccs.scgraphics.scdirectx.BodyTag.physicsInstancedScreen, true, 0, 100, 0, 0, 0); //, "terrainGrassDirt.bmp" //0.00035f
            if (Program.usejitterphysics == 1 && Program.usejitterphysicsbuo == 1)
            {
                _buo.Add(_world_screen_list[0][0]._arrayOfInstances[0].transform.Component.rigidbody, 3);
                _world_screen_list[0][0]._arrayOfInstances[0].transform.Component.rigidbody.AllowDeactivation = false;
            }
            worldMatrix_instances_screens[0][0] = new Matrix[1];
            worldMatrix_instances_screens[0][0][0] = _world_screen_list[0][0]._arrayOfInstances[0].current_pos; //







            vertoffsetx = 0;
            vertoffsety = 0;
            vertoffsetz = (-_screen_assets_size_z) * 2;// 
            r = 0.05f;
            g = 0.75f;
            b = 0.05f;
            a = 1;
            _object_worldmatrix = Matrix.Identity;
            _object_worldmatrix.M41 = 0;
            _object_worldmatrix.M42 = 0;
            _object_worldmatrix.M43 = 0;
            _object_worldmatrix.M44 = 1;
            offsetPosX = sizeWidth01 * 2;
            offsetPosY = sizeheight01 * 2;
            offsetPosZ = sizedepth01 * 2;
            _world_screen_assets_list[0] = new SC_cube[1];
            _world_screen_assets_list[0][0] = new SC_cube();
            worldMatrix_instances_screen_assets[0] = new Matrix[1][];
            _world_screen_assets_list[0][0].Initialize(sccs.scgraphics.scdirectx.D3D, sccs.scgraphics.scdirectx.D3D.SurfaceWidth, sccs.scgraphics.scdirectx.D3D.SurfaceHeight, 1, 1, 1, _screen_assets_size_x, _screen_assets_size_y, _screen_assets_size_z, new Vector4(r, g, b, a), _inst_screen_assets_x, _inst_screen_assets_y, _inst_screen_assets_z, Program.consoleHandle, _object_worldmatrix, 3, offsetPosX, offsetPosY, offsetPosZ, thejitterworld, sccs.scgraphics.scdirectx.BodyTag._screen_assets, true, 0, 10, vertoffsetx, vertoffsety, vertoffsetz); //, "terrainGrassDirt.bmp" //0.00035f
            worldMatrix_instances_screen_assets[0][0] = new Matrix[_inst_screen_assets_x * _inst_screen_assets_y * _inst_screen_assets_z];
            for (int i = 0; i < worldMatrix_instances_screen_assets[0][0].Length; i++)
            {
                worldMatrix_instances_screen_assets[0][0][i] = Matrix.Identity;
            }*/



            _size_screen = somevoxelvirtualdesktopglobals.planeSize;// 0.0005f;
            var sizeWidth01 = somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * somevoxelvirtualdesktopglobals.tinyChunkWidth * somevoxelvirtualdesktopglobals.planeSize;//(float)((float)(sccs.scgraphics.scdirectx.D3D.SurfaceHeight * mulScreen) * _size_screen) * _screen_size_y;
            var sizeheight01 = somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * somevoxelvirtualdesktopglobals.tinyChunkHeight * somevoxelvirtualdesktopglobals.planeSize;// (float)(((float)sccs.scgraphics.scdirectx.D3D.SurfaceWidth * mulScreen) * _size_screen) * _screen_size_x;
            var sizedepth01 = somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth * somevoxelvirtualdesktopglobals.tinyChunkDepth * somevoxelvirtualdesktopglobals.planeSize;// 1 * _screen_size_z;
            float sizeWidther01 = (float)(sizeWidth01 * 0.5f);
            float sizeHeighter01 = (float)(sizeheight01 * 0.5f);
            float sizeDepther01 = (float)(sizedepth01 * 0.5f);
            var offsetPosX = sizeWidth01 * 2;
            var offsetPosY = sizeheight01 * 2;
            var offsetPosZ = sizedepth01 * 2;


            var tempMatrix0 = somevoxelvirtualdesktop[0].worldmatofobj;
            Quaternion screenquat;
            Quaternion.RotationMatrix(ref tempMatrix0, out screenquat);
            var screenNormalRight0 = sc_maths._getDirection(Vector3.Right, screenquat);
            screenNormalRight0.Normalize();
            var screenNormalUp0 = sc_maths._getDirection(Vector3.Up, screenquat);
            screenNormalUp0.Normalize();
            var screenNormalForward0 = sc_maths._getDirection(Vector3.ForwardRH, screenquat);
            screenNormalForward0.Normalize();

            Vector3 offsetposition = new Vector3(tempMatrix0.M41, tempMatrix0.M42, tempMatrix0.M43) + (screenNormalRight0 * sizeWidther01);
            offsetposition = offsetposition + (screenNormalUp0 * sizeHeighter01);
            offsetposition = offsetposition - (screenNormalForward0 * somevoxelvirtualdesktopglobals.planeSize);


            /*_object_worldmatrix.M41 = offsetposition.X; //-1.5f
            _object_worldmatrix.M42 = offsetposition.Y;
            _object_worldmatrix.M43 = offsetposition.Z; //-1.5f
            _object_worldmatrix.M44 = 1;
            _world_screen_list[0] = new SC_cube[1];
            _world_screen_list[0][0] = new SC_cube();
            worldMatrix_instances_screens[0] = new Matrix[1][];
            _world_screen_list[0][0].Initialize(sccs.scgraphics.scdirectx.D3D, sccs.scgraphics.scdirectx.D3D.SurfaceWidth, sccs.scgraphics.scdirectx.D3D.SurfaceHeight, 1, 1, 1, sizeWidther01, sizeHeighter01, sizeDepther01, new Vector4(r, g, b, a), _inst_screen_x, _inst_screen_y, _inst_screen_z, Program.consoleHandle, _object_worldmatrix, 3, offsetPosX, offsetPosY, offsetPosZ, thejitterworld, sccs.scgraphics.scdirectx.BodyTag.physicsInstancedScreen, true, 0, 100, 0, 0, 0); //, "terrainGrassDirt.bmp" //0.00035f
            if (Program.usejitterphysics == 1 && Program.usejitterphysicsbuo == 1)
            {
                _buo.Add(_world_screen_list[0][0]._arrayOfInstances[0].transform.Component.rigidbody, 3);
                _world_screen_list[0][0]._arrayOfInstances[0].transform.Component.rigidbody.AllowDeactivation = false;
            }
            worldMatrix_instances_screens[0][0] = new Matrix[1];
            worldMatrix_instances_screens[0][0][0] = _object_worldmatrix;// _world_screen_list[0][0]._arrayOfInstances[0].current_pos; //
            _world_screen_list[0][0]._arrayOfInstances[0].current_pos = _object_worldmatrix;
            _world_screen_list[0][0].indexofshader = sccs.scgraphics.scupdate._shaderManager.createcubeshaders(sccs.scgraphics.scdirectx.D3D.device, sccsvvdhd.Form1.theHandle, 0, 0);
            */




            vertoffsetx = 0;
            vertoffsety = 0;
            vertoffsetz = (-_screen_assets_size_z) * 2;
            r = 0.25f;
            g = 0.25f;// g = 0.75f;
            b = 0.25f;
            a = 1;
            _object_worldmatrix = Matrix.Identity;
            _object_worldmatrix.M41 = 0;
            _object_worldmatrix.M42 = 0;
            _object_worldmatrix.M43 = 0;
            _object_worldmatrix.M44 = 1;
            offsetPosX = sizeWidth01 * 2;
            offsetPosY = sizeheight01 * 2;
            offsetPosZ = sizedepth01 * 2;




            _world_screen_assets_list[0] = new SC_cube[1];
            _world_screen_assets_list[0][0] = new SC_cube();
            worldMatrix_instances_screen_assets[0] = new Matrix[1][];
            _world_screen_assets_list[0][0].Initialize(sccs.scgraphics.scdirectx.D3D, sccs.scgraphics.scdirectx.D3D.SurfaceWidth, sccs.scgraphics.scdirectx.D3D.SurfaceHeight, 1, 1, 1, _screen_assets_size_x, _screen_assets_size_y, _screen_assets_size_z, new Vector4(r, g, b, a), _inst_screen_assets_x, _inst_screen_assets_y, _inst_screen_assets_z, Program.consoleHandle, _object_worldmatrix, 3, offsetPosX, offsetPosY, offsetPosZ, thejitterworld, sccs.scgraphics.scdirectx.BodyTag._screen_assets, true, 0, 10, vertoffsetx, vertoffsety, vertoffsetz); //, "terrainGrassDirt.bmp" //0.00035f
            worldMatrix_instances_screen_assets[0][0] = new Matrix[_inst_screen_assets_x * _inst_screen_assets_y * _inst_screen_assets_z];
            for (int i = 0; i < worldMatrix_instances_screen_assets[0][0].Length; i++)
            {
                worldMatrix_instances_screen_assets[0][0][i] = Matrix.Identity;



            }

            _world_screen_assets_list[0][0].indexofshader = sccs.scgraphics.scupdate._shaderManager.createcubeshaders(sccs.scgraphics.scdirectx.D3D.device, sccsvvdhd.Form1.theHandle, 0, 1);

            worldmatrixinstancesvoxelsforcalculationsonly[0] = new Matrix[1][];
            worldmatrixinstancesvoxelsforcalculationsonly[0][0] = new Matrix[_inst_screen_assets_x * _inst_screen_assets_y * _inst_screen_assets_z];
            for (int i = 0; i < worldmatrixinstancesvoxelsforcalculationsonly[0][0].Length; i++)
            {
                worldmatrixinstancesvoxelsforcalculationsonly[0][0][i] = Matrix.Identity;
            }





            oriRotationScreenX = 0;
            oriRotationScreenY = 0;
            oriRotationScreenZ = 0;

            RotationScreenX = oriRotationScreenX;
            RotationScreenY = oriRotationScreenY;
            RotationScreenZ = oriRotationScreenZ;

            //pitcher = oriRotationScreenX * 0.0174532925f;
            //yawer = oriRotationScreenY * 0.0174532925f;
            //roller = oriRotationScreenZ * 0.0174532925f;

            var pitcher = (float)(Math.PI * (oriRotationScreenX) / 180.0f);
            var yawer = (float)(Math.PI * (oriRotationScreenY) / 180.0f);
            var roller = (float)(Math.PI * (oriRotationScreenZ) / 180.0f);


            originRotScreen = SharpDX.Matrix.RotationYawPitchRoll(yawer, pitcher, roller);
            rotatingMatrixScreen = SharpDX.Matrix.RotationYawPitchRoll(yawer, pitcher, roller);


            float oriRotationScreenX0 = 0;
            float oriRotationScreenY0 = 180;
            float oriRotationScreenZ0 = 0;

            //pitcher = oriRotationScreenX0 * 0.0174532925f;
            //yawer = oriRotationScreenY0 * 0.0174532925f;
            //roller = oriRotationScreenZ0 * 0.0174532925f;
            pitcher = (float)(Math.PI * (oriRotationScreenX0) / 180.0f);
            yawer = (float)(Math.PI * (oriRotationScreenY0) / 180.0f);
            roller = (float)(Math.PI * (oriRotationScreenZ0) / 180.0f);

            _direction_offsetter = SharpDX.Matrix.RotationYawPitchRoll(yawer, pitcher, roller);

            _screen_direction_offsetter_two = SharpDX.Matrix.RotationYawPitchRoll(0, 0, 0);



            rotatingMatrixScreen.M41 = sccs.scgraphics.scupdate.originPosScreen.X;
            rotatingMatrixScreen.M42 = sccs.scgraphics.scupdate.originPosScreen.Y;
            rotatingMatrixScreen.M43 = sccs.scgraphics.scupdate.originPosScreen.Z;
            _screenDirMatrix[0] = new Matrix[1][];
            point3DCollection[0] = new Vector3[1][];
            _screenDirMatrix_correct_pos[0] = new Matrix[1][];
            _screenDirMatrix[0][0] = new Matrix[4];
            point3DCollection[0][0] = new Vector3[4];
            _screenDirMatrix_correct_pos[0][0] = new Matrix[4];
            for (int i = 0; i < _screenDirMatrix[0][0].Length; i++)
            {
                _screenDirMatrix[0][0][i] = new Matrix();
                _screenDirMatrix[0][0][i] = rotatingMatrixScreen;
            }



            _size_screen = somevoxelvirtualdesktopglobals.planeSize;


            Vector3 positionOfScreen = new Vector3(somevoxelvirtualdesktop[0].currentWorldMatrix.M41, somevoxelvirtualdesktop[0].currentWorldMatrix.M42, somevoxelvirtualdesktop[0].currentWorldMatrix.M43);

            float posoffsetxx = somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * somevoxelvirtualdesktopglobals.tinyChunkWidth * somevoxelvirtualdesktopglobals.planeSize * 0.5f;
            float posoffsetyy = somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * somevoxelvirtualdesktopglobals.tinyChunkHeight * somevoxelvirtualdesktopglobals.planeSize * 0.5f;

            sizeWidtherer = posoffsetxx;
            sizeheighterer = posoffsetyy;

            tempMatrix = somevoxelvirtualdesktop[0].currentWorldMatrix;
            Quaternion.RotationMatrix(ref tempMatrix, out _testQuater);
            var screenNormalRight = sc_maths._getDirection(Vector3.Right, _testQuater);
            screenNormalRight.Normalize();
            var screenNormalUp = sc_maths._getDirection(Vector3.Up, _testQuater);
            screenNormalUp.Normalize();
            screenNormalForward = sc_maths._getDirection(Vector3.ForwardRH, _testQuater);
            screenNormalForward.Normalize();



            Vector3 currentScreenPos = new Vector3(tempMatrix.M41, tempMatrix.M42, tempMatrix.M43); // new Vector3(xii, yii, zii);// new Vector3(_finalRotMatrixScreen.M41, _finalRotMatrixScreen.M42, _finalRotMatrixScreen.M43);
            Vector3 newDirRight = (screenNormalRight) * sizeWidtherer; // + screenNormalTop
            currentScreenPos -= newDirRight;
            Vector3 newDirUp = (screenNormalUp) * sizeheighterer; // + screenNormalTop
            currentScreenPos -= newDirUp;
            Matrix resulter0 = tempMatrix;

            currentScreenPos = currentScreenPos + (screenNormalRight * sizeWidtherer);
            currentScreenPos = currentScreenPos + (screenNormalUp * sizeheighterer);
            resulter0.M41 = currentScreenPos.X;
            resulter0.M42 = currentScreenPos.Y;
            resulter0.M43 = currentScreenPos.Z;
            _screenDirMatrix[0][0][0] = resulter0;

            currentScreenPos = new Vector3(tempMatrix.M41, tempMatrix.M42, tempMatrix.M43);
            newDirRight = (screenNormalRight) * sizeWidtherer;
            currentScreenPos -= newDirRight;
            newDirUp = (screenNormalUp) * sizeheighterer;
            currentScreenPos += newDirUp;
            resulter0 = tempMatrix;
            currentScreenPos = currentScreenPos + (screenNormalRight * sizeWidtherer);
            currentScreenPos = currentScreenPos + (screenNormalUp * sizeheighterer);
            resulter0.M41 = currentScreenPos.X;
            resulter0.M42 = currentScreenPos.Y;
            resulter0.M43 = currentScreenPos.Z;
            _screenDirMatrix[0][0][1] = resulter0;

            currentScreenPos = new Vector3(tempMatrix.M41, tempMatrix.M42, tempMatrix.M43);
            newDirRight = (screenNormalRight) * sizeWidtherer;
            currentScreenPos += newDirRight;
            newDirUp = (screenNormalUp) * sizeheighterer;
            currentScreenPos -= newDirUp;
            resulter0 = tempMatrix;
            currentScreenPos = currentScreenPos + (screenNormalRight * sizeWidtherer);
            currentScreenPos = currentScreenPos + (screenNormalUp * sizeheighterer);
            resulter0.M41 = currentScreenPos.X;
            resulter0.M42 = currentScreenPos.Y;
            resulter0.M43 = currentScreenPos.Z;
            _screenDirMatrix[0][0][2] = resulter0;

            currentScreenPos = new Vector3(tempMatrix.M41, tempMatrix.M42, tempMatrix.M43);
            newDirRight = (screenNormalRight) * sizeWidtherer;
            currentScreenPos += newDirRight;
            newDirUp = (screenNormalUp) * sizeheighterer;
            currentScreenPos += newDirUp;
            resulter0 = tempMatrix;
            currentScreenPos = currentScreenPos + (screenNormalRight * sizeWidtherer);
            currentScreenPos = currentScreenPos + (screenNormalUp * sizeheighterer);
            resulter0.M41 = currentScreenPos.X;
            resulter0.M42 = currentScreenPos.Y;
            resulter0.M43 = currentScreenPos.Z;
            _screenDirMatrix[0][0][3] = resulter0;





            for (int i = 0; i < _screenDirMatrix[0][0].Length; i++)
            {
                point3DCollection[0][0][i] = new Vector3(_screenDirMatrix[0][0][i].M41, _screenDirMatrix[0][0][i].M42, _screenDirMatrix[0][0][i].M43);
            }













            Vector3 cameraPos = sccs.scgraphics.scupdate.Camera.GetPosition();
            Matrix tempmat = sccs.scgraphics.scupdate.Camera.rotationMatrix;
            Quaternion otherQuat;
            Quaternion.RotationMatrix(ref tempmat, out otherQuat);

            Vector3 direction_feet_forward;
            Vector3 direction_feet_right;
            Vector3 direction_feet_up;

            direction_feet_forward = -sc_maths._getDirection(Vector3.ForwardRH, otherQuat);
            direction_feet_right = sc_maths._getDirection(Vector3.Right, otherQuat);
            direction_feet_up = sc_maths._getDirection(Vector3.Up, otherQuat);

            //var somemat = sc_maths.makeRotationDir(direction_feet_forward,Vector3.Up);
            //rayDirRighter = sc_maths._getDirection(Vector3.ForwardRH, _rightTouchQuat);







            someRay = new Ray(cameraPos, direction_feet_forward);

            //Vector3 pointVirtualInsideofscreenx = someVirtualPointOnScreenX + direction_feet_forward;
            Vector3 cameraforwardintersectsscreen;

            /*
            var somematroxer2 = screen_mat;
            Quaternion _quat_screen;
            Quaternion.RotationMatrix(ref screen_mat, out _quat_screen);
            screenNormal = sc_maths._getDirection(Vector3.ForwardRH, _quaft_screen);
            screenNormal.Normalize();
            planer = new Plane(new Vector3(screen_mat.M41, screen_mat.M42, screen_mat.M43), screenNormal);*/

            intersecter = someRay.Intersects(ref planer, out cameraforwardintersectsscreen);


            if (intersecter)
            {
                //Console.WriteLine("true " + intersectpointforscreen.X);
            }
            else
            {
                //Console.WriteLine("false " + intersectpointforscreen.X);
            }




            var raycam = new Ray(cameraPos, direction_feet_forward);
            Vector3 camintersectsscreenvec;
            var camintersectsscreen = raycam.Intersects(ref planer, out camintersectsscreenvec);
            //Vector3 offsetmouseposz = camintersectsscreenvec;



            var vert00 = new Vector3(_screenDirMatrix_correct_pos[0][0][0].M41, _screenDirMatrix_correct_pos[0][0][0].M42, _screenDirMatrix_correct_pos[0][0][0].M43);
            var vert11 = new Vector3(_screenDirMatrix_correct_pos[0][0][1].M41, _screenDirMatrix_correct_pos[0][0][1].M42, _screenDirMatrix_correct_pos[0][0][1].M43);
            var vert22 = new Vector3(_screenDirMatrix_correct_pos[0][0][2].M41, _screenDirMatrix_correct_pos[0][0][2].M42, _screenDirMatrix_correct_pos[0][0][2].M43);
            var vert33 = new Vector3(_screenDirMatrix_correct_pos[0][0][3].M41, _screenDirMatrix_correct_pos[0][0][3].M42, _screenDirMatrix_correct_pos[0][0][3].M43);

            var pointOnScreenn = new Vector3(camintersectsscreenvec.X, camintersectsscreenvec.Y, camintersectsscreenvec.Z);


            var dd = (vert22 - vert00).Length();
            widthLength = (vert22 - vert00).Length();
            heightLength = (vert11 - vert00).Length();
            float rr = (pointOnScreenn - vert00).Length();
            var RR = (pointOnScreenn - vert22).Length();
            var xcirccircc = ((dd * dd) - (rr * rr) + (RR * RR)) / (2 * dd);
            var dd1 = xcirccircc;
            var dd2 = dd - xcirccircc;

            //r is with d2
            //R is with d1
            //a2 + b2 = c2

            /*if ( d1 < 0)
            {
                //Program.MessageBox((IntPtr)0, "over bounds 0", "sccs message 1", 0);
                Console.WriteLine("out of bounds 0");
            }*/

            float bb = (float)Math.Sqrt((rr * rr) - (dd2 * dd2));
            currentPosWidth = (widthLength / 2) - dd1; // 
            //currentPosWidth = dd1; // 
            //currentPosHeight = ((heightLength/2) - bb);
            currentPosHeight = bb - (heightLength / 2);

            worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M41 = (float)currentPosWidth;
            worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)currentPosHeight;
            worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)pointOnScreenn.Z;

            originalpointerofcamonscreen = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][0].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][0].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][0].M43);


            return _sc_jitter_tasks;
        }









        public scmessageobjectjitter[][] createvirtualdesktop5faces(scmessageobjectjitter[][] _sc_jitter_tasks, int typeofface)
        {
            for (int xxx = 0; xxx < somevoxelvirtualdesktopw; xxx++)
            {
                for (int yyy = 0; yyy < somevoxelvirtualdesktoph; yyy++)
                {
                    for (int zzz = 0; zzz < somevoxelvirtualdesktopd; zzz++)
                    {
                        int somevoxelindex = xxx + somevoxelvirtualdesktopw * (yyy + somevoxelvirtualdesktoph * zzz);

                        somevoxelvirtualdesktop[somevoxelindex].createdifferentvirtualdesktop(sccs.scgraphics.scupdate.D3D, typeofface, somevoxelindex);
                    }
                }
            }
            return _sc_jitter_tasks;
        }



        public scmessageobjectjitter[][] workonvoxelterrain(scgraphicssecpackage scgraphicssecpackagemessage)
        {
            scmessageobjectjitter[][] _sc_jitter_tasks = scgraphicssecpackagemessage.scjittertasks;
            Matrix viewMatrix = scgraphicssecpackagemessage.viewMatrix;
            Matrix projectionMatrix = scgraphicssecpackagemessage.projectionMatrix; //_projectionMatrix;
            Matrix originRot = scgraphicssecpackagemessage.originRot; // originRot;
            Matrix rotatingMatrix = scgraphicssecpackagemessage.rotatingMatrix; //rotatingMatrix;
            Matrix hmdrotMatrix = scgraphicssecpackagemessage.hmdmatrixRot; //hmdmatrixRot;
            Matrix hmd_matrix = scgraphicssecpackagemessage.hmd_matrix; //hmd_matrix;
            Matrix rotatingMatrixForPelvis = scgraphicssecpackagemessage.rotatingMatrixForPelvis; //rotatingMatrixForPelvis;
            Matrix _rightTouchMatrix = scgraphicssecpackagemessage.rightTouchMatrix; //_rightTouchMatrix;
            Matrix _leftTouchMatrix = scgraphicssecpackagemessage.leftTouchMatrix; //_leftTouchMatrix;
            Matrix oriProjectionMatrix = scgraphicssecpackagemessage.oriProjectionMatrix; //oriProjectionMatrix;
            Matrix extramatrix = scgraphicssecpackagemessage.someextrapelvismatrix; //someextrapelvismatrix;
            Vector3 OFFSETPOS = scgraphicssecpackagemessage.offsetpos; // OFFSETPOS;
            Posef handPoseRight = scgraphicssecpackagemessage.handPoseRight; //handPoseRight;
            Posef handPoseLeft = scgraphicssecpackagemessage.handPoseLeft; //handPoseLeft;


            Matrix _worldMatrix = sccs.scgraphics.scdirectx.D3D.WorldMatrix;
            Matrix _viewMatrix = viewMatrix;
            Matrix _projectionMatrix = oriProjectionMatrix;
            //_worldMatrix.Transpose();


            if (Program._useOculusRift == 1)
            {
                _projectionMatrix = oriProjectionMatrix;
                _viewMatrix.Transpose();
            }
            else
            {
                _viewMatrix.Transpose();
                _projectionMatrix = scgraphicssecpackagemessage.projectionMatrix;
                _projectionMatrix.Transpose();
                _worldMatrix.Transpose();
            }


            /*Matrix rotcam = sccs.scgraphics.scupdate.Camera.rotationMatrix;
            Quaternion lightrotquat;
            Quaternion.RotationMatrix(ref rotcam, out lightrotquat);
            var dirlight = sc_maths._newgetdirforward(lightrotquat);


            Matrix.RotationY(rotation, out _worldMatrix);

            Model.Render(sccs.scgraphics.scdirectx.D3D.DeviceContext);
            // Render the model using the color shader.
            if (!LightShader.Render(sccs.scgraphics.scdirectx.D3D.DeviceContext, Model.IndexCount, _worldMatrix, _viewMatrix, _projectionMatrix, Model.Texture.TextureResource, dirlight, Light.AmbientColor, Light.DiffuseColour, sccs.scgraphics.scupdate.Camera.GetPosition(), Light.SpecularColor, Light.SpecularPower)) // Light.Direction
            {
                //Program.MessageBox((IntPtr)0, "!LightShader render", "scmsg", 0);
            }
            Rotate();*/



            return scgraphicssecpackagemessage.scjittertasks;
        }



        public void rendervoxels()
        {
            var viewmatrix = scupdate.Camera.ViewMatrix;// Matrix.LookAtLH(new Vector3(0, 0, -viewZ), new Vector3(0, 0, 0), Vector3.UnitY);
            var projectionMatrix = Matrix.PerspectiveFovLH((float)Math.PI / 4.0f, scdirectx.D3D.SurfaceWidth / (float)scdirectx.D3D.SurfaceHeight, 0.1f, 1000.0f);
            var viewProj = Matrix.Multiply(viewmatrix, scdirectx.D3D.ProjectionMatrix);
            try
            {
                //PHYSICS VOXEL CUBES 
                //////////////////////about 100 ticks more per loop compared to simple physics cubes? will investigate later as when i do 
                //////////////////////simple cubes with the chunk it lags more even though the number of vertices are the same as the physics cube up above
                //////////////////////todo: culling of faces by distance from player. etc.


                //_world_voxel_cube_lists[0][0].altinstancecount = 6;

                _world_voxel_cube_lists[0][0].Render(scdirectx.D3D.Device.ImmediateContext);
                sccs.scgraphics.scupdate._shaderManager.RenderInstancedObjectsc_perko_voxel(scdirectx.D3D.Device.ImmediateContext, _world_voxel_cube_lists[0][0].IndexCount, _world_voxel_cube_lists[0][0].InstanceCount, _world_voxel_cube_lists[0][0]._POSITION, viewmatrix, projectionMatrix, null, _DLightBuffer_voxel_cube, _world_voxel_cube_lists[0][0]);
                ///Console.WriteLine(_SystemTickPerformance.ElapsedTicks);
            }
            catch (Exception ex)
            {
                Program.MessageBox((IntPtr)0, ex.ToString() + "", "Oculus error", 0);
            }
        }




        //scmessageobjectjitter[][] _sc_jitter_tasks, Matrix viewMatrix, Matrix projectionMatrix, Vector3 OFFSETPOS, Matrix originRot, Matrix rotatingMatrix, Matrix hmdrotMatrix, Matrix hmd_matrix, Matrix rotatingMatrixForPelvis, Matrix _rightTouchMatrix, Matrix _leftTouchMatrix, Posef handPoseRight, Posef handPoseLeft, Matrix oriProjectionMatrix, Matrix extramatrix
        public scmessageobjectjitter[][] workOnDestroyingBytes(scgraphicssecpackage scgraphicssecpackagemessage)
        {
            // , ,,, ,,, , ,, , , 
            scmessageobjectjitter[][] _sc_jitter_tasks = scgraphicssecpackagemessage.scjittertasks;
            Matrix viewMatrix = scgraphicssecpackagemessage.viewMatrix;
            Matrix projectionMatrix = scgraphicssecpackagemessage.projectionMatrix; //_projectionMatrix;
            Matrix originRot = scgraphicssecpackagemessage.originRot; // originRot;
            Matrix rotatingMatrix = scgraphicssecpackagemessage.rotatingMatrix; //rotatingMatrix;
            Matrix hmdrotMatrix = scgraphicssecpackagemessage.hmdmatrixRot; //hmdmatrixRot;
            Matrix hmd_matrix = scgraphicssecpackagemessage.hmd_matrix; //hmd_matrix;
            Matrix rotatingMatrixForPelvis = scgraphicssecpackagemessage.rotatingMatrixForPelvis; //rotatingMatrixForPelvis;
            Matrix _rightTouchMatrix = scgraphicssecpackagemessage.rightTouchMatrix; //_rightTouchMatrix;
            Matrix _leftTouchMatrix = scgraphicssecpackagemessage.leftTouchMatrix; //_leftTouchMatrix;
            Matrix oriProjectionMatrix = scgraphicssecpackagemessage.oriProjectionMatrix; //oriProjectionMatrix;
            Matrix extramatrix = scgraphicssecpackagemessage.someextrapelvismatrix; //someextrapelvismatrix;
            Vector3 OFFSETPOS = scgraphicssecpackagemessage.offsetpos; // OFFSETPOS;
            Posef handPoseRight = scgraphicssecpackagemessage.handPoseRight; //handPoseRight;
            Posef handPoseLeft = scgraphicssecpackagemessage.handPoseLeft; //handPoseLeft;





            //SMOOTH CURSOR LOCATION FROM LAST TO CURRENT POSITION AND INSERT IN LIST THE POSITIONS.AFTER THAT USE LOOP TO BREAK THE BYTES BY REMOVING POSITIONS AFTER POSITIONS FROM THAT LIST OF POSITIONS.
            //Vector3.SmoothStep

            //CREATE LOGIC TO MAKE THE BYTE ROTATE OR CHANGE COLOR OR MOVEUP OR DOWN INSTEAD OF BREAKING SINCE IT CANNOT BE BOTH BREAKING AND COLOR CHANGE. TO DISPLAY CURSOR
            //MOVEMENT IN THE GAME CAPTURE. MAYBE A WATER EFFECT LIKE SPRING EFFECT WITH COLOR CHANGE TO THE VOXEL BYTES ON CURSOR LOCATION.











            try
            {




                Matrix hmdmatrixRot_ = hmdrotMatrix;

                Matrix OriginRot = originRot;
                Matrix RotatingMatrix = rotatingMatrix;
                Matrix RotatingMatrixForPelvis = rotatingMatrixForPelvis;








                Matrix finalRotationMatrix = originRot * rotatingMatrix * rotatingMatrixForPelvis * hmdrotMatrix;



                //shaderOfChunk.shaderResourceView2D = _basicTexture.TextureResource ; //sccs.scgraphics.scupdate._desktopFrame.ShaderResource;

                Matrix _worldMatrix = Matrix.Identity;
                Matrix _viewMatrix = viewMatrix;
                Matrix _projectionMatrix = oriProjectionMatrix;
                //_worldMatrix.Transpose();
                _viewMatrix.Transpose();
                //_projectionMatrix.Transpose();

                //SCCS EXERCICES
                //int widthmeshclass = someglobalschunkmesh.numberOfObjectInWidth;
                //int heightmeshclass = someglobalschunkmesh.numberOfObjectInHeight;
                //int depthmeshclass = someglobalschunkmesh.numberOfObjectInDepth;
                //int xmm = (int)((Math.Floor((matrixtouchright.M41 / someglobalschunkmesh.tinyChunkWidth))) * someglobalschunkmesh.planeSize);
                //int ymm = (int)((Math.Floor((matrixtouchright.M42 / someglobalschunkmesh.tinyChunkHeight))) * someglobalschunkmesh.planeSize);
                //int zmm = (int)((Math.Floor((matrixtouchright.M43 / someglobalschunkmesh.tinyChunkDepth))) * someglobalschunkmesh.planeSize);
                //Vector3 somehandposright = new Vector3(matrixtouchright.M41, matrixtouchright.M42, matrixtouchright.M43);
                //int xmm = (int)((Math.Floor((matrixtouchright.M41 / (someglobalschunkmesh.numberOfInstancesPerObjectInWidth * someglobalschunkmesh.tinyChunkWidth)))) * (someglobalschunkmesh.numberOfInstancesPerObjectInWidth * someglobalschunkmesh.tinyChunkWidth) * someglobalschunkmesh.planeSize);
                //int ymm = (int)((Math.Floor((matrixtouchright.M42 / (someglobalschunkmesh.numberOfInstancesPerObjectInHeight * someglobalschunkmesh.tinyChunkHeight)))) * (someglobalschunkmesh.numberOfInstancesPerObjectInHeight * someglobalschunkmesh.tinyChunkHeight) * someglobalschunkmesh.planeSize);
                //int zmm = (int)((Math.Floor((matrixtouchright.M43 / (someglobalschunkmesh.numberOfInstancesPerObjectInDepth * someglobalschunkmesh.tinyChunkDepth)))) * (someglobalschunkmesh.numberOfInstancesPerObjectInDepth * someglobalschunkmesh.tinyChunkDepth) * someglobalschunkmesh.planeSize);
                //float mulx = someglobalschunkmesh.numberOfInstancesPerObjectInWidth * someglobalschunkmesh.tinyChunkWidth;
                //float muly = someglobalschunkmesh.numberOfInstancesPerObjectInHeight * someglobalschunkmesh.tinyChunkHeight;
                //float mulz = someglobalschunkmesh.numberOfInstancesPerObjectInDepth * someglobalschunkmesh.tinyChunkDepth;
                //EXAMPLES OF ROUNDING/FLOORING/CEILING BULLSHIT
                //float somex = (float)(Math.Floor(1.2345f * (0.1f * 100)) * 0.1f);// == 1.2
                //float somex = (float)(Math.Round(1.2345f * (0.1f * 100)) * 0.1f);// == 1.2
                //float somex = (float)(Math.Ceiling(1.2345f * (0.1f * 100)) * 0.1f);// == 1.3
                //float somefx = (float)(Math.Ceiling(1.2345f /4) * 4); // == 4
                //float somefx = (float)(Math.Round(1.2345f / 4) * 4); // == 0
                //float somefx = (float)(Math.Floor(1.2345f / 4) * 4); // == 0
                //float somefx = (float)(Math.Floor(1.2345f / (4 * 4)) * (4 * 4)); // == 0
                //float somefx = (float)(Math.Ceiling(1.2345f / (4*4)) * (4 * 4)); // 16
                //float somefx = (float)((Math.Ceiling(1.2345f / (4 * 4)) * (4 * 4)) / (4 * 4)); // 1
                //float somefx = (float)((Math.Floor(12.5f / (mulx)) * (mulx)) / (mulx)); // 1
                //float somefx = (float)((Math.Round(12.5f / (mulx)) * (mulx)) / (mulx)); // 2
                //var fractionOf0 = realplanetwidth / someglobalschunkmesh.planeSize;// 4 / 1 = 4
                //int somefx = (int)Math.Floor((12.5f / someglobalschunkmesh.planeSize) / fractionOf0); // 3
                //float somefx = (float)((Math.Round(3.5f / 4) * 4)); // 4
                //float somefx = (float)((Math.Round(3.5f / 4) * 4) / 4); // 1
                //float somefx = (float)((Math.Round(12.5f * (mulx)) / (mulx))); // 12.5f
                //var fractionOf0 = (realplanetwidth / someglobalschunkmesh.planeSize)/ mulx;
                //float somefx = (float)(Math.Floor(1.2f / fractionOf0) * fractionOf0); // 1.0f
                //var fractionOf0 = (realplanetwidth / someglobalschunkmesh.planeSize)/ mulx;
                //float somefx = (float)(Math.Floor(1.275f / fractionOf0) * fractionOf0); // 1.25f
                //float somefx = (float)(Math.Floor(matrixtouchright.M41)); // 4.1 floored == 4.0f <==> 4.0f / numberOfInstancesPerObjectInWidth = 1
                //SCCS EXERCICES

                if (playerusebrush == 0)
                {

                    //for (int insti = 0; insti < ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances.Length; insti++) // ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances.Length
                    {

                        //Vector3 pivotpositionpickaxe = new Vector3(ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M41, ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M42, ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M43);
                        //Vector3 temppickaxetiplocation = new Vector3(ikarmvoxel[3]._player_r_hand_grab[0][0]._chunk.listofpickaxetipbytes[0].X, ikarmvoxel[3]._player_r_hand_grab[0][0]._chunk.listofpickaxetipbytes[0].Y, ikarmvoxel[3]._player_r_hand_grab[0][0]._chunk.listofpickaxetipbytes[0].Z);
                        //var MOVINGPOINTER = new Vector3(ikvoxelbody[0]._player_torso[0][0]._arrayOfInstances[insti]._ORIGINPOSITION.M41, ikvoxelbody[0]._player_torso[0][0]._arrayOfInstances[insti]._ORIGINPOSITION.M42, ikvoxelbody[0]._player_torso[0][0]._arrayOfInstances[insti]._ORIGINPOSITION.M43);

                        Vector3 temppickaxetiplocation = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43);
                        var MOVINGPOINTER = temppickaxetiplocation;// new Vector3(ikvoxelbody[0]._player_torso[0][0]._arrayOfInstances[insti]._ORIGINPOSITION.M41, ikvoxelbody[0]._player_torso[0][0]._arrayOfInstances[insti]._ORIGINPOSITION.M42, ikvoxelbody[0]._player_torso[0][0]._arrayOfInstances[insti]._ORIGINPOSITION.M43);

                        //worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M41




                        var rotposmatrix = somevoxelvirtualdesktop[0].currentWorldMatrix;//  worldmatrixinstancesvoxelsforcalculationsonly[0][0][19];// ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos;// _player_rght_shldr[0][0]._ORIGINPOSITION;

                        Quaternion somequat;
                        Quaternion.RotationMatrix(ref rotposmatrix, out somequat);

                        var direction_feet_forward_ori = sc_maths._getDirection(Vector3.ForwardRH, somequat);
                        var direction_feet_right_ori = sc_maths._getDirection(Vector3.Right, somequat);
                        var direction_feet_up_ori = sc_maths._getDirection(Vector3.Up, somequat);

                        var diffNormPosX = (MOVINGPOINTER.X) - temppickaxetiplocation.X;// ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M41;
                        var diffNormPosY = (MOVINGPOINTER.Y) - temppickaxetiplocation.Y;//ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M42;
                        var diffNormPosZ = (MOVINGPOINTER.Z) - temppickaxetiplocation.Z;//ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M43;

                        var pickaxetippoint = MOVINGPOINTER;

                        //var tempPoint = pickaxetippoint + (direction_feet_right_ori * (diffNormPosX));
                        //tempPoint = tempPoint + (direction_feet_up_ori * (diffNormPosY));
                        //tempPoint = tempPoint + (direction_feet_forward_ori * (diffNormPosZ));

                        //var MOVINGPOINTER1 = tempPoint + new Vector3(ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M41, ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M42, ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M43);
                        //var MOVINGPOINTER1 = new Vector3(ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M41, ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M42, ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M43);
                        var MOVINGPOINTER1 = temppickaxetiplocation;// new Vector3(ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M41, ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M42, ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M43);

                        //float somezvalue = ikarmvoxel[3]._player_r_hand_grab[0][0]._total_torso_height;

                        pickaxetippoint = MOVINGPOINTER1 + (direction_feet_up_ori * (-temppickaxetiplocation.Y * somevoxelvirtualdesktopglobals.planeSize));
                        pickaxetippoint = pickaxetippoint + (direction_feet_forward_ori * (-temppickaxetiplocation.Z * somevoxelvirtualdesktopglobals.planeSize));

                        //SET THE BYTE LOCATOR OBJECT TO THE LOCATION OF THE BYTE ON THE PICKAXE TIP IN ORDER TO HAVE A VISUAL ON WHERE THE ROUNDED BYTE LOCATOR IS
                        //SET THE BYTE LOCATOR OBJECT TO THE LOCATION OF THE BYTE ON THE PICKAXE TIP IN ORDER TO HAVE A VISUAL ON WHERE THE ROUNDED BYTE LOCATOR IS
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][1].M41 = pickaxetippoint.X;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][1].M42 = pickaxetippoint.Y;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][1].M43 = pickaxetippoint.Z;
                        //SET THE BYTE LOCATOR OBJECT TO THE LOCATION OF THE BYTE ON THE PICKAXE TIP IN ORDER TO HAVE A VISUAL ON WHERE THE ROUNDED BYTE LOCATOR IS
                        //SET THE BYTE LOCATOR OBJECT TO THE LOCATION OF THE BYTE ON THE PICKAXE TIP IN ORDER TO HAVE A VISUAL ON WHERE THE ROUNDED BYTE LOCATOR IS

                        //pivotpositionpickaxe = new Vector3(ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M41, ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M42, ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M43);
                        //temppickaxetiplocation = new Vector3(ikarmvoxel[3]._player_r_hand_grab[0][0]._chunk.listofpickaxetipbytes[0].X, ikarmvoxel[3]._player_r_hand_grab[0][0]._chunk.listofpickaxetipbytes[0].Y, ikarmvoxel[3]._player_r_hand_grab[0][0]._chunk.listofpickaxetipbytes[0].Z);
                        //MOVINGPOINTER = new Vector3(ikvoxelbody[0]._player_torso[0][0]._arrayOfInstances[insti]._ORIGINPOSITION.M41, ikvoxelbody[0]._player_torso[0][0]._arrayOfInstances[insti]._ORIGINPOSITION.M42, ikvoxelbody[0]._player_torso[0][0]._arrayOfInstances[insti]._ORIGINPOSITION.M43);

                        temppickaxetiplocation = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43);
                        MOVINGPOINTER = temppickaxetiplocation;// new Vector3(ikvoxelbody[0]._player_torso[0][0]._arrayOfInstances[insti]._ORIGINPOSITION.M41, ikvoxelbody[0]._player_torso[0][0]._arrayOfInstances[insti]._ORIGINPOSITION.M42, ikvoxelbody[0]._player_torso[0][0]._arrayOfInstances[insti]._ORIGINPOSITION.M43);


                        rotposmatrix = somevoxelvirtualdesktop[0].currentWorldMatrix;//  worldmatrixinstancesvoxelsforcalculationsonly[0][0][19];//ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos;// _player_rght_shldr[0][0]._ORIGINPOSITION;

                        //Quaternion somequat;
                        Quaternion.RotationMatrix(ref rotposmatrix, out somequat);

                        direction_feet_forward_ori = sc_maths._getDirection(Vector3.ForwardRH, somequat);
                        direction_feet_right_ori = sc_maths._getDirection(Vector3.Right, somequat);
                        direction_feet_up_ori = sc_maths._getDirection(Vector3.Up, somequat);

                        diffNormPosX = (MOVINGPOINTER.X) - temppickaxetiplocation.X;// ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M41;
                        diffNormPosY = (MOVINGPOINTER.Y) - temppickaxetiplocation.Y;//ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M42;
                        diffNormPosZ = (MOVINGPOINTER.Z) - temppickaxetiplocation.Z;//ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M43;

                        //pickaxetippoint = MOVINGPOINTER;

                        //var tempPoint = pickaxetippoint + (direction_feet_right_ori * (diffNormPosX));
                        //tempPoint = tempPoint + (direction_feet_up_ori * (diffNormPosY));
                        //tempPoint = tempPoint + (direction_feet_forward_ori * (diffNormPosZ));

                        //var MOVINGPOINTER1 = tempPoint + new Vector3(ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M41, ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M42, ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M43);
                        MOVINGPOINTER1 = temppickaxetiplocation;// new Vector3(ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M41, ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M42, ikarmvoxel[3]._player_r_hand_grab[0][0]._arrayOfInstances[insti].current_pos.M43);

                        //float somezvalue = ikarmvoxel[3]._player_r_hand_grab[0][0]._total_torso_height;

                        pickaxetippoint = MOVINGPOINTER1 + (direction_feet_up_ori * (-temppickaxetiplocation.Y * somevoxelvirtualdesktopglobals.planeSize)); // ikarmvoxel[3].voxel_general_size
                        pickaxetippoint = pickaxetippoint + (direction_feet_forward_ori * (-temppickaxetiplocation.Z * somevoxelvirtualdesktopglobals.planeSize)); //ikarmvoxel[3].voxel_general_size




                        //SET THE BYTE LOCATOR OBJECT TO THE LOCATION OF THE BYTE ON THE CHUNK IN ORDER TO HAVE A VISUAL ON WHERE THE BYTE LOCATOR IS IN CODE
                        //SET THE BYTE LOCATOR OBJECT TO THE LOCATION OF THE BYTE ON THE CHUNK IN ORDER TO HAVE A VISUAL ON WHERE THE BYTE LOCATOR IS IN CODE
                        //SET THE BYTE LOCATOR OBJECT TO THE LOCATION OF THE BYTE ON THE CHUNK IN ORDER TO HAVE A VISUAL ON WHERE THE BYTE LOCATOR IS IN CODE
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][1].M41 = pickaxetippoint.X;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][1].M42 = pickaxetippoint.Y;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][1].M43 = pickaxetippoint.Z;
                        //SET THE BYTE LOCATOR OBJECT TO THE LOCATION OF THE BYTE ON THE CHUNK IN ORDER TO HAVE A VISUAL ON WHERE THE BYTE LOCATOR IS IN CODE
                        //SET THE BYTE LOCATOR OBJECT TO THE LOCATION OF THE BYTE ON THE CHUNK IN ORDER TO HAVE A VISUAL ON WHERE THE BYTE LOCATOR IS IN CODE
                        //SET THE BYTE LOCATOR OBJECT TO THE LOCATION OF THE BYTE ON THE CHUNK IN ORDER TO HAVE A VISUAL ON WHERE THE BYTE LOCATOR IS IN CODE


                        float planeSize = somevoxelvirtualdesktopglobals.planeSize;

                        //float somesizedfx = (float)(Math.Floor(pickaxetippoint.X / planeSize) * planeSize); // 35 + 1 = 36
                        //float somesizedfy = (float)(Math.Floor(pickaxetippoint.Y / planeSize) * planeSize); // 
                        //float somesizedfz = (float)(Math.Floor(pickaxetippoint.Z / planeSize) * planeSize); //

                        //ORIGINAL MADE BY STEVE CHASSÉ
                        //int somefx = (int)Math.Abs(Math.Floor(((ikarmvoxel[3]._player_rght_hnd[0][0]._arrayOfInstances[insti].current_pos.M41) - somevoxelvirtualdesktop[0].currentWorldMatrix.M41) / planeSize)); // 35 + 1 = 36
                        //int somefy = (int)Math.Abs(Math.Floor(((ikarmvoxel[3]._player_rght_hnd[0][0]._arrayOfInstances[insti].current_pos.M42) - somevoxelvirtualdesktop[0].currentWorldMatrix.M42) / planeSize)); // 
                        //int somefz = (int)Math.Abs(Math.Floor(((ikarmvoxel[3]._player_rght_hnd[0][0]._arrayOfInstances[insti].current_pos.M43) - somevoxelvirtualdesktop[0].currentWorldMatrix.M43) / planeSize)); //
                        //ORIGINAL MADE BY STEVE CHASSÉ



                        int somefx = (int)Math.Abs(Math.Round(((pickaxetippoint.X) - somevoxelvirtualdesktop[0].currentWorldMatrix.M41) / planeSize)); // 35 + 1 = 36
                        int somefy = (int)Math.Abs(Math.Round(((pickaxetippoint.Y) - somevoxelvirtualdesktop[0].currentWorldMatrix.M42) / planeSize)); // 
                        int somefz = (int)Math.Abs(Math.Round(((pickaxetippoint.Z) - somevoxelvirtualdesktop[0].currentWorldMatrix.M43) / planeSize)); //


                        //somefx = (int)Math.Abs(Math.Round(((pickaxetippoint.X)) / planeSize)); // 35 + 1 = 36
                        //somefy = (int)Math.Abs(Math.Round(((pickaxetippoint.Y)) / planeSize)); // 
                        //somefz = (int)Math.Abs(Math.Round(((pickaxetippoint.Z)) / planeSize)); //

                        //if (somefx >= 0 && somefy >= 0 && somefz >= 0)
                        {
                            //BYTES INDEX FAST MODULO ALTERNATIVE FOUND ON A GOOGLE SEARCH WITH SOME BENCHMARKS AND IT SEEMED TO BE THAT LOOPING WAS FASTER THAN USING MODULO... DEPENDING MAYBE ON OTHER THINGS. ILL TEST LATER.
                            int theNumberx = somevoxelvirtualdesktopglobals.tinyChunkWidth;
                            int remainderbytesx = 0;
                            int totalTimesx = 0;

                            for (int ii = 0; ii <= somefx; ii++)
                            {
                                if (remainderbytesx == theNumberx)
                                {
                                    remainderbytesx = 0;
                                    totalTimesx++;
                                }
                                if (totalTimesx * theNumberx >= somefx) // >=?? why not only >
                                {
                                    break;
                                }
                                remainderbytesx++;
                            }

                            int theNumbery = somevoxelvirtualdesktopglobals.tinyChunkHeight;
                            int remainderbytesy = 0;
                            int totalTimesy = 0;

                            for (int ii = 0; ii <= somefy; ii++)
                            {
                                if (remainderbytesy == theNumbery)
                                {
                                    remainderbytesy = 0;
                                    totalTimesy++;
                                }
                                if (totalTimesy * theNumbery >= somefy) // >=?? why not only >
                                {
                                    break;
                                }
                                remainderbytesy++;
                            }

                            int theNumberz = somevoxelvirtualdesktopglobals.tinyChunkDepth;
                            int remainderbytesz = 0;
                            int totalTimesz = 0;

                            for (int ii = 0; ii <= somefz; ii++)
                            {
                                if (remainderbytesz == theNumberz)
                                {
                                    remainderbytesz = 0;
                                    totalTimesz++;
                                }
                                if (totalTimesz * theNumberz >= somefz) // >=?? why not only >
                                {
                                    break;
                                }
                                remainderbytesz++;
                            }
                            //BYTES INDEX 

                            //
                            int indexbytex = ((somefx - (totalTimesx * theNumberx)));
                            int indexbytey = ((somefy - (totalTimesy * theNumbery)));
                            int indexbytez = ((somefz - (totalTimesz * theNumberz)));
                            int indexofbyte = (indexbytex) + (somevoxelvirtualdesktopglobals.tinyChunkWidth) * ((indexbytey) + (somevoxelvirtualdesktopglobals.tinyChunkHeight) * (indexbytez));
                            //

                            /*//MESH INSTANCE INDEX FAST MODULO 
                            theNumberx = somevoxelvirtualdesktopglobals.tinyChunkWidth;
                            int remaindermeshinstx = 0;
                            totalTimesx = 0;

                            for (int ii = 0; ii <= somefx; ii++)
                            {
                                if (remaindermeshinstx == theNumberx)
                                {
                                    remaindermeshinstx = 0;
                                    totalTimesx++;
                                }
                                if (totalTimesx * theNumberx >= somefx) // >=?? why not only >
                                {
                                    break;
                                }
                                remaindermeshinstx++;
                            }

                            theNumbery = somevoxelvirtualdesktopglobals.tinyChunkHeight;
                            int remaindermeshinsty = 0;
                            totalTimesy = 0;

                            for (int ii = 0; ii <= somefy; ii++)
                            {
                                if (remaindermeshinsty == theNumbery)
                                {
                                    remaindermeshinsty = 0;
                                    totalTimesy++;
                                }
                                if (totalTimesy * theNumbery >= somefy) // >=?? why not only >
                                {
                                    break;
                                }
                                remaindermeshinsty++;
                            }

                            theNumberz = somevoxelvirtualdesktopglobals.tinyChunkDepth;  //somevoxelvirtualdesktopglobals.tinyChunkDepth;
                            int remaindermeshinstz = 0;
                            totalTimesz = 0;

                            for (int ii = 0; ii <= somefz; ii++) // 35
                            {
                                if (remaindermeshinstz == theNumberz) //16
                                {
                                    remaindermeshinstz = 0;
                                    totalTimesz++;
                                }
                                if (totalTimesz * theNumberz >= somefz) // >=?? why not only >
                                {
                                    break;
                                }
                                remaindermeshinstz++;
                            }
                            //MESH INSTANCE INDEX FAST MODULO*/

                            //
                            int indexofmeshinstx = totalTimesx;// ((somefx - (totalTimesx * theNumberx))); // 35 - 30 = 5 
                            int indexofmeshinsty = totalTimesy;// ((somefy - (totalTimesy * theNumbery)));
                            int indexofmeshinstz = totalTimesz;// ((somefz - (totalTimesz * theNumberz)));
                                                               //int indexofmeshinstx = totalTimesx;// ((somefx - (totalTimesx * theNumberx))); // 35 - 30 = 5 
                                                               //int indexofmeshinsty = totalTimesy;//  ((somefy - (totalTimesy * theNumbery))); 
                                                               //int indexofmeshinstz = totalTimesz;// ((somefz - (totalTimesz * theNumberz)));
                                                               //int indexofmeshinstx = ((somefx - (totalTimesx * theNumberx))); // 35 - 30 = 5 
                                                               //int indexofmeshinsty = ((somefy - (totalTimesy * theNumbery)));
                                                               //int indexofmeshinstz = ((somefz - (totalTimesz * theNumberz)));


                            /*if (indexofmeshinstx >= somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth)
                            {
                                indexofmeshinstx = indexofmeshinstx % somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth;
                            }
                            if (indexofmeshinsty >= somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight)
                            {
                                indexofmeshinsty = indexofmeshinsty % somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight;
                            }
                            if (indexofmeshinstz >= somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth)
                            {
                                indexofmeshinstz = indexofmeshinstz % somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth;
                            }*/

                            int indexofmeshinst = (indexofmeshinstx) + (somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth) * ((indexofmeshinsty) + (somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight) * (indexofmeshinstz));
                            //


                            /*//MESH ZERO INDEX FAST MODULO 
                            theNumberx = somevoxelvirtualdesktopglobals.tinyChunkDepth * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth;
                            int remaindermeshzerox = 0;
                            totalTimesx = 0;

                            for (int ii = 0; ii <= somefx; ii++)
                            {
                                if (remaindermeshzerox == theNumberx)
                                {
                                    remaindermeshzerox = 0;
                                    totalTimesx++;
                                }
                                if (totalTimesx * theNumberx >= somefx) // >=?? why not only >
                                {
                                    break;
                                }
                                remaindermeshzerox++;
                            }

                            theNumbery = somevoxelvirtualdesktopglobals.tinyChunkDepth * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth;
                            int remaindermeshzeroy = 0;
                            totalTimesy = 0;

                            for (int ii = 0; ii <= somefy; ii++)
                            {
                                if (remaindermeshzeroy == theNumbery)
                                {
                                    remaindermeshzeroy = 0;
                                    totalTimesy++;
                                }
                                if (totalTimesy * theNumbery >= somefy) // >=?? why not only >
                                {
                                    break;
                                }
                                remaindermeshzeroy++;
                            }

                            theNumberz = somevoxelvirtualdesktopglobals.tinyChunkDepth * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth;  //somevoxelvirtualdesktopglobals.tinyChunkDepth;
                            int remaindermeshzeroz = 0;
                            totalTimesz = 0;

                            for (int ii = 0; ii <= somefz; ii++)
                            {
                                if (remaindermeshzeroz == theNumberz)
                                {
                                    remaindermeshzeroz = 0;
                                    totalTimesz++;
                                }
                                if (totalTimesz * theNumberz >= somefz) // >=?? why not only >
                                {
                                    break;
                                }
                                remaindermeshzeroz++;
                            }*/
                            //MESH ZERO INDEX FAST MODULO 


                            if (totalTimesx >= somevoxelvirtualdesktopglobals.numberOfObjectInWidth)
                            {
                                totalTimesx = totalTimesx % somevoxelvirtualdesktopglobals.numberOfObjectInWidth;
                            }
                            if (totalTimesy >= somevoxelvirtualdesktopglobals.numberOfObjectInHeight)
                            {
                                totalTimesy = totalTimesy % somevoxelvirtualdesktopglobals.numberOfObjectInHeight;
                            }
                            if (totalTimesz >= somevoxelvirtualdesktopglobals.numberOfObjectInDepth)
                            {
                                totalTimesz = totalTimesz % somevoxelvirtualdesktopglobals.numberOfObjectInDepth;
                            }



                            //
                            int indexmeshzerox = totalTimesx;//((somefx - (totalTimesx * theNumberx)));
                            int indexmeshzeroy = totalTimesy;//((somefy - (totalTimesy * theNumbery)));
                            int indexmeshzeroz = totalTimesz;//((somefz - (totalTimesz * theNumberz)));
                            int indexofmeshzero = (indexmeshzerox) + (somevoxelvirtualdesktopglobals.numberOfObjectInWidth) * ((indexmeshzeroy) + (somevoxelvirtualdesktopglobals.numberOfObjectInHeight) * (indexmeshzeroz));
                            //


                            //MAIN OBJECT INDEX FAST MODULO 
                            theNumberx = somevoxelvirtualdesktopglobals.tinyChunkWidth * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * somevoxelvirtualdesktopglobals.numberOfObjectInWidth;
                            int remaindermainobjectx = 0;
                            totalTimesx = 0;

                            for (int ii = 0; ii <= somefx; ii++)
                            {
                                if (remaindermainobjectx == theNumberx)
                                {
                                    remaindermainobjectx = 0;
                                    totalTimesx++;
                                }
                                if (totalTimesx * theNumberx >= somefx) // >=?? why not only >
                                {
                                    break;
                                }
                                remaindermainobjectx++;
                            }

                            theNumbery = somevoxelvirtualdesktopglobals.tinyChunkHeight * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * somevoxelvirtualdesktopglobals.numberOfObjectInHeight;
                            int remaindermainobjecty = 0;
                            totalTimesy = 0;

                            for (int ii = 0; ii <= somefy; ii++)
                            {
                                if (remaindermainobjecty == theNumbery)
                                {
                                    remaindermainobjecty = 0;
                                    totalTimesy++;
                                }
                                if (totalTimesy * theNumbery >= somefy) // >=?? why not only >
                                {
                                    break;
                                }
                                remaindermainobjecty++;
                            }

                            theNumberz = somevoxelvirtualdesktopglobals.tinyChunkDepth * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth * somevoxelvirtualdesktopglobals.numberOfObjectInDepth;  //somevoxelvirtualdesktopglobals.tinyChunkDepth;
                            int remaindermainobjectz = 0;
                            totalTimesz = 0;

                            for (int ii = 0; ii <= somefz; ii++)
                            {
                                if (remaindermainobjectz == theNumberz)
                                {
                                    remaindermainobjectz = 0;
                                    totalTimesz++;
                                }
                                if (totalTimesz * theNumberz >= somefz) // >=?? why not only >
                                {
                                    break;
                                }
                                remaindermainobjectz++;
                            }
                            //MAIN OBJECT INDEX FAST MODULO 


                            if (totalTimesx >= somevoxelvirtualdesktopw)
                            {
                                totalTimesx = totalTimesx % somevoxelvirtualdesktopw;
                            }
                            if (totalTimesy >= somevoxelvirtualdesktoph)
                            {
                                totalTimesy = totalTimesy % somevoxelvirtualdesktoph;
                            }
                            if (totalTimesz >= somevoxelvirtualdesktopd)
                            {
                                totalTimesz = totalTimesz % somevoxelvirtualdesktopd;
                            }

                            //
                            //int indexmainobjectx = totalTimesx; //((somefx - (totalTimesx * theNumberx)));
                            //int indexmainobjecty = totalTimesy; //((somefy - (totalTimesy * theNumbery)));
                            //int indexmainobjectz = totalTimesz; //((somefz - (totalTimesz * theNumberz)));
                            //int indexmainobjectx = ((somefx - (totalTimesx * theNumberx)));
                            //int indexmainobjecty = ((somefy - (totalTimesy * theNumbery)));
                            //int indexmainobjectz = ((somefz - (totalTimesz * theNumberz)));
                            int indexmainobjectx = totalTimesx;// ((somefx - (totalTimesx * theNumberx)));
                            int indexmainobjecty = totalTimesy;// ((somefy - (totalTimesy * theNumbery)));
                            int indexmainobjectz = totalTimesz;// ((somefz - (totalTimesz * theNumberz)));

                            int indexofmainobject = (indexmainobjectx) + (somevoxelvirtualdesktopw) * ((indexmainobjecty) + (somevoxelvirtualdesktoph) * (indexmainobjectz));
                            //

                            //int diffx = (int)(Math.Floor(sccs.scgraphics.scupdate._rightTouchMatrix.M41 - somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].somechunk[indexofmeshinst].somechunkpos.X));
                            //int diffy = (int)(Math.Floor(sccs.scgraphics.scupdate._rightTouchMatrix.M42 - somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].somechunk[indexofmeshinst].somechunkppixelmovedbufferregionaos.Y));
                            //int diffz = (int)(Math.Floor(sccs.scgraphics.scupdate._rightTouchMatrix.M43 - somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].somechunk[indexofmeshinst].somechunkpos.Z));

                            //CONSOLE DEBUG
                            //CONSOLE DEBUG
                            //CONSOLE DEBUG

                            if (consolewritecounter >= consolewritecountermax)
                            {
                                if (consolewritecounterswtc == 0)
                                {

                                    consolewritecounterswtc = 1;
                                }

                                /*for (int sc = 0; sc < 30; sc++) //Console.WindowWidth - 1
                                {
                                    Console.SetCursorPosition(sc, 0);
                                    Console.WriteLine(" ");
                                    //Console.SetCursorPosition(sc, 1);
                                    //Console.WriteLine(" ");
                                    //Console.SetCursorPosition(sc, 1);
                                    //Console.WriteLine(" ");
                                    //Console.SetCursorPosition(sc, 3);
                                    //Console.WriteLine(" ");
                                    //Console.SetCursorPosition(sc, 4);
                                    //Console.WriteLine(" ");
                                }*/

                                //Console.SetCursorPosition(0, 0);
                                //Console.WriteLine("x:" + +mainx + "/y:" + mainy + "/z:" + mainz);

                                //Console.SetCursorPosition(0, 1);
                                //Console.WriteLine("secx:" + +secx + "/secy:" + secy + "/secz:" + secz);

                                //Console.SetCursorPosition(0, 0);
                                //Console.WriteLine("somefx:" + +somefx + "/somefy:" + somefy + "/somefz:" + somefz);

                                //Console.SetCursorPosition(0, 0);
                                //Console.WriteLine("fobjmeshx:" + +fobjmeshx + "/fobjmeshy:" + fobjmeshy + "/fobjmeshz:" + fobjmeshz);

                                //Console.Title = "fobjmeshx:" + +fobjmeshx + "/fobjmeshy:" + fobjmeshy + "/fobjmeshz:" + fobjmeshz;
                                //Console.Title = "fobjmeshx:" + +fobjmeshx + "/fobjmeshy:" + fobjmeshy + "/fobjmeshz:" + fobjmeshz;
                                //Console.Title = "finstx:" + +finstx + "/finsty:" + finsty + "/finstz:" + finstz;
                                //Console.Title = "mainx:" + mainx + "/mainy:" + mainy + "/mainz:" + mainz;
                                //Console.Title = "someothermainx:" + someothermainx + "/someothermainy:" + someothermainy + "/someothermainz:" + someothermainz + "/fobjmeshx:" + +fobjmeshx + "/fobjmeshy:" + fobjmeshy + "/fobjmeshz:" + fobjmeshz;
                                //Console.Title = "/someothermainx:" + someothermainx + "/someothermainy:" + someothermainy + "/someothermainz:" + someothermainz +"/fobjmeshmainx:" + fobjmeshmainx + "/fobjmeshmainy:" + fobjmeshmainy + "/fobjmeshmainz:" + fobjmeshmainz + "/fobjmeshx:" + +fobjmeshx + "/fobjmeshy:" + fobjmeshy + "/fobjmeshz:" + fobjmeshz;

                                //Console.Title = "someinstx:" + (int)someinstx + "/someinsty:" + (int)someinsty + "/someinstz:" + (int)someinstz;

                                //Console.Title = "somefx:" + +somefx + "/somefy:" + somefy + "/somefz:" + somefz;


                                //Console.Title = "indexbytex:" + (int)indexbytex + "/indexbytey:" + (int)indexbytey + "/indexbytez:" + (int)indexbytez;
                                //Console.Title = "indexofmeshinstx:" + (int)indexofmeshinstx + "/indexofmeshinsty:" + (int)indexofmeshinsty + "/indexofmeshinstz:" + (int)indexofmeshinstz;


                                //Console.Title = "/tx:" + totalTimesx + "/ty:" + totalTimesy + "/tz:" + totalTimesz + "/rx:" + remaindermainobjectx + "/ry:" + remaindermainobjecty + "/rz:" + remaindermainobjectz + "/mx:" + indexmainobjectx + "/my:" + indexmainobjecty + "/mz:" + indexmainobjectz + "/msx:" + (int)indexmeshzerox + "/msy:" + (int)indexmeshzeroy + "/msz:" + (int)indexmeshzeroz + "/msix:" + (int)indexofmeshinstx + "/msiy:" + (int)indexofmeshinsty + "/msiz:" + (int)indexofmeshinstz + "/indexbytex:" + (int)indexbytex + "/indexbytey:" + (int)indexbytey + "/indexbytez:" + (int)indexbytez;


                                //Console.Title = "/indexmeshzerox:" + (int)indexmeshzerox + "/indexmeshzeroy:" + (int)indexmeshzeroy + "/indexmeshzeroz:" + (int)indexmeshzeroz;


                                consolewritecounter = 0;
                            }
                            consolewritecounter++;

                            //CONSOLE DEBUG
                            //CONSOLE DEBUG
                            //CONSOLE DEBUG

                            //indexofmainobject = someothermainindex;

                            if (indexofmainobject >= 0 && indexofmainobject < somevoxelvirtualdesktopw * somevoxelvirtualdesktoph * somevoxelvirtualdesktopd)
                            {
                                if (indexofmeshzero >= 0 && indexofmeshzero < somevoxelvirtualdesktopglobals.numberOfObjectInWidth * somevoxelvirtualdesktopglobals.numberOfObjectInHeight * somevoxelvirtualdesktopglobals.numberOfObjectInDepth)
                                {
                                    if (indexofmeshinst >= 0 && indexofmeshinst < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth)
                                    {
                                        someinstancebytesindex = indexofbyte;

                                        if (someinstancebytesindex >= 0 && someinstancebytesindex < somevoxelvirtualdesktopglobals.tinyChunkWidth * somevoxelvirtualdesktopglobals.tinyChunkHeight * somevoxelvirtualdesktopglobals.tinyChunkDepth)
                                        {
                                            int currentIndex = someinstancebytesindex;



                                            int someOtherIndex = currentIndex;

                                            double currentMapData = -1;

                                            int chosenmap = 0;

                                            int somemul = 0;


                                            if (currentIndex >= 0 && currentIndex <= somevoxelvirtualdesktopglobals.tinyChunkWidth * somevoxelvirtualdesktopglobals.tinyChunkHeight * somevoxelvirtualdesktopglobals.tinyChunkDepth)
                                            {
                                                /*if (currentIndex >= 0 && currentIndex <= 3)
                                                {
                                                    currentMapData = (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M11;//input.one;                                                                                                                                                                                                 //// Program.MessageBox((IntPtr)0, "sccs:" + "map:" + (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M11 , "sccs message 0", 0);

                                                    if (currentIndex >= 0 && currentIndex <= 1)
                                                    {
                                                        int somemax = 1;
                                                        someOtherIndex = 1 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    else if (currentIndex >= 2 && currentIndex <= 3)
                                                    {
                                                        int somemax = 3;
                                                        someOtherIndex = 0 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    chosenmap = 0;
                                                }
                                                else if (currentIndex >= 4 && currentIndex <= 7)
                                                {
                                                    currentMapData = (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M12;//input.oneTwo;
                                                                                                                                                                                                                  //// Program.MessageBox((IntPtr)0, "sccs:" + "map:" + (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M12 , "sccs message 0", 0);

                                                    if (currentIndex >= 4 && currentIndex <= 5)
                                                    {
                                                        int somemax = 5;
                                                        someOtherIndex = 1 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    else if (currentIndex >= 6 && currentIndex <= 7)
                                                    {
                                                        int somemax = 7;
                                                        someOtherIndex = 0 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    chosenmap = 1;
                                                }
                                                else if (currentIndex >= 8 && currentIndex <= 11)
                                                {
                                                    currentMapData = (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M13;
                                                    //// Program.MessageBox((IntPtr)0, "sccs:" + "map:" + (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M13 , "sccs message 0", 0);

                                                    if (currentIndex >= 8 && currentIndex <= 9)
                                                    {
                                                        int somemax = 9;
                                                        someOtherIndex = 1 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    else if (currentIndex >= 10 && currentIndex <= 11)
                                                    {
                                                        int somemax = 11;
                                                        someOtherIndex = 0 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    chosenmap = 2;
                                                }

                                                else if (currentIndex >= 12 && currentIndex <= 15)
                                                {
                                                    currentMapData = (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M14;//input.twoTwo;
                                                                                                                                                                                                                  //// Program.MessageBox((IntPtr)0, "sccs:" + "map:" + (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M14 , "sccs message 0", 0);

                                                    if (currentIndex >= 12 && currentIndex <= 13)
                                                    {
                                                        int somemax = 13;
                                                        someOtherIndex = 1 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    else if (currentIndex >= 14 && currentIndex <= 15)
                                                    {
                                                        int somemax = 15;
                                                        someOtherIndex = 0 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    chosenmap = 3;
                                                }
                                                else if (currentIndex >= 16 && currentIndex <= 19)
                                                {
                                                    currentMapData = (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M21;//input.three;
                                                                                                                                                                                                                  //// Program.MessageBox((IntPtr)0, "sccs:" + "map:" + (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M21 , "sccs message 0", 0);

                                                    if (currentIndex >= 16 && currentIndex <= 17)
                                                    {
                                                        int somemax = 17;
                                                        someOtherIndex = 1 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    else if (currentIndex >= 18 && currentIndex <= 19)
                                                    {
                                                        int somemax = 19;
                                                        someOtherIndex = 0 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    chosenmap = 4;
                                                }
                                                else if (currentIndex >= 20 && currentIndex <= 23)
                                                {
                                                    currentMapData = (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M22; //input.mapmatrix1.y;//input.threeTwo;
                                                                                                                                                                                                                   //// Program.MessageBox((IntPtr)0, "sccs:" + "map:" + (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M22 , "sccs message 0", 0);

                                                    if (currentIndex >= 20 && currentIndex <= 21)
                                                    {
                                                        int somemax = 21;
                                                        someOtherIndex = 1 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    else if (currentIndex >= 22 && currentIndex <= 23)
                                                    {
                                                        int somemax = 23;
                                                        someOtherIndex = 0 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    chosenmap = 5;
                                                }
                                                else if (currentIndex >= 24 && currentIndex <= 27)
                                                {
                                                    currentMapData = (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M23; //input.mapmatrix1.z;//input.four;
                                                                                                                                                                                                                   //// Program.MessageBox((IntPtr)0, "sccs:" + "map:" + (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M23 , "sccs message 0", 0);

                                                    if (currentIndex >= 24 && currentIndex <= 25)
                                                    {
                                                        int somemax = 25;
                                                        someOtherIndex = 1 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    else if (currentIndex >= 26 && currentIndex <= 27)
                                                    {
                                                        int somemax = 27;
                                                        someOtherIndex = 0 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    chosenmap = 6;
                                                }
                                                else if (currentIndex >= 28 && currentIndex <= 31)
                                                {
                                                    currentMapData = (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M24; // input.mapmatrix1.w;//input.fourTwo;
                                                                                                                                                                                                                   //// Program.MessageBox((IntPtr)0, "sccs:" + "map:" + (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M24 , "sccs message 0", 0);

                                                    if (currentIndex >= 28 && currentIndex <= 29)
                                                    {
                                                        int somemax = 29;
                                                        someOtherIndex = 1 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    else if (currentIndex >= 30 && currentIndex <= 31)
                                                    {
                                                        int somemax = 31;
                                                        someOtherIndex = 0 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    chosenmap = 7;
                                                }
                                                else if (currentIndex >= 32 && currentIndex <= 35)
                                                {
                                                    currentMapData = (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M31; // input.mapmatrix1.w;//input.fourTwo;
                                                                                                                                                                                                                   //// Program.MessageBox((IntPtr)0, "sccs:" + "map:" + (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M31, "sccs message 0", 0);

                                                    if (currentIndex >= 32 && currentIndex <= 33)
                                                    {
                                                        int somemax = 33;
                                                        someOtherIndex = 1 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    else if (currentIndex >= 34 && currentIndex <= 35)
                                                    {
                                                        int somemax = 35;
                                                        someOtherIndex = 0 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    chosenmap = 8;
                                                }
                                                else if (currentIndex >= 36 && currentIndex <= 39)
                                                {
                                                    currentMapData = (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M32; // input.mapmatrix1.w;//input.fourTwo;
                                                                                                                                                                                                                   //// Program.MessageBox((IntPtr)0, "sccs:" + "map:" + (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M32, "sccs message 0", 0);

                                                    if (currentIndex >= 36 && currentIndex <= 37)
                                                    {
                                                        int somemax = 37;
                                                        someOtherIndex = 1 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    else if (currentIndex >= 38 && currentIndex <= 39)
                                                    {
                                                        int somemax = 39;
                                                        someOtherIndex = 0 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    chosenmap = 9;
                                                }
                                                else if (currentIndex >= 40 && currentIndex <= 43)
                                                {
                                                    currentMapData = (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M33; // input.mapmatrix1.w;//input.fourTwo;
                                                                                                                                                                                                                   //// Program.MessageBox((IntPtr)0, "sccs:" + "map:" + (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M33, "sccs message 0", 0);

                                                    if (currentIndex >= 40 && currentIndex <= 41)
                                                    {
                                                        int somemax = 41;
                                                        someOtherIndex = 1 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    else if (currentIndex >= 42 && currentIndex <= 43)
                                                    {
                                                        int somemax = 43;
                                                        someOtherIndex = 0 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    chosenmap = 10;
                                                }
                                                else if (currentIndex >= 44 && currentIndex <= 47)
                                                {
                                                    currentMapData = (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M34; // input.mapmatrix1.w;//input.fourTwo;
                                                                                                                                                                                                                   //// Program.MessageBox((IntPtr)0, "sccs:" + "map:" + (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M34, "sccs message 0", 0);

                                                    if (currentIndex >= 44 && currentIndex <= 45)
                                                    {
                                                        int somemax = 45;
                                                        someOtherIndex = 1 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    else if (currentIndex >= 46 && currentIndex <= 47)
                                                    {
                                                        int somemax = 47;
                                                        someOtherIndex = 0 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    chosenmap = 11;
                                                }
                                                else if (currentIndex >= 48 && currentIndex <= 51)
                                                {
                                                    currentMapData = (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M41; // input.mapmatrix1.w;//input.fourTwo;
                                                                                                                                                                                                                   //// Program.MessageBox((IntPtr)0, "sccs:" + "map:" + (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M41, "sccs message 0", 0);

                                                    if (currentIndex >= 48 && currentIndex <= 49)
                                                    {
                                                        int somemax = 49;
                                                        someOtherIndex = 1 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    else if (currentIndex >= 50 && currentIndex <= 51)
                                                    {
                                                        int somemax = 51;
                                                        someOtherIndex = 0 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    chosenmap = 12;
                                                }
                                                else if (currentIndex >= 52 && currentIndex <= 55)
                                                {
                                                    currentMapData = (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M42; // input.mapmatrix1.w;//input.fourTwo;
                                                                                                                                                                                                                   //// Program.MessageBox((IntPtr)0, "sccs:" + "map:" + (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M42, "sccs message 0", 0);

                                                    if (currentIndex >= 52 && currentIndex <= 53)
                                                    {
                                                        int somemax = 53;
                                                        someOtherIndex = 1 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    else if (currentIndex >= 54 && currentIndex <= 55)
                                                    {
                                                        int somemax = 55;
                                                        someOtherIndex = 0 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    chosenmap = 13;
                                                }
                                                else if (currentIndex >= 56 && currentIndex <= 59)
                                                {
                                                    currentMapData = (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M43; // input.mapmatrix1.w;//input.fourTwo;
                                                                                                                                                                                                                   //// Program.MessageBox((IntPtr)0, "sccs:" + "map:" + (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M43 , "sccs message 0", 0);

                                                    if (currentIndex >= 56 && currentIndex <= 57)
                                                    {
                                                        int somemax = 57;
                                                        someOtherIndex = 1 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    else if (currentIndex >= 58 && currentIndex <= 59)
                                                    {
                                                        int somemax = 59;
                                                        someOtherIndex = 0 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    chosenmap = 14;
                                                }
                                                else if (currentIndex >= 60 && currentIndex <= 63)
                                                {
                                                    currentMapData = (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M44; // input.mapmatrix1.w;//input.fourTwo;
                                                                                                                                                                                                                   //// Program.MessageBox((IntPtr)0, "sccs:" + "map:" + (double)somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M44 , "sccs message 0", 0);

                                                    if (currentIndex >= 60 && currentIndex <= 61)
                                                    {
                                                        int somemax = 61;
                                                        someOtherIndex = 1 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    else if (currentIndex >= 62 && currentIndex <= 63)
                                                    {
                                                        int somemax = 63;
                                                        someOtherIndex = 0 + ((somemax - someOtherIndex) * 2);
                                                    }
                                                    chosenmap = 15;
                                                }
                                                

                                                //someOtherIndex = 2;

                                                double someothermul0 = 10.0;
                                                double someothermul1 = 1.0;

                                                if (someOtherIndex == 0)
                                                {
                                                    someothermul0 = 100.0;
                                                    someothermul1 = 0.1;
                                                }
                                                else if (someOtherIndex == 1)
                                                {
                                                    someothermul0 = 1000.0;
                                                    someothermul1 = 0.01;
                                                }
                                                else if (someOtherIndex == 2)
                                                {
                                                    someothermul0 = 10000.0;
                                                    someothermul1 = 0.001;
                                                }
                                                else if (someOtherIndex == 3)
                                                {
                                                    someothermul0 = 100000.0;
                                                    someothermul1 = 0.0001;
                                                }

                                                double[] arrayOfDigits = new double[4];// = {0,0,0,0,0,0,0,0,0};

                                                //double someorimap = 51234;
                                                double somemap = currentMapData;// 51234; //currentMapData

                                                double tempsomemap;
                                                double someotherbyte;

                                                for (int i = 0; i < 4; i++) //111111111 // 6th digit //someOtherIndex
                                                {
                                                    tempsomemap = somemap;
                                                    somemap = (somemap * 0.1);
                                                    //Program.MessageBox((IntPtr)0, "/somemap:" + somemap, "sccs message 1", 0);
                                                    var somevalue = Math.Floor((double)(int)((somemap - (int)somemap) * someothermul0)) * someothermul1;
                                                    somevalue = somevalue - (Math.Floor(somevalue * 0.1) * 10);

                                                    arrayOfDigits[i] = somevalue;

                                                    //Program.MessageBox((IntPtr)0, "/arrayOfDigits[i]:" + arrayOfDigits[i] + "/somevalue:" + somevalue, "sccs message 1", 0);
                                                }




                                                double[] arrayOfDigits1 = new double[5];// = {0,0,0,0,0,0,0,0,0};

                                                //double someorimap = 51234;
                                                double somemap1 = currentMapData;// 51234; //currentMapData

                                                double tempsomemap1;
                                                double someotherbyte1;

                                                for (int i = 0; i < 5; i++) //111111111 // 6th digit //someOtherIndex
                                                {
                                                    tempsomemap1 = somemap1;
                                                    somemap1 = (somemap1 * 0.1);
                                                    //Program.MessageBox((IntPtr)0, "/somemap:" + somemap, "sccs message 1", 0);
                                                    var somevalue1 = Math.Floor((double)(int)((somemap1 - (int)somemap1) * 100000.0)) * 0.0001;
                                                    somevalue1 = somevalue1 - (Math.Floor(somevalue1 * 0.1) * 10);

                                                    arrayOfDigits1[i] = somevalue1;

                                                    //Program.MessageBox((IntPtr)0, "/arrayOfDigits[i]:" + arrayOfDigits[i] + "/somevalue:" + somevalue, "sccs message 1", 0);
                                                }

                                                //Program.MessageBox((IntPtr)0, "/arrayOfDigits1[i]:" + arrayOfDigits1[arrayOfDigits1.Length-1], "sccs message 1", 0);

                                                var someotherindex1 = 3 - someOtherIndex;

                                                if (someOtherIndex == 0)
                                                {
                                                    someothermul0 = 10.0;
                                                    someothermul1 = 1.0;
                                                }
                                                else if (someOtherIndex == 1)
                                                {
                                                    someothermul0 = 100.0;
                                                    someothermul1 = 0.1;
                                                }
                                                else if (someOtherIndex == 2)
                                                {
                                                    someothermul0 = 1000.0;
                                                    someothermul1 = 0.01;
                                                }
                                                else if (someOtherIndex == 3)
                                                {
                                                    someothermul0 = 10000.0;
                                                    someothermul1 = 0.001;
                                                }

                                                //currentMapData = 51234.0;
                                                currentMapData *= 0.0001f;
                                                currentMapData = Math.Round(currentMapData * 100000) * 0.00001; // 5.1111

                                                double double_value = currentMapData;
                                                double double_result = ((double_value - Math.Floor(double_value)) * someothermul0) - Math.Floor((Math.Floor(Math.Floor((double_value - Math.Floor(double_value)) * someothermul0) * 0.1f) * 10));// == 0.345f


                                                */




                                                //somevoxelvirtualdesktoppriminstance[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].somechunk[indexofmeshinst].somechunkpos.X
                                                //Matrix worldmatrixofvoxelobject = somevoxelvirtualdesktop[0].currentWorldMatrix;
                                                //somevoxelvirtualdesktoppriminstance[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].somechunk[indexofmeshinst].somechunkpos = 
                                                Vector3 somechunkbyteposition = new Vector3(somevoxelvirtualdesktop[0].currentWorldMatrix.M41, somevoxelvirtualdesktop[0].currentWorldMatrix.M42, somevoxelvirtualdesktop[0].currentWorldMatrix.M43);

                                                Matrix worldmatrixofvoxelobject = somevoxelvirtualdesktop[0].currentWorldMatrix;// somevoxelvirtualdesktop[indexofmainobject].worldmatofobj;
                                                Quaternion somedirquat;
                                                Quaternion.RotationMatrix(ref worldmatrixofvoxelobject, out somedirquat);

                                                var dirInstanceRight = -sc_maths._newgetdirleft(somedirquat);
                                                var dirInstanceUp = sc_maths._newgetdirup(somedirquat);
                                                var dirInstanceForward = sc_maths._newgetdirforward(somedirquat);

                                                Vector3 somechunkbyteposition1 = new Vector3(somevoxelvirtualdesktop[indexofmainobject].worldmatofobj.M41, somevoxelvirtualdesktop[indexofmainobject].worldmatofobj.M42, somevoxelvirtualdesktop[indexofmainobject].worldmatofobj.M43);

                                                Matrix worldmatrixofvoxelobject1 = somevoxelvirtualdesktop[0].currentWorldMatrix;//somevoxelvirtualdesktop[indexofmainobject].worldmatofobj; //Matrix.Identity;// 
                                                Quaternion.RotationMatrix(ref worldmatrixofvoxelobject1, out somedirquat);

                                                var dirInstanceRight1 = sc_maths._newgetdirleft(somedirquat);
                                                var dirInstanceUp1 = sc_maths._newgetdirup(somedirquat);
                                                var dirInstanceForward1 = sc_maths._newgetdirforward(somedirquat);

                                                float somemulsize = planeSize * 2;
                                                float somemulsize1 = planeSize;


                                                //float somemulsizemainobjectx = 1;// / somevoxelvirtualdesktopw;// somevoxelvirtualdesktopglobals.numberOfObjectInHeight;// (planeSize * 10) * 0.5f;
                                                //float somemulsizemainobjecty = 1;// / somevoxelvirtualdesktoph;// somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight;// (planeSize * 10) * 0.5f;
                                                //float somemulsizemainobjectz = 1;// / somevoxelvirtualdesktopd;// somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth;// (planeSize * 10) * 0.5f;

                                                //float somemulsizemainsubmeshx = 1;// / somevoxelvirtualdesktopglobals.numberOfObjectInWidth;// (planeSize * 10) * 0.5f;
                                                //float somemulsizemainsubmeshy = 1;// / somevoxelvirtualdesktopglobals.numberOfObjectInHeight;// (planeSize * 10) * 0.5f;
                                                //float somemulsizemainsubmeshz = 1;// / somevoxelvirtualdesktopglobals.numberOfObjectInDepth;// (planeSize * 10) * 0.5f;

                                                //float somemulsizemainsubmeshinstx = 1;// / somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth;// (planeSize * 10) * 0.5f;
                                                //float somemulsizemainsubmeshinsty = 1;// / somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight;// (planeSize * 10) * 0.5f;
                                                //float somemulsizemainsubmeshinstz = 1;// / somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth;// (planeSize * 10) * 0.5f;

                                                //float somemulsizemainsubmeshinstbytex = 1;// / somevoxelvirtualdesktopglobals.tinyChunkWidth;// (planeSize * 10) * 0.5f;
                                                //float somemulsizemainsubmeshinstbytey = 1;// / somevoxelvirtualdesktopglobals.tinyChunkHeight;// (planeSize * 10) * 0.5f;
                                                //float somemulsizemainsubmeshinstbytez = 1;// / somevoxelvirtualdesktopglobals.tinyChunkDepth;// (planeSize * 10) * 0.5f;

                                                float somemulsizemainobjectx = 1.0f / (float)somevoxelvirtualdesktopw;// / somechunkkeyboardw;// somevoxelvirtualdesktopglobals.numberOfObjectInHeight;// (planeSize * 10) * 0.5f;
                                                float somemulsizemainobjecty = 1.0f / (float)somevoxelvirtualdesktoph;// / somechunkkeyboardh;// somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight;// (planeSize * 10) * 0.5f;
                                                float somemulsizemainobjectz = 1.0f / (float)somevoxelvirtualdesktopd;// / somechunkkeyboardd;// somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth;// (planeSize * 10) * 0.5f;

                                                float somemulsizemainsubmeshx = 1.0f / (float)somevoxelvirtualdesktopglobals.numberOfObjectInWidth;// / somevoxelvirtualdesktopglobals.numberOfObjectInWidth;// (planeSize * 10) * 0.5f;
                                                float somemulsizemainsubmeshy = 1.0f / (float)somevoxelvirtualdesktopglobals.numberOfObjectInHeight;// / somevoxelvirtualdesktopglobals.numberOfObjectInHeight;// (planeSize * 10) * 0.5f;
                                                float somemulsizemainsubmeshz = 1.0f / (float)somevoxelvirtualdesktopglobals.numberOfObjectInDepth;// / somevoxelvirtualdesktopglobals.numberOfObjectInDepth;// (planeSize * 10) * 0.5f;

                                                float somemulsizemainsubmeshinstx = 1.0f / (float)somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth;// / somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth;// (planeSize * 10) * 0.5f;
                                                float somemulsizemainsubmeshinsty = 1.0f / (float)somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight;// / somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight;// (planeSize * 10) * 0.5f;
                                                float somemulsizemainsubmeshinstz = 1.0f / (float)somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth;// / somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth;// (planeSize * 10) * 0.5f;

                                                float somemulsizemainsubmeshinstbytex = 1.0f / (float)somevoxelvirtualdesktopglobals.tinyChunkWidth;// / somevoxelvirtualdesktopglobals.tinyChunkWidth;// (planeSize * 10) * 0.5f;
                                                float somemulsizemainsubmeshinstbytey = 1.0f / (float)somevoxelvirtualdesktopglobals.tinyChunkHeight;// / somevoxelvirtualdesktopglobals.tinyChunkHeight;// (planeSize * 10) * 0.5f;
                                                float somemulsizemainsubmeshinstbytez = 1.0f / (float)somevoxelvirtualdesktopglobals.tinyChunkDepth;// / somevoxelvirtualdesktopglobals.tinyChunkDepth;// (planeSize * 10) * 0.5f;


                                                somemulsize = (planeSize * 10) * 0.5f;
                                                somemulsize1 = planeSize;

                                                somechunkbyteposition += (dirInstanceRight * ((somevoxelvirtualdesktopw * somemulsizemainobjectx) * (somevoxelvirtualdesktopglobals.numberOfObjectInWidth * somemulsizemainsubmeshx) * (somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * somemulsizemainsubmeshinstx) * (somevoxelvirtualdesktopglobals.tinyChunkWidth * somemulsizemainsubmeshinstbytex)) * indexmainobjectx * somemulsize1);
                                                somechunkbyteposition += (dirInstanceRight * ((somevoxelvirtualdesktopglobals.numberOfObjectInWidth * somemulsizemainsubmeshx) * (somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * somemulsizemainsubmeshinstx) * (somevoxelvirtualdesktopglobals.tinyChunkWidth * somemulsizemainsubmeshinstbytex)) * indexmeshzerox * somemulsize1);
                                                somechunkbyteposition += (dirInstanceRight * ((somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * somemulsizemainsubmeshinstx) * (somevoxelvirtualdesktopglobals.tinyChunkWidth * somemulsizemainsubmeshinstbytex)) * indexofmeshinstx * somemulsize1);
                                                somechunkbyteposition += (dirInstanceRight * ((somevoxelvirtualdesktopglobals.tinyChunkWidth * somemulsizemainsubmeshinstbytex)) * indexbytex * somemulsize1);

                                                somechunkbyteposition += (dirInstanceUp * ((somevoxelvirtualdesktoph * somemulsizemainobjecty) * (somevoxelvirtualdesktopglobals.numberOfObjectInHeight * somemulsizemainsubmeshy) * (somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * somemulsizemainsubmeshinsty) * (somevoxelvirtualdesktopglobals.tinyChunkHeight * somemulsizemainsubmeshinstbytey)) * indexmainobjecty * somemulsize1);
                                                somechunkbyteposition += (dirInstanceUp * ((somevoxelvirtualdesktopglobals.numberOfObjectInHeight * somemulsizemainsubmeshy) * (somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * somemulsizemainsubmeshinsty) * (somevoxelvirtualdesktopglobals.tinyChunkHeight * somemulsizemainsubmeshinstbytey)) * indexmeshzeroy * somemulsize1);
                                                somechunkbyteposition += (dirInstanceUp * ((somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * somemulsizemainsubmeshinsty) * (somevoxelvirtualdesktopglobals.tinyChunkHeight * somemulsizemainsubmeshinstbytey)) * indexofmeshinsty * somemulsize1);
                                                somechunkbyteposition += (dirInstanceUp * ((somevoxelvirtualdesktopglobals.tinyChunkHeight * somemulsizemainsubmeshinstbytey)) * indexbytey * somemulsize1);

                                                somechunkbyteposition += (dirInstanceForward * ((somevoxelvirtualdesktopd * somemulsizemainobjectz) * (somevoxelvirtualdesktopglobals.numberOfObjectInDepth * somemulsizemainsubmeshz) * (somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth * somemulsizemainsubmeshinstz) * (somevoxelvirtualdesktopglobals.tinyChunkDepth * somemulsizemainsubmeshinstbytez)) * indexmainobjectz * somemulsize1);
                                                somechunkbyteposition += (dirInstanceForward * ((somevoxelvirtualdesktopglobals.numberOfObjectInDepth * somemulsizemainsubmeshz) * (somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth * somemulsizemainsubmeshinstz) * (somevoxelvirtualdesktopglobals.tinyChunkDepth * somemulsizemainsubmeshinstbytez)) * indexmeshzeroz * somemulsize1);
                                                somechunkbyteposition += (dirInstanceForward * ((somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth * somemulsizemainsubmeshinstz) * (somevoxelvirtualdesktopglobals.tinyChunkDepth * somemulsizemainsubmeshinstbytez)) * indexofmeshinstz * somemulsize1);
                                                somechunkbyteposition += (dirInstanceForward * ((somevoxelvirtualdesktopglobals.tinyChunkDepth * somemulsizemainsubmeshinstbytez)) * indexbytez * somemulsize1);



                                                somemulsizemainobjectx = 1.0f / (float)somevoxelvirtualdesktopw;// / somechunkkeyboardw;// somevoxelvirtualdesktopglobals.numberOfObjectInHeight;// (planeSize * 10) * 0.5f;
                                                somemulsizemainobjecty = 1.0f / (float)somevoxelvirtualdesktoph;// / somechunkkeyboardh;// somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight;// (planeSize * 10) * 0.5f;
                                                somemulsizemainobjectz = 1.0f / (float)somevoxelvirtualdesktopd;// / somechunkkeyboardd;// somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth;// (planeSize * 10) * 0.5f;

                                                somemulsizemainsubmeshx = 1.0f / (float)somevoxelvirtualdesktopglobals.numberOfObjectInWidth;// / somevoxelvirtualdesktopglobals.numberOfObjectInWidth;// (planeSize * 10) * 0.5f;
                                                somemulsizemainsubmeshy = 1.0f / (float)somevoxelvirtualdesktopglobals.numberOfObjectInHeight;// / somevoxelvirtualdesktopglobals.numberOfObjectInHeight;// (planeSize * 10) * 0.5f;
                                                somemulsizemainsubmeshz = 1.0f / (float)somevoxelvirtualdesktopglobals.numberOfObjectInDepth;// / somevoxelvirtualdesktopglobals.numberOfObjectInDepth;// (planeSize * 10) * 0.5f;

                                                somemulsizemainsubmeshinstx = 1.0f / (float)somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth;// / somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth;// (planeSize * 10) * 0.5f;
                                                somemulsizemainsubmeshinsty = 1.0f / (float)somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight;// / somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight;// (planeSize * 10) * 0.5f;
                                                somemulsizemainsubmeshinstz = 1.0f / (float)somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth;// / somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth;// (planeSize * 10) * 0.5f;

                                                somemulsizemainsubmeshinstbytex = 1.0f / (float)somevoxelvirtualdesktopglobals.tinyChunkWidth;// / somevoxelvirtualdesktopglobals.tinyChunkWidth;// (planeSize * 10) * 0.5f;
                                                somemulsizemainsubmeshinstbytey = 1.0f / (float)somevoxelvirtualdesktopglobals.tinyChunkHeight;// / somevoxelvirtualdesktopglobals.tinyChunkHeight;// (planeSize * 10) * 0.5f;
                                                somemulsizemainsubmeshinstbytez = 1.0f / (float)somevoxelvirtualdesktopglobals.tinyChunkDepth;// / somevoxelvirtualdesktopglobals.tinyChunkDepth;// (planeSize * 10) * 0.5f;

                                                somemulsize1 = planeSize;


                                                somechunkbyteposition1 += (dirInstanceRight1 * ((somevoxelvirtualdesktopglobals.numberOfObjectInWidth) * (somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth) * (somevoxelvirtualdesktopglobals.tinyChunkWidth)) * indexmainobjectx * somemulsize1);
                                                somechunkbyteposition1 += (dirInstanceRight1 * ((somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * somevoxelvirtualdesktopglobals.tinyChunkWidth)) * indexmeshzerox * somemulsize1);
                                                somechunkbyteposition1 += (dirInstanceRight1 * ((somevoxelvirtualdesktopglobals.tinyChunkWidth)) * indexofmeshinstx * somemulsize1);
                                                somechunkbyteposition1 += (dirInstanceRight1 * ((somevoxelvirtualdesktopglobals.tinyChunkWidth * somemulsizemainsubmeshinstbytex)) * indexbytex * somemulsize1);

                                                somechunkbyteposition1 += (dirInstanceUp1 * ((somevoxelvirtualdesktopglobals.numberOfObjectInHeight) * (somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight) * (somevoxelvirtualdesktopglobals.tinyChunkHeight)) * indexmainobjecty * somemulsize1);
                                                somechunkbyteposition1 += (dirInstanceUp1 * ((somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * somevoxelvirtualdesktopglobals.tinyChunkHeight)) * indexmeshzeroy * somemulsize1);
                                                somechunkbyteposition1 += (dirInstanceUp1 * ((somevoxelvirtualdesktopglobals.tinyChunkHeight)) * indexofmeshinsty * somemulsize1);
                                                somechunkbyteposition1 += (dirInstanceUp1 * ((somevoxelvirtualdesktopglobals.tinyChunkHeight * somemulsizemainsubmeshinstbytey)) * indexbytey * somemulsize1);

                                                somechunkbyteposition1 += (dirInstanceForward1 * ((somevoxelvirtualdesktopglobals.numberOfObjectInDepth) * (somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth) * (somevoxelvirtualdesktopglobals.tinyChunkDepth)) * indexmainobjectz * somemulsize1);
                                                somechunkbyteposition1 += (dirInstanceForward1 * ((somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth * somevoxelvirtualdesktopglobals.tinyChunkDepth)) * indexmeshzeroz * somemulsize1);
                                                somechunkbyteposition1 += (dirInstanceForward1 * ((somevoxelvirtualdesktopglobals.tinyChunkDepth)) * indexofmeshinstz * somemulsize1);
                                                somechunkbyteposition1 += (dirInstanceForward1 * ((somevoxelvirtualdesktopglobals.tinyChunkDepth * somemulsizemainsubmeshinstbytez)) * indexbytez * somemulsize1);


                                                Vector3 mainmeshpos = new Vector3(somevoxelvirtualdesktop[0].currentWorldMatrix.M41, somevoxelvirtualdesktop[0].currentWorldMatrix.M42, somevoxelvirtualdesktop[0].currentWorldMatrix.M43);

                                                Vector3 tempvecpickaxehitpoint = pickaxetippoint;
                                                tempvecpickaxehitpoint.X += somevoxelvirtualdesktopglobals.planeSize * 0.5f;
                                                tempvecpickaxehitpoint.Y += somevoxelvirtualdesktopglobals.planeSize * 0.5f;
                                                tempvecpickaxehitpoint.Z += somevoxelvirtualdesktopglobals.planeSize * 0.5f;

                                                pickaxetippoint.X = (float)Math.Round(pickaxetippoint.X / somevoxelvirtualdesktopglobals.planeSize) * somevoxelvirtualdesktopglobals.planeSize;
                                                pickaxetippoint.Y = (float)Math.Round(pickaxetippoint.Y / somevoxelvirtualdesktopglobals.planeSize) * somevoxelvirtualdesktopglobals.planeSize;
                                                pickaxetippoint.Z = (float)Math.Round(pickaxetippoint.Z / somevoxelvirtualdesktopglobals.planeSize) * somevoxelvirtualdesktopglobals.planeSize;




                                                /*
                                                worldMatrixinstancesvoxelcube[0][0][2].M41 = somechunkbyteposition.X;// + mainmeshpos.X;// + mainmeshpos.X;
                                                worldMatrixinstancesvoxelcube[0][0][2].M42 = somechunkbyteposition.Y;//  + mainmeshpos.Y;// + mainmeshpos.Y;
                                                worldMatrixinstancesvoxelcube[0][0][2].M43 = somechunkbyteposition.Z;//  + mainmeshpos.Z;// + mainmeshpos.Z;

                                                */
                                                worldmatrixinstancesvoxelsforcalculationsonly[0][0][0].M41 = pickaxetippoint.X;
                                                worldmatrixinstancesvoxelsforcalculationsonly[0][0][0].M42 = pickaxetippoint.Y;
                                                worldmatrixinstancesvoxelsforcalculationsonly[0][0][0].M43 = pickaxetippoint.Z;






                                                //Vector3 somechunkbyteposition1 = new Vector3(somevoxelvirtualdesktop[0].currentWorldMatrix.M41, somevoxelvirtualdesktop[0].currentWorldMatrix.M42, somevoxelvirtualdesktop[0].currentWorldMatrix.M43);
                                                mainmeshpos = new Vector3(somevoxelvirtualdesktop[0].currentWorldMatrix.M41, somevoxelvirtualdesktop[0].currentWorldMatrix.M42, somevoxelvirtualdesktop[0].currentWorldMatrix.M43);

                                                //SET THE BYTE LOCATOR OBJECT TO THE LOCATION OF THE BYTE ON THE CHUNK IN ORDER TO HAVE A VISUAL ON WHERE THE BYTE LOCATOR IS IN CODE
                                                //SET THE BYTE LOCATOR OBJECT TO THE LOCATION OF THE BYTE ON THE CHUNK IN ORDER TO HAVE A VISUAL ON WHERE THE BYTE LOCATOR IS IN CODE
                                                //SET THE BYTE LOCATOR OBJECT TO THE LOCATION OF THE BYTE ON THE CHUNK IN ORDER TO HAVE A VISUAL ON WHERE THE BYTE LOCATOR IS IN CODE
                                                worldmatrixinstancesvoxelsforcalculationsonly[0][0][4].M41 = somechunkbyteposition1.X;
                                                worldmatrixinstancesvoxelsforcalculationsonly[0][0][4].M42 = somechunkbyteposition1.Y;
                                                worldmatrixinstancesvoxelsforcalculationsonly[0][0][4].M43 = somechunkbyteposition1.Z;
                                                //SET THE BYTE LOCATOR OBJECT TO THE LOCATION OF THE BYTE ON THE CHUNK IN ORDER TO HAVE A VISUAL ON WHERE THE BYTE LOCATOR IS IN CODE
                                                //SET THE BYTE LOCATOR OBJECT TO THE LOCATION OF THE BYTE ON THE CHUNK IN ORDER TO HAVE A VISUAL ON WHERE THE BYTE LOCATOR IS IN CODE
                                                //SET THE BYTE LOCATOR OBJECT TO THE LOCATION OF THE BYTE ON THE CHUNK IN ORDER TO HAVE A VISUAL ON WHERE THE BYTE LOCATOR IS IN CODE
                                                /*
                                                pickaxetippoint.X = (float)Math.Round(pickaxetippoint.X / planeSize);
                                                worldMatrixinstancesvoxelcube[0][0][2].M41 = (float)Math.Round(worldMatrixinstancesvoxelcube[0][0][2].M41 / planeSize);

                                                pickaxetippoint.Y = (float)Math.Round(pickaxetippoint.Y / planeSize);
                                                worldMatrixinstancesvoxelcube[0][0][2].M42 = (float)Math.Round(worldMatrixinstancesvoxelcube[0][0][2].M42 / planeSize);

                                                pickaxetippoint.Z = (float)Math.Round(pickaxetippoint.Z / planeSize);
                                                worldMatrixinstancesvoxelcube[0][0][2].M43 = (float)Math.Round(worldMatrixinstancesvoxelcube[0][0][2].M43 / planeSize);
                                                
                                                */

                                                Vector3 positionofhitbyte = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][0].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][0].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][0].M43);





                                                if (consolewritecounter >= consolewritecountermax)
                                                {
                                                    if (consolewritecounterswtc == 0)
                                                    {

                                                        consolewritecounterswtc = 1;
                                                    }

                                                    /*for (int sc = 0; sc < 30; sc++) //Console.WindowWidth - 1
                                                    {
                                                        Console.SetCursorPosition(sc, 0);
                                                        Console.WriteLine(" ");
                                                        //Console.SetCursorPosition(sc, 1);
                                                        //Console.WriteLine(" ");
                                                        //Console.SetCursorPosition(sc, 1);
                                                        //Console.WriteLine(" ");
                                                        //Console.SetCursorPosition(sc, 3);
                                                        //Console.WriteLine(" ");
                                                        //Console.SetCursorPosition(sc, 4);
                                                        //Console.WriteLine(" ");
                                                    }*/

                                                    //Console.SetCursorPosition(0, 0);
                                                    //Console.WriteLine("x:" + +mainx + "/y:" + mainy + "/z:" + mainz);

                                                    //Console.SetCursorPosition(0, 1);
                                                    //Console.WriteLine("secx:" + +secx + "/secy:" + secy + "/secz:" + secz);

                                                    //Console.SetCursorPosition(0, 0);
                                                    //Console.WriteLine("somefx:" + +somefx + "/somefy:" + somefy + "/somefz:" + somefz);

                                                    //Console.SetCursorPosition(0, 0);
                                                    //Console.WriteLine("fobjmeshx:" + +fobjmeshx + "/fobjmeshy:" + fobjmeshy + "/fobjmeshz:" + fobjmeshz);

                                                    //Console.Title = "fobjmeshx:" + +fobjmeshx + "/fobjmeshy:" + fobjmeshy + "/fobjmeshz:" + fobjmeshz;
                                                    //Console.Title = "fobjmeshx:" + +fobjmeshx + "/fobjmeshy:" + fobjmeshy + "/fobjmeshz:" + fobjmeshz;
                                                    //Console.Title = "finstx:" + +finstx + "/finsty:" + finsty + "/finstz:" + finstz;
                                                    //Console.Title = "mainx:" + mainx + "/mainy:" + mainy + "/mainz:" + mainz;
                                                    //Console.Title = "someothermainx:" + someothermainx + "/someothermainy:" + someothermainy + "/someothermainz:" + someothermainz + "/fobjmeshx:" + +fobjmeshx + "/fobjmeshy:" + fobjmeshy + "/fobjmeshz:" + fobjmeshz;
                                                    //Console.Title = "/someothermainx:" + someothermainx + "/someothermainy:" + someothermainy + "/someothermainz:" + someothermainz +"/fobjmeshmainx:" + fobjmeshmainx + "/fobjmeshmainy:" + fobjmeshmainy + "/fobjmeshmainz:" + fobjmeshmainz + "/fobjmeshx:" + +fobjmeshx + "/fobjmeshy:" + fobjmeshy + "/fobjmeshz:" + fobjmeshz;

                                                    //Console.Title = "someinstx:" + (int)someinstx + "/someinsty:" + (int)someinsty + "/someinstz:" + (int)someinstz;

                                                    //Console.Title = "somefx:" + +somefx + "/somefy:" + somefy + "/somefz:" + somefz;

                                                    /*int indexbytex = remainderbytesx;
                                                    int indexbytey = remainderbytesy;
                                                    int indexbytez = remainderbytesz;
                                                    int indexofbyte = (indexbytex) + (someglobalschunkkeyboard.tinyChunkWidth) * ((indexbytey) + (someglobalschunkkeyboard.tinyChunkHeight) * (indexbytez));

                                                    int indexmeshinstx = remaindermeshinstx;
                                                    int indexmeshinsty = remaindermeshinsty;
                                                    int indexmeshinstz = remaindermeshinstz;
                                                    int indexofmeshinst = (indexmeshinstx) + (someglobalschunkkeyboard.numberOfInstancesPerObjectInWidth) * ((indexmeshinsty) + (someglobalschunkkeyboard.numberOfInstancesPerObjectInHeight) * (indexmeshinstz));

                                                    int indexmeshzerox = remaindermeshinstx;
                                                    int indexmeshzeroy = remaindermeshinsty;
                                                    int indexmeshzeroz = remaindermeshinstz;
                                                    int indexofmeshzero = (indexmeshzerox) + (someglobalschunkkeyboard.numberOfObjectInWidth) * ((indexmeshzeroy) + (someglobalschunkkeyboard.numberOfObjectInHeight) * (indexmeshzeroz));

                                                    int indexmainobjectx = remaindermeshinstx;
                                                    int indexmainobjecty = remaindermeshinsty;
                                                    int indexmainobjectz = remaindermeshinstz;
                                                    int indexofmainobject = (indexmainobjectx) + (somevoxelvirtualdesktopswidth) * ((indexmainobjecty) + (somevoxelvirtualdesktopsheight) * (indexmainobjectz));

                                                    //Console.Title = "indexbytex:" + (int)indexbytex + "/indexbytey:" + (int)indexbytey + "/indexbytez:" + (int)indexbytez;
                                                    //Console.Title = "indexofmeshinstx:" + (int)indexofmeshinstx + "/indexofmeshinsty:" + (int)indexofmeshinsty + "/indexofmeshinstz:" + (int)indexofmeshinstz;

                                                    ///Console.Title = "/bx:" + positionofhitbyte.X + "/by:" + positionofhitbyte.Y + "/bz:" + positionofhitbyte.Z + "/px:" + tempvecpickaxehitpoint.X + "/py:" + tempvecpickaxehitpoint.Y + "/pz:" + tempvecpickaxehitpoint.Z;
                                                    //Console.Title = "/bx:" + pickaxetippoint.X + "/by:" + pickaxetippoint.Y + "/bz:" + pickaxetippoint.Z + "/x:" + worldMatrixinstancesvoxelcube[0][0][2].M41 + "/y:" + worldMatrixinstancesvoxelcube[0][0][2].M42 + "/z:" + worldMatrixinstancesvoxelcube[0][0][2].M43;
                                                    // + somediff0x + "/y:" + somediff0y + "/z:" + somediff0z +  + somediff0x + "/y:" + somediff0y + "/z:" + somediff0z + 
                                                    //Console.Title = "/indexmeshzerox:" + (int)indexmeshzerox + "/indexmeshzeroy:" + (int)indexmeshzeroy + "/indexmeshzeroz:" + (int)indexmeshzeroz;

                                                    // "/x:" + somemainobjmeshpos.X + "/y:" + somemainobjmeshpos.Y + "/z:" + somemainobjmeshpos.Z + 
                                                    //Console.Title ="/x:" + mainmeshpos.X + "/y:" + mainmeshpos.Y + "/z:" + mainmeshpos.Z + "/bx:" + pickaxetippoint.X + "/by:" + pickaxetippoint.Y + "/bz:" + pickaxetippoint.Z + "/x:" + worldMatrixinstancesvoxelcube[0][0][0].M41 + "/y:" + worldMatrixinstancesvoxelcube[0][0][0].M42 + "/z:" + worldMatrixinstancesvoxelcube[0][0][0].M43 + "/x:" + worldMatrixinstancesvoxelcube[0][0][2].M41 + "/y:" + worldMatrixinstancesvoxelcube[0][0][2].M42 + "/z:" + worldMatrixinstancesvoxelcube[0][0][2].M43 + "/x:" + worldMatrixinstancesvoxelcube[0][0][4].M41 + "/y:" + worldMatrixinstancesvoxelcube[0][0][4].M42 + "/z:" + worldMatrixinstancesvoxelcube[0][0][4].M43 + "/x:" + (int)Math.Round(worldMatrixinstancesvoxelcube[0][0][0].M41 / planeSize) + "/y:" + (int)Math.Round(worldMatrixinstancesvoxelcube[0][0][0].M42 / planeSize) + "/z:" + (int)Math.Round(worldMatrixinstancesvoxelcube[0][0][0].M43 / planeSize) + "/x:" + (int)Math.Round(worldMatrixinstancesvoxelcube[0][0][4].M41 / planeSize) + "/y:" + (int)Math.Round(worldMatrixinstancesvoxelcube[0][0][4].M42 / planeSize) + "/z:" + (int)Math.Round(worldMatrixinstancesvoxelcube[0][0][4].M43 / planeSize);
                                                    consolewritecounter = 0;
                                                    Console.Title = "/x:" + mainmeshpos.X + "/y:" + mainmeshpos.Y + "/z:" + mainmeshpos.Z + "/bx:" + pickaxetippoint.X + "/by:" + pickaxetippoint.Y + "/bz:" + pickaxetippoint.Z + "/x:" + worldMatrixinstancesvoxelcube[0][0][0].M41 + "/y:" + worldMatrixinstancesvoxelcube[0][0][0].M42 + "/z:" + worldMatrixinstancesvoxelcube[0][0][0].M43 + "/x:" + worldMatrixinstancesvoxelcube[0][0][2].M41 + "/y:" + worldMatrixinstancesvoxelcube[0][0][2].M42 + "/z:" + worldMatrixinstancesvoxelcube[0][0][2].M43 + "/x:" + worldMatrixinstancesvoxelcube[0][0][4].M41 + "/y:" + worldMatrixinstancesvoxelcube[0][0][4].M42 + "/z:" + worldMatrixinstancesvoxelcube[0][0][4].M43;
                                                    */
                                                }




                                                consolewritecounter++;


                                                //pickaxetippoint





                                                //worldMatrixinstancesvoxelcube[0][0][2].M43 

                                                float someflooredvaluebytex = positionofhitbyte.X;// (float)(Math.Floor(positionofhitbyte.X / someglobalschunkkeyboard.planeSize) * someglobalschunkkeyboard.planeSize);
                                                float someflooredvaluebytey = positionofhitbyte.Y;// (float)(Math.Floor(positionofhitbyte.Y / someglobalschunkkeyboard.planeSize) * someglobalschunkkeyboard.planeSize);
                                                float someflooredvaluebytez = positionofhitbyte.Z;// (float)(Math.Floor(positionofhitbyte.Z / someglobalschunkkeyboard.planeSize) * someglobalschunkkeyboard.planeSize);

                                                //float locationbytex = worldmatrixofvoxelobject.M41 + (dirInstanceRight * indexofmainobject) + 

                                                //SECTION FOR 3D BYTE LOCATION WHEN AN INSTANCED BREAKABLE VOXEL OBJECT IS ROTATED
                                                //SECTION FOR 3D BYTE LOCATION WHEN AN INSTANCED BREAKABLE VOXEL OBJECT IS ROTATED
                                                //SECTION FOR 3D BYTE LOCATION WHEN AN INSTANCED BREAKABLE VOXEL OBJECT IS ROTATED




                                                int somebyte = somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].somechunk[indexofmeshinst].GetByte(indexbytex, indexbytey, indexbytez);
                                                //&& Math.Round(tempPoint.X / someglobalschunkkeyboard.planeSize) == someflooredvaluebytex && Math.Round(tempPoint.Y / someglobalschunkkeyboard.planeSize) == someflooredvaluebytey && Math.Round(tempPoint.Z / someglobalschunkkeyboard.planeSize) == someflooredvaluebytez

                                                //&& Math.Floor(pickaxetippoint.X / planeSize) == Math.Floor(worldMatrixinstancesvoxelcube[0][0][2].M41 / planeSize) && Math.Floor(pickaxetippoint.Y / planeSize) == Math.Floor(worldMatrixinstancesvoxelcube[0][0][2].M42 / planeSize) && Math.Floor(pickaxetippoint.Z / planeSize) == Math.Floor(worldMatrixinstancesvoxelcube[0][0][2].M43 / planeSize)

                                                //if (somebyte == 1 && worldMatrixinstancesvoxelcube[0][0][0].M41 == worldMatrixinstancesvoxelcube[0][0][4].M41 && worldMatrixinstancesvoxelcube[0][0][0].M42 == worldMatrixinstancesvoxelcube[0][0][4].M42 && worldMatrixinstancesvoxelcube[0][0][0].M43 == worldMatrixinstancesvoxelcube[0][0][4].M43)





                                                //if (somebyte == 1 && (int)Math.Round(worldMatrixinstancesvoxelcube[0][0][].M41 / planeSize) == (int)Math.Round(pickaxetippoint.X / planeSize) && (int)Math.Round(worldMatrixinstancesvoxelcube[0][0][0].M42 / planeSize) == (int)Math.Round(pickaxetippoint.Y / planeSize) && (int)Math.Round(worldMatrixinstancesvoxelcube[0][0][0].M43 / planeSize) == (int)Math.Round(pickaxetippoint.Z / planeSize))
                                                if (somebyte == 1 && (int)Math.Round(worldmatrixinstancesvoxelsforcalculationsonly[0][0][0].M41 / planeSize) == (int)Math.Round(worldmatrixinstancesvoxelsforcalculationsonly[0][0][4].M41 / planeSize) && (int)Math.Round(worldmatrixinstancesvoxelsforcalculationsonly[0][0][0].M42 / planeSize) == (int)Math.Round(worldmatrixinstancesvoxelsforcalculationsonly[0][0][4].M42 / planeSize) && (int)Math.Round(worldmatrixinstancesvoxelsforcalculationsonly[0][0][0].M43 / planeSize) == (int)Math.Round(worldmatrixinstancesvoxelsforcalculationsonly[0][0][4].M43 / planeSize))
                                                //if (somebyte == 1 && worldMatrixinstancesvoxelcube[0][0][0].M41 == worldMatrixinstancesvoxelcube[0][0][4].M41 && worldMatrixinstancesvoxelcube[0][0][0].M42 == worldMatrixinstancesvoxelcube[0][0][4].M42 && worldMatrixinstancesvoxelcube[0][0][0].M43 == worldMatrixinstancesvoxelcube[0][0][4].M43)
                                                //if (somebyte == 1 )
                                                {

                                                    //Program.MessageBox((IntPtr)0, "/map:" + currentMapData + "/currentByteother:" + currentByteother + "/double_result:" + double_result, "sccs message 1", 0);
                                                    //Program.MessageBox((IntPtr)0, "/map:" + currentMapData + "/someotherbyte:" + arrayOfDigits[someOtherIndex] + "/arrayOfDigits[someotherindex1]:" + arrayOfDigits[someotherindex1] + "/double_result:" + double_result, "sccs message 1", 0);
                                                    // Program.MessageBox((IntPtr)0, "trying to break byte " + "/map4:" + currentMapData + "/bufferbyte:" + currentByte + "/classmemorybyte:" + somebyte + " ", "sccs message 1", 0);
                                                    int voxelchunkinvertoption = Program.usetypeofvoxel;

                                                    //resetvoxelladdercounter

                                                    somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].somechunk[indexofmeshinst].SetByte(indexbytex, indexbytey, indexbytez, 0, Vector3.Zero);

                                                    somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].somechunk[indexofmeshinst].setnewmap(out m11, out m12, out m13, out m14, out m21, out m22, out m23, out m24, out m31, out m32, out m33, out m34, out m41, out m42, out m43, out m44, chosenmap, voxelchunkinvertoption
                                                        , out m11b, out m12b, out m13b, out m14b, out m21b, out m22b, out m23b, out m24b, out m31b, out m32b, out m33b, out m34b, out m41b, out m42b, out m43b, out m44b,
                                                        out m11c, out m12c, out m13c, out m14c, out m21c, out m22c, out m23c, out m24c, out m31c, out m32c, out m33c, out m34c, out m41c, out m42c, out m43c, out m44c,
                                                        out m11d, out m12d, out m13d, out m14d, out m21d, out m22d, out m23d, out m24d, out m31d, out m32d, out m33d, out m34d, out m41d, out m42d, out m43d, out m44d); //


                                                    //somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].somechunk[indexofmeshinst].setnewmap(out m11, out m12, out m13, out m14, out m21, out m22, out m23, out m24, out m31, out m32, out m33, out m34, out m41, out m42, out m43, out m44, chosenmap, voxelchunkinvertoption); //



                                                    /*somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M11 = (float)m11;
                                                    somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M12 = (float)m12;
                                                    somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M13 = (float)m13;
                                                    somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M14 = (float)m14;

                                                    somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M21 = (float)m21;
                                                    somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M22 = (float)m22;
                                                    somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M23 = (float)m23;
                                                    somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M24 = (float)m24;

                                                    somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M31 = (float)m31;
                                                    somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M32 = (float)m32;
                                                    somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M33 = (float)m33;
                                                    somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M34 = (float)m34;

                                                    somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M41 = (float)m41;
                                                    somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M42 = (float)m42;
                                                    somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M43 = (float)m43;
                                                    somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M44 = (float)m44;
                                                    */

                                                    /*currentIndex = indexofbyte;


                                                    
                                                    if (currentIndex >= 0 && currentIndex <= 63)
                                                    {
                                                        if (currentIndex >= 0 && currentIndex <= 3)
                                                        {
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M11 = (float)m11;
                                                        }
                                                        else if (currentIndex >= 4 && currentIndex <= 7)
                                                        {
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M12 = (float)m12;
                                                        }
                                                        else if (currentIndex >= 8 && currentIndex <= 11)
                                                        {
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M13 = (float)m13;
                                                        }
                                                        else if (currentIndex >= 12 && currentIndex <= 15)
                                                        {
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M14 = (float)m14;
                                                        }
                                                        else if (currentIndex >= 16 && currentIndex <= 19)
                                                        {
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M21 = (float)m21;
                                                        }
                                                        else if (currentIndex >= 20 && currentIndex <= 23)
                                                        {
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M22 = (float)m22;
                                                        }
                                                        else if (currentIndex >= 24 && currentIndex <= 27)
                                                        {
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M23 = (float)m23;
                                                        }
                                                        else if (currentIndex >= 28 && currentIndex <= 31)
                                                        {
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M24 = (float)m24;
                                                        }
                                                        else if (currentIndex >= 32 && currentIndex <= 35)
                                                        {
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M31 = (float)m31;
                                                        }
                                                        else if (currentIndex >= 36 && currentIndex <= 39)
                                                        {
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M32 = (float)m32;
                                                        }
                                                        else if (currentIndex >= 40 && currentIndex <= 43)
                                                        {
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M33 = (float)m33;
                                                        }
                                                        else if (currentIndex >= 44 && currentIndex <= 47)
                                                        {
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M34 = (float)m34;
                                                        }
                                                        else if (currentIndex >= 48 && currentIndex <= 51)
                                                        {
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M41 = (float)m41;
                                                        }
                                                        else if (currentIndex >= 52 && currentIndex <= 55)
                                                        {
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M42 = (float)m42;
                                                        }
                                                        else if (currentIndex >= 56 && currentIndex <= 59)
                                                        {
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M43 = (float)m43;
                                                        }
                                                        else if (currentIndex >= 60 && currentIndex <= 63)
                                                        {
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M44 = (float)m44;
                                                        }
                                                    }*/


                                                    double selectablevectordouble = 0;
                                                    currentIndex = indexofbyte;
                                                    int maxv = somevoxelvirtualdesktopglobals.tinyChunkWidth * somevoxelvirtualdesktopglobals.tinyChunkHeight * somevoxelvirtualdesktopglobals.tinyChunkDepth;

                                                    int somemaxvecdigit = somevoxelvirtualdesktopglobals.tinyChunkWidth;
                                                    int somecountermul = 0;
                                                    int somec = 0;

                                                    //3 

                                                    for (int t = 0; t <= currentIndex; t++) // index == 45 == 11 
                                                    {
                                                        if (somec == somemaxvecdigit)
                                                        {
                                                            somecountermul++;
                                                            somec = 0;
                                                        }
                                                        somec++;
                                                    }






                                                    //int somediv = index % 16;
                                                    /*
                                                    if (somebytecounter == 0)
                                                    {
                                                        byte1st = currentByte;
                                                    }
                                                    else if (somebytecounter == 1)
                                                    {
                                                        byte2nd = currentByte;
                                                    }
                                                    else if (somebytecounter == 2)
                                                    {
                                                        byte3rd = currentByte;
                                                    }*/




                                                    switch (somecountermul)
                                                    {
                                                        case 0:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M11 = (float)m11;
                                                            break;
                                                        case 1:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M12 = (float)m12;
                                                            break;
                                                        case 2:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M13 = (float)m13;
                                                            break;
                                                        case 3:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M14 = (float)m14;
                                                            break;
                                                        case 4:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M21 = (float)m21;
                                                            break;
                                                        case 5:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M22 = (float)m22;
                                                            break;
                                                        case 6:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M23 = (float)m23;
                                                            break;
                                                        case 7:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M24 = (float)m24;
                                                            break;
                                                        case 8:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M31 = (float)m31;
                                                            break;
                                                        case 9:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M32 = (float)m32;
                                                            break;
                                                        case 10:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M33 = (float)m33;
                                                            break;
                                                        case 11:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M34 = (float)m34;
                                                            break;
                                                        case 12:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M41 = (float)m41;
                                                            break;
                                                        case 13:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M42 = (float)m42;
                                                            break;
                                                        case 14:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M43 = (float)m43;
                                                            break;
                                                        case 15:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M44 = (float)m44;
                                                            break;




                                                        case 16:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M11 = (float)m11b;
                                                            break;
                                                        case 17:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M12 = (float)m12b;
                                                            break;
                                                        case 18:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M13 = (float)m13b;
                                                            break;
                                                        case 19:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M14 = (float)m14b;
                                                            break;
                                                        case 20:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M21 = (float)m21b;
                                                            break;
                                                        case 21:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M22 = (float)m22b;
                                                            break;
                                                        case 22:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M23 = (float)m23b;
                                                            break;
                                                        case 23:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M24 = (float)m24b;
                                                            break;
                                                        case 24:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M31 = (float)m31b;
                                                            break;
                                                        case 25:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M32 = (float)m32b;
                                                            break;
                                                        case 26:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M33 = (float)m33b;
                                                            break;
                                                        case 27:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M34 = (float)m34b;
                                                            break;
                                                        case 28:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M41 = (float)m41b;
                                                            break;
                                                        case 29:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M42 = (float)m42b;
                                                            break;
                                                        case 30:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M43 = (float)m43b;
                                                            break;
                                                        case 31:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M44 = (float)m44b;
                                                            break;



                                                        case 32:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M11 = (float)m11c;
                                                            break;
                                                        case 33:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M12 = (float)m12c;
                                                            break;
                                                        case 34:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M13 = (float)m13c;
                                                            break;
                                                        case 35:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M14 = (float)m14c;
                                                            break;
                                                        case 36:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M21 = (float)m21c;
                                                            break;
                                                        case 37:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M22 = (float)m22c;
                                                            break;
                                                        case 38:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M23 = (float)m23c;
                                                            break;
                                                        case 39:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M24 = (float)m24c;
                                                            break;
                                                        case 40:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M31 = (float)m31c;
                                                            break;
                                                        case 41:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M32 = (float)m32c;
                                                            break;
                                                        case 42:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M33 = (float)m33c;
                                                            break;
                                                        case 43:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M34 = (float)m34c;
                                                            break;
                                                        case 44:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M41 = (float)m41c;
                                                            break;
                                                        case 45:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M42 = (float)m42c;
                                                            break;
                                                        case 46:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M43 = (float)m43c;
                                                            break;
                                                        case 47:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M44 = (float)m44c;
                                                            break;




                                                        case 48:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M11 = (float)m11d;
                                                            break;
                                                        case 49:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M12 = (float)m12d;
                                                            break;
                                                        case 50:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M13 = (float)m13d;
                                                            break;
                                                        case 51:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M14 = (float)m14d;
                                                            break;
                                                        case 52:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M21 = (float)m21d;
                                                            break;
                                                        case 53:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M22 = (float)m22d;
                                                            break;
                                                        case 54:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M23 = (float)m23d;
                                                            break;
                                                        case 55:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M24 = (float)m24d;
                                                            break;
                                                        case 56:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M31 = (float)m31d;
                                                            break;
                                                        case 57:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M32 = (float)m32d;
                                                            break;
                                                        case 58:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M33 = (float)m33d;
                                                            break;
                                                        case 59:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M34 = (float)m34d;
                                                            break;
                                                        case 60:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M41 = (float)m41d;
                                                            break;
                                                        case 61:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M42 = (float)m42d;
                                                            break;
                                                        case 62:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M43 = (float)m43d;
                                                            break;
                                                        case 63:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M44 = (float)m44d;
                                                            break;
                                                    };


                                                    somevoxelvirtualdesktop[indexofmainobject].arrayOfChunkData[indexofmeshzero].switchForRender = 1;
                                                    //somevoxelvirtualdesktop[somevoxelvirtualdesktopgridindex].arrayOfChunkData[c].switchForRender = 1;


                                                    /*
                                                    double selectablevectordouble = 0;
                                                    currentIndex = indexofbyte;
                                                    int maxv = somevoxelvirtualdesktopglobals.tinyChunkWidth * somevoxelvirtualdesktopglobals.tinyChunkHeight * somevoxelvirtualdesktopglobals.tinyChunkDepth;
                                                    int somemaxvecdigit = 16;
                                                    int somecountermul = 0;
                                                    int somec = 0;

                                                    for (int t = 0; t < currentIndex; t++)
                                                    {
                                                        if (somec == somemaxvecdigit)
                                                        {
                                                            somecountermul++;
                                                            somec = 0;
                                                        }
                                                        somec++;
                                                    }*/





                                                    //int somediv = index % 16;
                                                    /*
                                                    if (somebytecounter == 0)
                                                    {
                                                        byte1st = currentByte;
                                                    }
                                                    else if (somebytecounter == 1)
                                                    {
                                                        byte2nd = currentByte;
                                                    }
                                                    else if (somebytecounter == 2)
                                                    {
                                                        byte3rd = currentByte;
                                                    }*/



                                                    /*
                                                    switch (somecountermul)
                                                    {
                                                        case 0:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M11 = (float)m11;
                                                            break;
                                                        case 1:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M12 = (float)m12;
                                                            break;
                                                        case 2:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M13 = (float)m13;
                                                            break;
                                                        case 3:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M14 = (float)m14;
                                                            break;
                                                        case 4:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M21 = (float)m21;
                                                            break;
                                                        case 5:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M22 = (float)m22;
                                                            break;
                                                        case 6:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M23 = (float)m23;
                                                            break;
                                                        case 7:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M24 = (float)m24;
                                                            break;
                                                        case 8:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M31 = (float)m31;
                                                            break;
                                                        case 9:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M32 = (float)m32;
                                                            break;
                                                        case 10:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M33 = (float)m33;
                                                            break;
                                                        case 11:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M34 = (float)m34;
                                                            break;
                                                        case 12:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M41 = (float)m41;
                                                            break;
                                                        case 13:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M42 = (float)m42;
                                                            break;
                                                        case 14:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M43 = (float)m43;
                                                            break;
                                                        case 15:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M44 = (float)m44;
                                                            break;




                                                        case 16:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M11 = (float)m11b;
                                                            break;
                                                        case 17:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M12 = (float)m12b;
                                                            break;
                                                        case 18:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M13 = (float)m13b;
                                                            break;
                                                        case 19:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M14 = (float)m14b;
                                                            break;
                                                        case 20:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M21 = (float)m21b;
                                                            break;
                                                        case 21:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M22 = (float)m22b;
                                                            break;
                                                        case 22:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M23 = (float)m23b;
                                                            break;
                                                        case 23:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M24 = (float)m24b;
                                                            break;
                                                        case 24:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M31 = (float)m31b;
                                                            break;
                                                        case 25:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M32 = (float)m32b;
                                                            break;
                                                        case 26:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M33 = (float)m33b;
                                                            break;
                                                        case 27:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M34 = (float)m34b;
                                                            break;
                                                        case 28:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M41 = (float)m41b;
                                                            break;
                                                        case 29:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M42 = (float)m42b;
                                                            break;
                                                        case 30:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M43 = (float)m43b;
                                                            break;
                                                        case 31:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M44 = (float)m44b;
                                                            break;



                                                        case 32:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M11 = (float)m11c;
                                                            break;
                                                        case 33:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M12 = (float)m12c;
                                                            break;
                                                        case 34:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M13 = (float)m13c;
                                                            break;
                                                        case 35:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M14 = (float)m14c;
                                                            break;
                                                        case 36:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M21 = (float)m21c;
                                                            break;
                                                        case 37:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M22 = (float)m22c;
                                                            break;
                                                        case 38:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M23 = (float)m23c;
                                                            break;
                                                        case 39:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M24 = (float)m24c;
                                                            break;
                                                        case 40:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M31 = (float)m31c;
                                                            break;
                                                        case 41:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M32 = (float)m32c;
                                                            break;
                                                        case 42:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M33 = (float)m33c;
                                                            break;
                                                        case 43:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M34 = (float)m34c;
                                                            break;
                                                        case 44:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M41 = (float)m41c;
                                                            break;
                                                        case 45:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M42 = (float)m42c;
                                                            break;
                                                        case 46:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M43 = (float)m43c;
                                                            break;
                                                        case 47:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M44 = (float)m44c;
                                                            break;




                                                        case 48:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M11 = (float)m11d;
                                                            break;
                                                        case 49:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M12 = (float)m12d;
                                                            break;
                                                        case 50:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M13 = (float)m13d;
                                                            break;
                                                        case 51:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M14 = (float)m14d;
                                                            break;
                                                        case 52:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M21 = (float)m21d;
                                                            break;
                                                        case 53:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M22 = (float)m22d;
                                                            break;
                                                        case 54:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M23 = (float)m23d;
                                                            break;
                                                        case 55:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M24 = (float)m24d;
                                                            break;
                                                        case 56:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M31 = (float)m31d;
                                                            break;
                                                        case 57:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M32 = (float)m32d;
                                                            break;
                                                        case 58:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M33 = (float)m33d;
                                                            break;
                                                        case 59:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M34 = (float)m34d;
                                                            break;
                                                        case 60:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M41 = (float)m41d;
                                                            break;
                                                        case 61:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M42 = (float)m42d;
                                                            break;
                                                        case 62:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M43 = (float)m43d;
                                                            break;
                                                        case 63:
                                                            somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M44 = (float)m44d;
                                                            break;
                                                    };*/
                                                }
                                                else
                                                {
                                                    if (Program.usetypeofvoxel == 3)
                                                    {
                                                        int voxelchunkinvertoption = Program.usetypeofvoxel;

                                                        somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].somechunk[indexofmeshinst].SetByte(indexbytex, indexbytey, indexbytez, 1, Vector3.Zero);

                                                        somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].somechunk[indexofmeshinst].setnewmap(out m11, out m12, out m13, out m14, out m21, out m22, out m23, out m24, out m31, out m32, out m33, out m34, out m41, out m42, out m43, out m44, chosenmap, voxelchunkinvertoption
                                                            , out m11b, out m12b, out m13b, out m14b, out m21b, out m22b, out m23b, out m24b, out m31b, out m32b, out m33b, out m34b, out m41b, out m42b, out m43b, out m44b,
                                                            out m11c, out m12c, out m13c, out m14c, out m21c, out m22c, out m23c, out m24c, out m31c, out m32c, out m33c, out m34c, out m41c, out m42c, out m43c, out m44c,
                                                            out m11d, out m12d, out m13d, out m14d, out m21d, out m22d, out m23d, out m24d, out m31d, out m32d, out m33d, out m34d, out m41d, out m42d, out m43d, out m44d); //


                                                        //somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].somechunk[indexofmeshinst].setnewmap(out m11, out m12, out m13, out m14, out m21, out m22, out m23, out m24, out m31, out m32, out m33, out m34, out m41, out m42, out m43, out m44, chosenmap, voxelchunkinvertoption); //


                                                        /*
                                                        if (currentIndex >= 0 && currentIndex <= 63)
                                                        {
                                                            if (currentIndex >= 0 && currentIndex <= 3)
                                                            {
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M11 = (float)m11;
                                                            }
                                                            else if (currentIndex >= 4 && currentIndex <= 7)
                                                            {
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M12 = (float)m12;
                                                            }
                                                            else if (currentIndex >= 8 && currentIndex <= 11)
                                                            {
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M13 = (float)m13;
                                                            }
                                                            else if (currentIndex >= 12 && currentIndex <= 15)
                                                            {
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M14 = (float)m14;
                                                            }
                                                            else if (currentIndex >= 16 && currentIndex <= 19)
                                                            {
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M21 = (float)m21;
                                                            }
                                                            else if (currentIndex >= 20 && currentIndex <= 23)
                                                            {
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M22 = (float)m22;
                                                            }
                                                            else if (currentIndex >= 24 && currentIndex <= 27)
                                                            {
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M23 = (float)m23;
                                                            }
                                                            else if (currentIndex >= 28 && currentIndex <= 31)
                                                            {
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M24 = (float)m24;
                                                            }
                                                            else if (currentIndex >= 32 && currentIndex <= 35)
                                                            {
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M31 = (float)m31;
                                                            }
                                                            else if (currentIndex >= 36 && currentIndex <= 39)
                                                            {
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M32 = (float)m32;
                                                            }
                                                            else if (currentIndex >= 40 && currentIndex <= 43)
                                                            {
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M33 = (float)m33;
                                                            }
                                                            else if (currentIndex >= 44 && currentIndex <= 47)
                                                            {
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M34 = (float)m34;
                                                            }
                                                            else if (currentIndex >= 48 && currentIndex <= 51)
                                                            {
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M41 = (float)m41;
                                                            }
                                                            else if (currentIndex >= 52 && currentIndex <= 55)
                                                            {
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M42 = (float)m42;
                                                            }
                                                            else if (currentIndex >= 56 && currentIndex <= 59)
                                                            {
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M43 = (float)m43;
                                                            }
                                                            else if (currentIndex >= 60 && currentIndex <= 63)
                                                            {
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M44 = (float)m44;
                                                            }
                                                        }*/



                                                        double selectablevectordouble = 0;
                                                        //currentIndex = indexofbyte;
                                                        int maxv = somevoxelvirtualdesktopglobals.tinyChunkWidth * somevoxelvirtualdesktopglobals.tinyChunkHeight * somevoxelvirtualdesktopglobals.tinyChunkDepth;

                                                        int somemaxvecdigit = somevoxelvirtualdesktopglobals.tinyChunkWidth;
                                                        int somecountermul = 0;
                                                        int somec = 0;

                                                        //3 

                                                        for (int t = 0; t <= currentIndex; t++) // index == 45 == 11 
                                                        {
                                                            if (somec == somemaxvecdigit)
                                                            {
                                                                somecountermul++;
                                                                somec = 0;
                                                            }
                                                            somec++;
                                                        }




                                                        //int somediv = index % 16;
                                                        /*
                                                        if (somebytecounter == 0)
                                                        {
                                                            byte1st = currentByte;
                                                        }
                                                        else if (somebytecounter == 1)
                                                        {
                                                            byte2nd = currentByte;
                                                        }
                                                        else if (somebytecounter == 2)
                                                        {
                                                            byte3rd = currentByte;
                                                        }*/




                                                        switch (somecountermul)
                                                        {
                                                            case 0:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M11 = (float)m11;
                                                                break;
                                                            case 1:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M12 = (float)m12;
                                                                break;
                                                            case 2:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M13 = (float)m13;
                                                                break;
                                                            case 3:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M14 = (float)m14;
                                                                break;
                                                            case 4:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M21 = (float)m21;
                                                                break;
                                                            case 5:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M22 = (float)m22;
                                                                break;
                                                            case 6:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M23 = (float)m23;
                                                                break;
                                                            case 7:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M24 = (float)m24;
                                                                break;
                                                            case 8:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M31 = (float)m31;
                                                                break;
                                                            case 9:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M32 = (float)m32;
                                                                break;
                                                            case 10:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M33 = (float)m33;
                                                                break;
                                                            case 11:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M34 = (float)m34;
                                                                break;
                                                            case 12:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M41 = (float)m41;
                                                                break;
                                                            case 13:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M42 = (float)m42;
                                                                break;
                                                            case 14:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M43 = (float)m43;
                                                                break;
                                                            case 15:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M44 = (float)m44;
                                                                break;




                                                            case 16:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M11 = (float)m11b;
                                                                break;
                                                            case 17:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M12 = (float)m12b;
                                                                break;
                                                            case 18:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M13 = (float)m13b;
                                                                break;
                                                            case 19:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M14 = (float)m14b;
                                                                break;
                                                            case 20:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M21 = (float)m21b;
                                                                break;
                                                            case 21:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M22 = (float)m22b;
                                                                break;
                                                            case 22:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M23 = (float)m23b;
                                                                break;
                                                            case 23:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M24 = (float)m24b;
                                                                break;
                                                            case 24:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M31 = (float)m31b;
                                                                break;
                                                            case 25:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M32 = (float)m32b;
                                                                break;
                                                            case 26:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M33 = (float)m33b;
                                                                break;
                                                            case 27:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M34 = (float)m34b;
                                                                break;
                                                            case 28:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M41 = (float)m41b;
                                                                break;
                                                            case 29:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M42 = (float)m42b;
                                                                break;
                                                            case 30:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M43 = (float)m43b;
                                                                break;
                                                            case 31:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M44 = (float)m44b;
                                                                break;



                                                            case 32:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M11 = (float)m11c;
                                                                break;
                                                            case 33:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M12 = (float)m12c;
                                                                break;
                                                            case 34:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M13 = (float)m13c;
                                                                break;
                                                            case 35:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M14 = (float)m14c;
                                                                break;
                                                            case 36:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M21 = (float)m21c;
                                                                break;
                                                            case 37:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M22 = (float)m22c;
                                                                break;
                                                            case 38:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M23 = (float)m23c;
                                                                break;
                                                            case 39:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M24 = (float)m24c;
                                                                break;
                                                            case 40:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M31 = (float)m31c;
                                                                break;
                                                            case 41:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M32 = (float)m32c;
                                                                break;
                                                            case 42:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M33 = (float)m33c;
                                                                break;
                                                            case 43:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M34 = (float)m34c;
                                                                break;
                                                            case 44:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M41 = (float)m41c;
                                                                break;
                                                            case 45:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M42 = (float)m42c;
                                                                break;
                                                            case 46:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M43 = (float)m43c;
                                                                break;
                                                            case 47:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M44 = (float)m44c;
                                                                break;




                                                            case 48:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M11 = (float)m11d;
                                                                break;
                                                            case 49:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M12 = (float)m12d;
                                                                break;
                                                            case 50:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M13 = (float)m13d;
                                                                break;
                                                            case 51:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M14 = (float)m14d;
                                                                break;
                                                            case 52:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M21 = (float)m21d;
                                                                break;
                                                            case 53:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M22 = (float)m22d;
                                                                break;
                                                            case 54:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M23 = (float)m23d;
                                                                break;
                                                            case 55:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M24 = (float)m24d;
                                                                break;
                                                            case 56:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M31 = (float)m31d;
                                                                break;
                                                            case 57:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M32 = (float)m32d;
                                                                break;
                                                            case 58:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M33 = (float)m33d;
                                                                break;
                                                            case 59:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M34 = (float)m34d;
                                                                break;
                                                            case 60:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M41 = (float)m41d;
                                                                break;
                                                            case 61:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M42 = (float)m42d;
                                                                break;
                                                            case 62:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M43 = (float)m43d;
                                                                break;
                                                            case 63:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M44 = (float)m44d;
                                                                break;
                                                        };

                                                        /*
                                                        double selectablevectordouble = 0;
                                                        currentIndex = indexofbyte;
                                                        int maxv = somevoxelvirtualdesktopglobals.tinyChunkWidth * somevoxelvirtualdesktopglobals.tinyChunkHeight * somevoxelvirtualdesktopglobals.tinyChunkDepth;
                                                        int somemaxvecdigit = 16;
                                                        int somecountermul = 0;
                                                        int somec = 0;

                                                        for (int t = 0; t < currentIndex; t++)
                                                        {
                                                            if (somec == somemaxvecdigit)
                                                            {
                                                                somecountermul++;
                                                                somec = 0;
                                                            }
                                                            somec++;
                                                        }
                                                        */




                                                        //int somediv = index % 16;
                                                        /*
                                                        if (somebytecounter == 0)
                                                        {
                                                            byte1st = currentByte;
                                                        }
                                                        else if (somebytecounter == 1)
                                                        {
                                                            byte2nd = currentByte;
                                                        }
                                                        else if (somebytecounter == 2)
                                                        {
                                                            byte3rd = currentByte;
                                                        }*/



                                                        /*
                                                        switch (somecountermul)
                                                        {
                                                            case 0:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M11 = (float)m11;
                                                                break;
                                                            case 1:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M12 = (float)m12;
                                                                break;
                                                            case 2:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M13 = (float)m13;
                                                                break;
                                                            case 3:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M14 = (float)m14;
                                                                break;
                                                            case 4:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M21 = (float)m21;
                                                                break;
                                                            case 5:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M22 = (float)m22;
                                                                break;
                                                            case 6:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M23 = (float)m23;
                                                                break;
                                                            case 7:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M24 = (float)m24;
                                                                break;
                                                            case 8:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M31 = (float)m31;
                                                                break;
                                                            case 9:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M32 = (float)m32;
                                                                break;
                                                            case 10:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M33 = (float)m33;
                                                                break;
                                                            case 11:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M34 = (float)m34;
                                                                break;
                                                            case 12:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M41 = (float)m41;
                                                                break;
                                                            case 13:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M42 = (float)m42;
                                                                break;
                                                            case 14:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M43 = (float)m43;
                                                                break;
                                                            case 15:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrix[indexofmeshinst].instancematrix.M44 = (float)m44;
                                                                break;




                                                            case 16:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M11 = (float)m11b;
                                                                break;
                                                            case 17:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M12 = (float)m12b;
                                                                break;
                                                            case 18:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M13 = (float)m13b;
                                                                break;
                                                            case 19:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M14 = (float)m14b;
                                                                break;
                                                            case 20:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M21 = (float)m21b;
                                                                break;
                                                            case 21:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M22 = (float)m22b;
                                                                break;
                                                            case 22:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M23 = (float)m23b;
                                                                break;
                                                            case 23:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M24 = (float)m24b;
                                                                break;
                                                            case 24:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M31 = (float)m31b;
                                                                break;
                                                            case 25:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M32 = (float)m32b;
                                                                break;
                                                            case 26:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M33 = (float)m33b;
                                                                break;
                                                            case 27:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M34 = (float)m34b;
                                                                break;
                                                            case 28:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M41 = (float)m41b;
                                                                break;
                                                            case 29:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M42 = (float)m42b;
                                                                break;
                                                            case 30:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M43 = (float)m43b;
                                                                break;
                                                            case 31:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixb[indexofmeshinst].instancematrix.M44 = (float)m44b;
                                                                break;



                                                            case 32:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M11 = (float)m11c;
                                                                break;
                                                            case 33:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M12 = (float)m12c;
                                                                break;
                                                            case 34:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M13 = (float)m13c;
                                                                break;
                                                            case 35:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M14 = (float)m14c;
                                                                break;
                                                            case 36:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M21 = (float)m21c;
                                                                break;
                                                            case 37:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M22 = (float)m22c;
                                                                break;
                                                            case 38:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M23 = (float)m23c;
                                                                break;
                                                            case 39:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M24 = (float)m24c;
                                                                break;
                                                            case 40:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M31 = (float)m31c;
                                                                break;
                                                            case 41:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M32 = (float)m32c;
                                                                break;
                                                            case 42:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M33 = (float)m33c;
                                                                break;
                                                            case 43:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M34 = (float)m34c;
                                                                break;
                                                            case 44:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M41 = (float)m41c;
                                                                break;
                                                            case 45:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M42 = (float)m42c;
                                                                break;
                                                            case 46:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M43 = (float)m43c;
                                                                break;
                                                            case 47:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixc[indexofmeshinst].instancematrix.M44 = (float)m44c;
                                                                break;




                                                            case 48:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M11 = (float)m11d;
                                                                break;
                                                            case 49:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M12 = (float)m12d;
                                                                break;
                                                            case 50:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M13 = (float)m13d;
                                                                break;
                                                            case 51:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M14 = (float)m14d;
                                                                break;
                                                            case 52:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M21 = (float)m21d;
                                                                break;
                                                            case 53:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M22 = (float)m22d;
                                                                break;
                                                            case 54:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M23 = (float)m23d;
                                                                break;
                                                            case 55:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M24 = (float)m24d;
                                                                break;
                                                            case 56:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M31 = (float)m31d;
                                                                break;
                                                            case 57:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M32 = (float)m32d;
                                                                break;
                                                            case 58:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M33 = (float)m33d;
                                                                break;
                                                            case 59:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M34 = (float)m34d;
                                                                break;
                                                            case 60:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M41 = (float)m41d;
                                                                break;
                                                            case 61:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M42 = (float)m42d;
                                                                break;
                                                            case 62:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M43 = (float)m43d;
                                                                break;
                                                            case 63:
                                                                somevoxelvirtualdesktop[indexofmainobject].arrayofindexzeromesh[indexofmeshzero].instancesmatrixd[indexofmeshinst].instancematrix.M44 = (float)m44d;
                                                                break;
                                                        };*/







                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else if (playerusebrush == 1) ///////////////////////////BRUSH/////////////////////////////////////
                {


                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }








            return scgraphicssecpackagemessage.scjittertasks;
        }




        public scmessageobjectjitter[][] renderstandardvirtualdesktop(scgraphicssecpackage scgraphicssecpackagemessage)
        {


            //Program.MessageBox((IntPtr)0, "workonshaders", "scmsg", 0);

            _sc_jitter_tasks = scgraphicssecpackagemessage.scjittertasks;
            viewMatrix = scgraphicssecpackagemessage.viewMatrix;
            projectionMatrix = scgraphicssecpackagemessage.projectionMatrix; //_projectionMatrix;
            originRot = scgraphicssecpackagemessage.originRot; // originRot;
            rotatingMatrix = scgraphicssecpackagemessage.rotatingMatrix; //rotatingMatrix;
            hmdrotMatrix = scgraphicssecpackagemessage.hmdmatrixRot; //hmdmatrixRot;
            hmd_matrix = scgraphicssecpackagemessage.hmd_matrix; //hmd_matrix;
            rotatingMatrixForPelvis = scgraphicssecpackagemessage.rotatingMatrixForPelvis; //rotatingMatrixForPelvis;
            _rightTouchMatrix = scgraphicssecpackagemessage.rightTouchMatrix; //_rightTouchMatrix;
            _leftTouchMatrix = scgraphicssecpackagemessage.leftTouchMatrix; //_leftTouchMatrix;
            oriProjectionMatrix = scgraphicssecpackagemessage.oriProjectionMatrix; //oriProjectionMatrix;
            extramatrix = scgraphicssecpackagemessage.someextrapelvismatrix; //someextrapelvismatrix;
            OFFSETPOS = scgraphicssecpackagemessage.offsetpos; // OFFSETPOS;
            handPoseRight = scgraphicssecpackagemessage.handPoseRight; //handPoseRight;
            handPoseLeft = scgraphicssecpackagemessage.handPoseLeft; //handPoseLeft;

            _worldMatrix = sccs.scgraphics.scdirectx.D3D.WorldMatrix;
            _viewMatrix = viewMatrix;
            _projectionMatrix = oriProjectionMatrix;
            //_worldMatrix.Transpose();


            /*if (Program._useOculusRift == 1)
            {
                _projectionMatrix = oriProjectionMatrix;
                _viewMatrix.Transpose();
            }
            else
            {
                _worldMatrix.Transpose();
                _viewMatrix.Transpose();
                _projectionMatrix = scgraphicssecpackagemessage.projectionMatrix;
                _projectionMatrix.Transpose();
            }
            */

            //_worldMatrix.Transpose();
            _viewMatrix = scupdate.Camera.ViewMatrix;// Matrix.LookAtLH(new Vector3(0, 0, -viewZ), new Vector3(0, 0, 0), Vector3.UnitY);
            _projectionMatrix = Matrix.PerspectiveFovLH((float)Math.PI / 4.0f, scdirectx.D3D.SurfaceWidth / (float)scdirectx.D3D.SurfaceHeight, 0.1f, 1000.0f);
            //var viewProj0 = Matrix.Multiply(_viewMatrix, scdirectx.D3D.ProjectionMatrix);
            //_projectionMatrix.Transpose();
            //_viewMatrix.Transpose();



            Vector4 cursorpos = new Vector4(worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M43, 1.0f);

            //var lightpos0 = new Vector4(sccs.scgraphics.scupdate.OFFSETPOS.X, sccs.scgraphics.scupdate.OFFSETPOS.Y, sccs.scgraphics.scupdate.OFFSETPOS.Z,1.0f);  //new Vector3(0, 100, 0);

            Matrix resmat = worldmatrixinstancesvoxelsforcalculationsonly[0][0][19]; //somevoxelvirtualdesktop[0].currentWorldMatrix;
            Quaternion _testQuator;
            Quaternion.RotationMatrix(ref resmat, out _testQuator);
            Vector4 forwardcursor = new Vector4(sc_maths._newgetdirforward(_testQuator), 1.0f);
            Vector4 datavec = cursorpos - (forwardcursor * 0.01f);

            _DLightBuffer_voxel_cube[0].lightPosition = new Vector3(datavec.X, datavec.Y, datavec.Z);// 

            float disco_sphere_rot_speed = 0.5f;
            var timeSinceStart = (float)(DateTime.Now - startTime).TotalSeconds;
            Matrix worldmatlightrot = Matrix.Scaling(1.0f) * Matrix.RotationX(timeSinceStart * disco_sphere_rot_speed) * Matrix.RotationY(timeSinceStart * 2 * disco_sphere_rot_speed) * Matrix.RotationZ(timeSinceStart * 3 * disco_sphere_rot_speed);
            //Matrix worldmatlightrot = Matrix.Scaling(1.0f) * Matrix.RotationY(timeSinceStart * 2 * disco_sphere_rot_speed);

            //var dirInstanceRight = sc_maths._newgetdirleft(somedirquat);
            //var dirInstanceUp = sc_maths._newgetdirup(somedirquat);

            var rotcam = sccs.scgraphics.scupdate.Camera.rotationMatrix; //worldmatlightrot;//
            Quaternion lightrotquat;
            Quaternion.RotationMatrix(ref rotcam, out lightrotquat);
            Vector4 dirlight = -new Vector4(sc_maths._newgetdirforward(lightrotquat), 1.0f); //new Vector4(0,0,-1.0f, 1.0f);//  new Vector4(sc_maths._newgetdirforward(lightrotquat), 1.0f); // 


            //PHYSICS SCREENS
            //_world_screen_list[0][0].Render(sccs.scgraphics.scdirectx.D3D.device.ImmediateContext);
            //sccs.scgraphics.scupdate._shaderManager.RenderInstancedObject(sccs.scgraphics.scdirectx.D3D.device.ImmediateContext, _world_screen_list[0][0].IndexCount, _world_screen_list[0][0].InstanceCount, _world_screen_list[0][0]._POSITION, viewMatrix, projectionMatrix, sccs.scgraphics.scupdate.screencaptureframe.ShaderResource, _DLightBuffer_cube, _world_screen_list[0][0]);
            //END OF 



            if (_world_screen_list != null)
            {
                if (_world_screen_list[0] != null)
                {
                    if (_world_screen_list[0][0] != null)
                    {
                        //_world_screen_list[0][0].altinstancecount = 1;

                        //PHYSICS SCREENS
                        _world_screen_list[0][0].Render(sccs.scgraphics.scdirectx.D3D.device.ImmediateContext);
                        sccs.scgraphics.scupdate._shaderManager.RenderInstancedObject(sccs.scgraphics.scdirectx.D3D.device.ImmediateContext, _world_screen_list[0][0].IndexCount, _world_screen_list[0][0].InstanceCount, _world_screen_list[0][0]._POSITION, _viewMatrix, _projectionMatrix, _sc_jitter_tasks[0][0].shaderresource, _DLightBuffer_cube, _world_screen_list[0][0], 0, _world_screen_list[0][0].indexofshader);

                    }
                }
            }
           
            return scgraphicssecpackagemessage.scjittertasks;
        }



        public scmessageobjectjitter[][] workonshaderforsccubes(scgraphicssecpackage scgraphicssecpackagemessage)
        {


            //Program.MessageBox((IntPtr)0, "workonshaders", "scmsg", 0);

            _sc_jitter_tasks = scgraphicssecpackagemessage.scjittertasks;
            viewMatrix = scgraphicssecpackagemessage.viewMatrix;
            projectionMatrix = scgraphicssecpackagemessage.projectionMatrix; //_projectionMatrix;
            originRot = scgraphicssecpackagemessage.originRot; // originRot;
            rotatingMatrix = scgraphicssecpackagemessage.rotatingMatrix; //rotatingMatrix;
            hmdrotMatrix = scgraphicssecpackagemessage.hmdmatrixRot; //hmdmatrixRot;
            hmd_matrix = scgraphicssecpackagemessage.hmd_matrix; //hmd_matrix;
            rotatingMatrixForPelvis = scgraphicssecpackagemessage.rotatingMatrixForPelvis; //rotatingMatrixForPelvis;
            _rightTouchMatrix = scgraphicssecpackagemessage.rightTouchMatrix; //_rightTouchMatrix;
            _leftTouchMatrix = scgraphicssecpackagemessage.leftTouchMatrix; //_leftTouchMatrix;
            oriProjectionMatrix = scgraphicssecpackagemessage.oriProjectionMatrix; //oriProjectionMatrix;
            extramatrix = scgraphicssecpackagemessage.someextrapelvismatrix; //someextrapelvismatrix;
            OFFSETPOS = scgraphicssecpackagemessage.offsetpos; // OFFSETPOS;
            handPoseRight = scgraphicssecpackagemessage.handPoseRight; //handPoseRight;
            handPoseLeft = scgraphicssecpackagemessage.handPoseLeft; //handPoseLeft;

            _worldMatrix = sccs.scgraphics.scdirectx.D3D.WorldMatrix;
            _viewMatrix = viewMatrix;
            _projectionMatrix = oriProjectionMatrix;
            //_worldMatrix.Transpose();


            /*if (Program._useOculusRift == 1)
            {
                _projectionMatrix = oriProjectionMatrix;
                _viewMatrix.Transpose();
            }
            else
            {
                _worldMatrix.Transpose();
                _viewMatrix.Transpose();
                _projectionMatrix = scgraphicssecpackagemessage.projectionMatrix;
                _projectionMatrix.Transpose();
            }
            */

            //_worldMatrix.Transpose();
            _viewMatrix = scupdate.Camera.ViewMatrix;// Matrix.LookAtLH(new Vector3(0, 0, -viewZ), new Vector3(0, 0, 0), Vector3.UnitY);
            _projectionMatrix = Matrix.PerspectiveFovLH((float)Math.PI / 4.0f, scdirectx.D3D.SurfaceWidth / (float)scdirectx.D3D.SurfaceHeight, 0.1f, 1000.0f);
            //var viewProj0 = Matrix.Multiply(_viewMatrix, scdirectx.D3D.ProjectionMatrix);
            //_projectionMatrix.Transpose();
            //_viewMatrix.Transpose();





            Vector4 cursorpos = new Vector4(worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M43, 1.0f);

            //var lightpos0 = new Vector4(sccs.scgraphics.scupdate.OFFSETPOS.X, sccs.scgraphics.scupdate.OFFSETPOS.Y, sccs.scgraphics.scupdate.OFFSETPOS.Z,1.0f);  //new Vector3(0, 100, 0);

            Matrix resmat = worldmatrixinstancesvoxelsforcalculationsonly[0][0][19]; //somevoxelvirtualdesktop[0].currentWorldMatrix;
            Quaternion _testQuator;
            Quaternion.RotationMatrix(ref resmat, out _testQuator);
            Vector4 forwardcursor = new Vector4(sc_maths._newgetdirforward(_testQuator), 1.0f);
            Vector4 datavec = cursorpos - (forwardcursor * 0.01f);

            _DLightBuffer_voxel_cube[0].lightPosition = new Vector3(datavec.X, datavec.Y, datavec.Z);// 






            float disco_sphere_rot_speed = 0.5f;
            var timeSinceStart = (float)(DateTime.Now - startTime).TotalSeconds;
            Matrix worldmatlightrot = Matrix.Scaling(1.0f) * Matrix.RotationX(timeSinceStart * disco_sphere_rot_speed) * Matrix.RotationY(timeSinceStart * 2 * disco_sphere_rot_speed) * Matrix.RotationZ(timeSinceStart * 3 * disco_sphere_rot_speed);
            //Matrix worldmatlightrot = Matrix.Scaling(1.0f) * Matrix.RotationY(timeSinceStart * 2 * disco_sphere_rot_speed);

            //var dirInstanceRight = sc_maths._newgetdirleft(somedirquat);
            //var dirInstanceUp = sc_maths._newgetdirup(somedirquat);

            var rotcam = sccs.scgraphics.scupdate.Camera.rotationMatrix; //worldmatlightrot;//
            Quaternion lightrotquat;
            Quaternion.RotationMatrix(ref rotcam, out lightrotquat);
            Vector4 dirlight = -new Vector4(sc_maths._newgetdirforward(lightrotquat), 1.0f); //new Vector4(0,0,-1.0f, 1.0f);//  new Vector4(sc_maths._newgetdirforward(lightrotquat), 1.0f); // 



            //_world_screen_assets_list[0][0].altinstancecount = 1;


            //PHYSICS SCREEN ASSETS
            _world_screen_assets_list[0][0].Render(sccs.scgraphics.scdirectx.D3D.device.ImmediateContext);
            sccs.scgraphics.scupdate._shaderManager.RenderInstancedObject(sccs.scgraphics.scdirectx.D3D.device.ImmediateContext, _world_screen_assets_list[0][0].IndexCount, _world_screen_assets_list[0][0].InstanceCount, _world_screen_assets_list[0][0]._POSITION, _viewMatrix, _projectionMatrix, null, _DLightBuffer_cube, _world_screen_assets_list[0][0], 1, _world_screen_assets_list[0][0].indexofshader);
            //END OF



            return scgraphicssecpackagemessage.scjittertasks;
        }



        public scmessageobjectjitter[][] workonshaders(scgraphicssecpackage scgraphicssecpackagemessage)
        {




            if (somevoxelvirtualdesktopglobals != null)
            {


                //Program.MessageBox((IntPtr)0, "workonshaders", "scmsg", 0);

                _sc_jitter_tasks = scgraphicssecpackagemessage.scjittertasks;
                viewMatrix = scgraphicssecpackagemessage.viewMatrix;
                projectionMatrix = scgraphicssecpackagemessage.projectionMatrix; //_projectionMatrix;
                originRot = scgraphicssecpackagemessage.originRot; // originRot;
                rotatingMatrix = scgraphicssecpackagemessage.rotatingMatrix; //rotatingMatrix;
                hmdrotMatrix = scgraphicssecpackagemessage.hmdmatrixRot; //hmdmatrixRot;
                hmd_matrix = scgraphicssecpackagemessage.hmd_matrix; //hmd_matrix;
                rotatingMatrixForPelvis = scgraphicssecpackagemessage.rotatingMatrixForPelvis; //rotatingMatrixForPelvis;
                _rightTouchMatrix = scgraphicssecpackagemessage.rightTouchMatrix; //_rightTouchMatrix;
                _leftTouchMatrix = scgraphicssecpackagemessage.leftTouchMatrix; //_leftTouchMatrix;
                oriProjectionMatrix = scgraphicssecpackagemessage.oriProjectionMatrix; //oriProjectionMatrix;
                extramatrix = scgraphicssecpackagemessage.someextrapelvismatrix; //someextrapelvismatrix;
                OFFSETPOS = scgraphicssecpackagemessage.offsetpos; // OFFSETPOS;
                handPoseRight = scgraphicssecpackagemessage.handPoseRight; //handPoseRight;
                handPoseLeft = scgraphicssecpackagemessage.handPoseLeft; //handPoseLeft;

                _worldMatrix = sccs.scgraphics.scdirectx.D3D.WorldMatrix;
                _viewMatrix = viewMatrix;
                _projectionMatrix = oriProjectionMatrix;
                //_worldMatrix.Transpose();


                /*if (Program._useOculusRift == 1)
                {
                    _projectionMatrix = oriProjectionMatrix;
                    _viewMatrix.Transpose();
                }
                else
                {
                    _worldMatrix.Transpose();
                    _viewMatrix.Transpose();
                    _projectionMatrix = scgraphicssecpackagemessage.projectionMatrix;
                    _projectionMatrix.Transpose();
                }*/

                _worldMatrix.Transpose();
                _viewMatrix = scupdate.Camera.ViewMatrix;// Matrix.LookAtLH(new Vector3(0, 0, -viewZ), new Vector3(0, 0, 0), Vector3.UnitY);
                _projectionMatrix = Matrix.PerspectiveFovLH((float)Math.PI / 4.0f, scdirectx.D3D.SurfaceWidth / (float)scdirectx.D3D.SurfaceHeight, 0.1f, 1000.0f);
                //var viewProj0 = Matrix.Multiply(_viewMatrix, scdirectx.D3D.ProjectionMatrix);
                _projectionMatrix.Transpose();
                _viewMatrix.Transpose();


                Vector4 cursorpos = new Vector4(worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M43, 1.0f);

                //var lightpos0 = new Vector4(sccs.scgraphics.scupdate.OFFSETPOS.X, sccs.scgraphics.scupdate.OFFSETPOS.Y, sccs.scgraphics.scupdate.OFFSETPOS.Z,1.0f);  //new Vector3(0, 100, 0);

                Matrix resmat = worldmatrixinstancesvoxelsforcalculationsonly[0][0][19]; //somevoxelvirtualdesktop[0].currentWorldMatrix;
                Quaternion _testQuator;
                Quaternion.RotationMatrix(ref resmat, out _testQuator);
                Vector4 forwardcursor = new Vector4(sc_maths._newgetdirforward(_testQuator), 1.0f);
                Vector4 datavec = cursorpos - (forwardcursor * 0.01f);

                _DLightBuffer_voxel_cube[0].lightPosition = new Vector3(datavec.X, datavec.Y, datavec.Z);// 






                float disco_sphere_rot_speed = 0.5f;
                var timeSinceStart = (float)(DateTime.Now - startTime).TotalSeconds;
                Matrix worldmatlightrot = Matrix.Scaling(1.0f) * Matrix.RotationX(timeSinceStart * disco_sphere_rot_speed) * Matrix.RotationY(timeSinceStart * 2 * disco_sphere_rot_speed) * Matrix.RotationZ(timeSinceStart * 3 * disco_sphere_rot_speed);
                //Matrix worldmatlightrot = Matrix.Scaling(1.0f) * Matrix.RotationY(timeSinceStart * 2 * disco_sphere_rot_speed);

                //var dirInstanceRight = sc_maths._newgetdirleft(somedirquat);
                //var dirInstanceUp = sc_maths._newgetdirup(somedirquat);

                var rotcam = sccs.scgraphics.scupdate.Camera.rotationMatrix; //worldmatlightrot;//
                Quaternion lightrotquat;
                Quaternion.RotationMatrix(ref rotcam, out lightrotquat);
                Vector4 dirlight = -new Vector4(sc_maths._newgetdirforward(lightrotquat), 1.0f); //new Vector4(0,0,-1.0f, 1.0f);//  new Vector4(sc_maths._newgetdirforward(lightrotquat), 1.0f); // 


                //VOXEL VIRTUAL DESKTOP
                //VOXEL VIRTUAL DESKTOP
                //VOXEL VIRTUAL DESKTOP
                for (int xxx = 0; xxx < somevoxelvirtualdesktopw; xxx++)
                {
                    for (int yyy = 0; yyy < somevoxelvirtualdesktoph; yyy++)
                    {
                        for (int zzz = 0; zzz < somevoxelvirtualdesktopd; zzz++)
                        {
                            //somechunkmesh
                            var somevoxelvirtualdesktopindex = xxx + somevoxelvirtualdesktopw * (yyy + somevoxelvirtualdesktoph * zzz);


                            for (int x = 0; x < somevoxelvirtualdesktopglobals.numberOfObjectInWidth; x++)
                            {
                                for (int y = 0; y < somevoxelvirtualdesktopglobals.numberOfObjectInHeight; y++)
                                {
                                    for (int z = 0; z < somevoxelvirtualdesktopglobals.numberOfObjectInDepth; z++)
                                    {
                                        int c = x + somevoxelvirtualdesktopglobals.numberOfObjectInWidth * (y + somevoxelvirtualdesktopglobals.numberOfObjectInHeight * z);

                                        for (int xx = 0; xx < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth; xx++)
                                        {
                                            for (int yy = 0; yy < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight; yy++)
                                            {
                                                for (int zz = 0; zz < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth; zz++)
                                                {
                                                    int cc = xx + somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * (yy + somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * zz);

                                                    /*Matrix worldMatrixChunkDroneInstance = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].arrayofzeromeshinstances[cc].current_pos;

                                                    Matrix worldMatrixmain = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].worldmatofobj;

                                                    Matrix resmat;
                                                    Matrix.Multiply(ref worldMatrixmain, ref worldMatrixChunkDroneInstance, out resmat);
                                                    Quaternion _testQuator;*/



                                                    //TO READD FOR PERLIN
                                                    //TO READD FOR PERLIN
                                                    /*
                                                    if (perlinvalueswtc[0][0][somevoxelvirtualdesktopindex][c][cc] == 0)
                                                    {
                                                        var randnumber = sc_maths.getSomeRandNumThousandDecimal(0.01f, 0.15f, 0);
                                                        var thenoiseforshader = somefastnoise.GetPerlin(xx, yy, zz);

                                                        perlinvalue[0][0][somevoxelvirtualdesktopindex][c][cc] = thenoiseforshader;

                                                        perlinvalueswtc[0][0][somevoxelvirtualdesktopindex][c][cc] = 1;
                                                    }
                                                    */
                                                    
                                                    //TO READD FOR PERLIN
                                                    //TO READD FOR PERLIN





                                                    //Console.WriteLine("cursorpos:" + cursorpos);



                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].diffuseColor = diffuseColour;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].ambientColor = ambientColor;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].specularcolor = new Vector4(1, 1, 1, 1);
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].lightDirection = forwardcursor;//


                                                    //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].lightPosition = cursorpos - (forwardcursor * 0.1f);// 
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].lightPosition = cursorpos - (forwardcursor * 0.01f);// 

                                                    //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lightBuffer[0].lightPosition = cursorpos - new Vector4(dirInstanceForward.X, dirInstanceForward.Y, dirInstanceForward.Z, 1.0f);
                                                    //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].lightDirection = -Vector3.Up;// dirlight;



                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].lightextras = diffuseColour;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].lightextras.X = sccsvvdhd.Form1.someform.screencapturebrightnessvalue;

                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].lightextras.W = sccsvvdhd.Form1.someform.sccsvvdhdgrayscaleorcolored;






                                                    //sccsvvdhd.Form1.drawString = (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].lightextras.Z).ToString();





                                                    //EXCEPTION
                                                    /*
                                                    if (sccsvvdhd.Form1.currentform.thepicturebox1 != null)
                                                    {
                                                        //Console.WriteLine("frame arrives here0");                             
                                                        var refreshDXEngineAction = new Action(delegate
                                                        {
                                                            sccsvvdhd.Form1.currentform.thepicturebox1.Invoke((MethodInvoker)delegate
                                                            {
                                                                sccsvvdhd.Form1.currentform.thepicturebox1.Refresh();
                                                            });
                                                        });
                                                        System.Windows.Threading.Dispatcher.CurrentDispatcher.Invoke(System.Windows.Threading.DispatcherPriority.Normal, refreshDXEngineAction);



                                                    }*/
                                                    //EXCEPTION



                                                    

                                                    //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].lightextras.W += (thenoiseforshader + randnumber);// randnumber;

                                                    
                                                    //TO READD FOR PERLIN
                                                    //TO READD FOR PERLIN
                                                   /* if (perlinvalueswtc[0][0][somevoxelvirtualdesktopindex][c][cc] == 1)
                                                    {
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].lightextras.Z = (perlinvalue[0][0][somevoxelvirtualdesktopindex][c][cc]);//
                                                    }*/
                                                    
                                                    //TO READD FOR PERLIN
                                                    //TO READD FOR PERLIN

                                                    if (sccsvvdhd.Form1.someform.sccsvvdhdgrayscaleorcolored == 0 || sccsvvdhd.Form1.someform.sccsvvdhdgrayscaleorcolored == 1)
                                                    {
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].lightextras.Y = sccsvvdhd.Form1.someform.lightintensityvalue;//100.0f;

                                                    }
                                                    else if (sccsvvdhd.Form1.someform.sccsvvdhdgrayscaleorcolored == 2)
                                                    {
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].lightextras.Y = (sccsvvdhd.Form1.someform.lightintensityvalue);
                                                    }

                                                    //Console.WriteLine("lightslider:" + somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].lightextras.Y);






                                                    //Console.WriteLine(sccsvvdhd.Form1.someform.lightintensityvalue);




                                                    //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lightBuffer[0].padding0 = 75;
                                                    //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lightBuffer[0].padding1 = 100;
                                                    //specularPower

                                                    //Console.WriteLine("screenoption:" + somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].lightextras.W);


                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].cursorcolor.X = sccsvvdhd.Form1.cursorColor.R;// sccsvvdhd.Form1.someform.cursorlightcolorr;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].cursorcolor.Y = sccsvvdhd.Form1.cursorColor.G;//sccsvvdhd.Form1.someform.cursorlightcolorg;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].cursorcolor.Z = sccsvvdhd.Form1.cursorColor.B;//sccsvvdhd.Form1.someform.cursorlightcolorb;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].cursorcolor.W = sccsvvdhd.Form1.someform.sccsvvdhdpointlighttype;


                                                    if (sccsvvdhd.Form1.someform.gridtypeoption != 0)
                                                    {
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].gridcolor.X = sccsvvdhd.Form1.gridColor.R;//sccsvvdhd.Form1.someform.gridcolorr;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].gridcolor.Y = sccsvvdhd.Form1.gridColor.G;//sccsvvdhd.Form1.someform.gridcolorg;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].gridcolor.Z = sccsvvdhd.Form1.gridColor.B;//sccsvvdhd.Form1.someform.gridcolorb;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].gridcolor.W = sccsvvdhd.Form1.someform.gridtypeoption;

                                                    }
                                                    else
                                                    {
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].gridcolor.X = sccsvvdhd.Form1.gridColor.R;//sccsvvdhd.Form1.someform.gridcolorr;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].gridcolor.Y = sccsvvdhd.Form1.gridColor.G;//sccsvvdhd.Form1.someform.gridcolorg;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].gridcolor.Z = sccsvvdhd.Form1.gridColor.B;//sccsvvdhd.Form1.someform.gridcolorb;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].gridcolor.W = -1;

                                                    }


                                                    //Console.WriteLine("grid:" + somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].gridcolor.W + "/cursorcolor:" + somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].cursorcolor.W);
                                                }
                                            }

                                        }
                                    }


                                }
                            }


                        }
                    }


                }




                /*
                for (int c = 0; c < arrayOfChunks.Length; c++)
                {


                    chunkDat.instanceBuffer = arrayOfChunks[c].InstanceBuffer;
                    chunkDat.arrayOfInstanceVertex = arrayOfChunks[c].arrayOfInstanceVertex;
                    chunkDat.arrayOfInstancePos = arrayOfChunks[c].instances;//arrayOfChunks[c].instances;
                    chunkDat.arrayOfInstanceIndices = arrayOfChunks[c].arrayOfInstanceIndices;
                    chunkDat.arrayOfInstanceNormals = arrayOfChunks[c].arrayOfInstanceNormals;
                    chunkDat.arrayOfInstanceTextureCoordinates = arrayOfChunks[c].arrayOfInstanceTexturesCoordinates;
                    //arrayOfInstanceColors
                    chunkDat.dVertexData = arrayOfChunks[c].arrayOfDVertex;

                    chunkDat.Device = sccs.scgraphics.scdirectx.D3D.Device;
                    chunkDat.worldMatrix = sccs.scgraphics.scdirectx.WorldMatrix;
                    chunkDat.viewMatrix = _viewMatrix;
                    chunkDat.projectionMatrix = _projectionMatrix;
                    chunkDat.chunkShader = arrayOfChunks[c].shaderOfChunk;
                    chunkDat.matrixBuffer = arrayOfChunks[c].arrayOfMatrixBuff;
                    chunkDat.vertBuffers = arrayOfChunks[c].vertBuffers;
                    chunkDat.colorBuffers = arrayOfChunks[c].colorBuffers;
                    chunkDat.indexBuffers = arrayOfChunks[c].indexBuffers;
                    chunkDat.instanceBuffers = arrayOfChunks[c].instanceBuffers;
                    chunkDat.dVertBuffers = arrayOfChunks[c].dVertBuffers;
                    chunkDat.texBuffers = arrayOfChunks[c].texBuffers;
                    chunkDat.normalBuffers = arrayOfChunks[c].normalBuffers;
                    chunkDat.lightBuffer = arrayOfChunks[c].lightBuffer;


                    arrayOfChunks[c].shaderOfChunk.Renderer(chunkDat);


                }



                */




            }








            //PHYSICS SCREEN ASSETS
            //_world_screen_assets_list[0][0].Render(sccs.scgraphics.scdirectx.D3D.device.ImmediateContext);
            //sccs.scgraphics.scupdate._shaderManager.RenderInstancedObject(sccs.scgraphics.scdirectx.D3D.device.ImmediateContext, _world_screen_assets_list[0][0].IndexCount, _world_screen_assets_list[0][0].InstanceCount, _world_screen_assets_list[0][0]._POSITION, viewMatrix, projectionMatrix, null, _DLightBuffer_cube, _world_screen_assets_list[0][0], 20);
            //END OF





            var rotcam0 = sccs.scgraphics.scupdate.Camera.rotationMatrix;
            Quaternion lightrotquater;
            Quaternion.RotationMatrix(ref rotcam0, out lightrotquater);
            var dirlighter = -sc_maths._newgetdirforward(lightrotquater);

            //Matrix.RotationY(rotation, out _worldMat.Off
            /*
            Model.Render(sccs.scgraphics.scdirectx.D3D.DeviceContext);
            // Render the model using the color shader.
            if (!LightShader.Render(sccs.scgraphics.scdirectx.D3D.DeviceContext, Model.IndexCount, _worldMatrix, viewMatrix, projectionMatrix, Model.Texture.TextureResource, dirlighter, Light.AmbientColor, Light.DiffuseColour, sccs.scgraphics.scupdate.Camera.GetPosition(), Light.SpecularColor, Light.SpecularPower)) // Light.Direction
            {
                //Program.MessageBox((IntPtr)0, "!LightShader render", "scmsg", 0);
            }*/
            //Rotate();





            /*
            for (int xx = 0; xx < Program.physicsengineinstancex; xx++)
            {
                for (int yy = 0; yy < Program.physicsengineinstancey; yy++)
                {
                    for (int zz = 0; zz < Program.physicsengineinstancez; zz++)
                    {
                        var indexer00 = xx + Program.physicsengineinstancex * (yy + Program.physicsengineinstancey * zz);

                        try
                        {

                            for (int x = 0; x < Program.worldwidth; x++)
                            {
                                for (int y = 0; y < Program.worldheight; y++)
                                {
                                    for (int z = 0; z < Program.worlddepth; z++)
                                    {
                                        var indexer01 = x + Program.worldwidth * (y + Program.worldheight * z);

                                        //Vector3 playerPos = new Vector3(_player_torso[0][0]._arrayOfInstances[0].current_pos.M41, _player_torso[0][0]._arrayOfInstances[0].current_pos.M42, _player_torso[0][0]._arrayOfInstances[0].current_pos.M43);


                                        
                                        //PHYSICS CUBES
                                        _world_cube_list[indexer00][indexer01].Render(sccs.scgraphics.scdirectx.D3D.device.ImmediateContext);
                                        sccs.scgraphics.scupdate._shaderManager.RenderInstancedObject(sccs.scgraphics.scdirectx.D3D.device.ImmediateContext, _world_cube_list[indexer00][indexer01].IndexCount, _world_cube_list[indexer00][indexer01].InstanceCount, _world_cube_list[indexer00][indexer01]._POSITION, viewMatrix, projectionMatrix, sccs.scgraphics.scupdate.screencaptureframe.ShaderResource, _DLightBuffer_cube, _world_cube_list[indexer00][indexer01]); // oculusRiftDir
                                        /*
                                        //PHYSICS CONES
                                        _world_cone_list[indexer00][indexer01].Render(sccs.scgraphics.scdirectx.D3D.device.ImmediateContext);
                                        sccs.scgraphics.scupdate._shaderManager.RenderInstancedObject(sccs.scgraphics.scdirectx.D3D.device.ImmediateContext, _world_cone_list[indexer00][indexer01].IndexCount, _world_cone_list[indexer00][indexer01].InstanceCount, _world_cone_list[indexer00][indexer01]._POSITION, viewMatrix, projectionMatrix, sccs.scgraphics.scupdate._desktopFrame.ShaderResource, _DLightBuffer_cube, _world_cone_list[indexer00][indexer01]); // oculusRiftDir

                                        //PHYSICS CYLINDERS
                                        _world_cylinder_list[indexer00][indexer01].Render(sccs.scgraphics.scdirectx.D3D.device.ImmediateContext);
                                        sccs.scgraphics.scupdate._shaderManager.RenderInstancedObject(sccs.scgraphics.scdirectx.D3D.device.ImmediateContext, _world_cylinder_list[indexer00][indexer01].IndexCount, _world_cylinder_list[indexer00][indexer01].InstanceCount, _world_cylinder_list[indexer00][indexer01]._POSITION, viewMatrix, projectionMatrix, sccs.scgraphics.scupdate._desktopFrame.ShaderResource, _DLightBuffer_cube, _world_cylinder_list[indexer00][indexer01]); // oculusRiftDir

                                        //PHYSICS CAPSULES
                                        _world_capsule_list[indexer00][indexer01].Render(sccs.scgraphics.scdirectx.D3D.device.ImmediateContext);
                                        sccs.scgraphics.scupdate._shaderManager.RenderInstancedObject(sccs.scgraphics.scdirectx.D3D.device.ImmediateContext, _world_capsule_list[indexer00][indexer01].IndexCount, _world_capsule_list[indexer00][indexer01].InstanceCount, _world_capsule_list[indexer00][indexer01]._POSITION, viewMatrix, projectionMatrix, sccs.scgraphics.scupdate._desktopFrame.ShaderResource, _DLightBuffer_cube, _world_capsule_list[indexer00][indexer01]); // oculusRiftDir

                                        //PHYSICS SPHERES
                                        _world_sphere_list[indexer00][indexer01].Render(sccs.scgraphics.scdirectx.D3D.device.ImmediateContext);
                                        sccs.scgraphics.scupdate._shaderManager.RenderInstancedObject(sccs.scgraphics.scdirectx.D3D.device.ImmediateContext, _world_sphere_list[indexer00][indexer01].IndexCount, _world_sphere_list[indexer00][indexer01].InstanceCount, _world_sphere_list[indexer00][indexer01]._POSITION, viewMatrix, projectionMatrix, sccs.scgraphics.scupdate._desktopFrame.ShaderResource, _DLightBuffer_cube, _world_sphere_list[indexer00][indexer01]); // oculusRiftDir
                                        */

            //distance = sc_maths.sc_check_distance_node_3d_geometry(currentPosition, new Vector3(posX, posY, posZ), minx, miny, minz, maxx, maxy, maxz);
            /*
            try
            {
                //PHYSICS VOXEL CUBES 
                //////////////////////about 100 ticks more per loop compared to simple physics cubes? will investigate later as when i do 
                //////////////////////simple cubes with the chunk it lags more even though the number of vertices are the same as the physics cube up above
                //////////////////////todo: culling of faces by distance from player. etc.

                worldvoxelcubelists[indexer00][indexer01].Render(sccs.scgraphics.scdirectx.D3D.device.ImmediateContext);
                sccs.scgraphics.scupdate._shaderManager.RenderInstancedObjectsc_perko_voxel(sccs.scgraphics.scdirectx.D3D.device.ImmediateContext, worldvoxelcubelists[indexer00][indexer01].IndexCount, worldvoxelcubelists[indexer00][indexer01].InstanceCount, worldvoxelcubelists[indexer00][indexer01]._POSITION, viewMatrix, projectionMatrix, sccs.scgraphics.scupdate.screencaptureframe.ShaderResource, _DLightBuffer_voxel_cube, worldvoxelcubelists[indexer00][indexer01]);
                ///Console.WriteLine(_SystemTickPerformance.ElapsedTicks);
            }
            catch (Exception ex)
            {
                Program.MessageBox((IntPtr)0, ex.ToString() + "", "Oculus error", 0);
            }


        }
    }
}
}
catch (Exception ex)
{
Program.MessageBox((IntPtr)0, ex.ToString() + "", "Oculus error", 0);
}
}
}
}
*/
















            if (Program._useOculusRift == 1)
            {

                Matrix hmd_matrix_current = Matrix.Identity;
                Matrix hmdmatrixcurrentforpelvis = Matrix.Identity;
                //HEADSET POSITION
                displayMidpoint = sccs.scgraphics.scdirectx.D3D.OVR.GetPredictedDisplayTime(sccs.scgraphics.scdirectx.D3D.sessionPtr, 0);
                trackingState = sccs.scgraphics.scdirectx.D3D.OVR.GetTrackingState(sccs.scgraphics.scdirectx.D3D.sessionPtr, displayMidpoint, true);
                latencyMark = false;
                trackState = sccs.scgraphics.scdirectx.D3D.OVR.GetTrackingState(sccs.scgraphics.scdirectx.D3D.sessionPtr, 0.0f, latencyMark);
                poseStatefer = trackState.HeadPose;
                hmdPose = poseStatefer.ThePose;
                hmdRot = hmdPose.Orientation;
                _hmdPoser = new Vector3(hmdPose.Position.X, hmdPose.Position.Y, hmdPose.Position.Z);
                _hmdRoter = new Quaternion(hmdPose.Orientation.X, hmdPose.Orientation.Y, hmdPose.Orientation.Z, hmdPose.Orientation.W);
                //SET CAMERA POSITION
                //Camera.SetPosition(hmdPose.Position.X, hmdPose.Position.Y, hmdPose.Position.Z);
                Quaternion quatter = new Quaternion(hmdRot.X, hmdRot.Y, hmdRot.Z, hmdRot.W);
                oculusRiftDir = sc_maths._getDirection(Vector3.ForwardRH, quatter);

                Matrix.RotationQuaternion(ref quatter, out hmd_matrix_current);

            }

            Matrix finalRotationMatrix = originRot * rotatingMatrix * rotatingMatrixForPelvis * hmdrotMatrix;

            /*
            for (int xxx = 0; xxx < somechunkpriminstancesikvoxelbodywidthR; xxx++)
            {


                float posX = (xxx);
                float posY = (0);
                float posZ = (0);

                var xxi = xxx;
                var yyi = 0;
                var zzi = 0;

                if (xxi < 0)
                {
                    xxi *= -1;
                    xxi = (somechunkpriminstancesikvoxelbodywidthR) + xxi;
                }
                if (yyi < 0)
                {
                    yyi *= -1;
                    yyi = (somechunkpriminstancesikvoxelbodyheightR) + yyi;
                }
                if (zzi < 0)
                {
                    zzi *= -1;
                    zzi = (somechunkpriminstancesikvoxelbodydepthR) + zzi;
                }

                int somechunkpriminstanceikvoxelbodyindex = xxi;// + (somechunkpriminstancesikvoxelbodywidthL ) * (yyi + (somechunkpriminstancesikvoxelbodyheightL) * zzi);

                _sc_jitter_tasks = ikvoxelbody[somechunkpriminstanceikvoxelbodyindex].setikbodytargetnlimbspositionsNrotations(_sc_jitter_tasks, viewMatrix, projectionMatrix, OFFSETPOS, originRot, rotatingMatrix, hmdrotMatrix, hmd_matrix, ikvoxelbody[somechunkpriminstanceikvoxelbodyindex]._player_pelvis[0][0]._arrayOfInstances[0].current_pos, _rightTouchMatrix, _leftTouchMatrix, handPoseRight, handPoseLeft, oriProjectionMatrix, ikvoxelbody[somechunkpriminstanceikvoxelbodyindex]._player_torso[0][0], lightpos, dirLight, finalRotationMatrix, ikvoxelbody[somechunkpriminstanceikvoxelbodyindex]._player_pelvis[0][0], hmd_matrix_current, extramatrix, hmdmatrixcurrentforpelvis);
                _sc_jitter_tasks = ikvoxelbody[somechunkpriminstanceikvoxelbodyindex].ikbodyrender(_sc_jitter_tasks, viewMatrix, projectionMatrix, OFFSETPOS, originRot, rotatingMatrix, hmdrotMatrix, hmd_matrix, rotatingMatrixForPelvis, _rightTouchMatrix, _leftTouchMatrix, handPoseRight, handPoseLeft, oriProjectionMatrix);





                /*
                for (int yyy = -somechunkpriminstancesikvoxelbodyheightL; yyy <= somechunkpriminstancesikvoxelbodyheightR; yyy++)
                {
                    for (int zzz = -somechunkpriminstancesikvoxelbodydepthL; zzz <= somechunkpriminstancesikvoxelbodydepthR; zzz++)
                    {

                    }
                }
            }





            for (int xxx = 0; xxx < somechunkpriminstancesikarmvoxelwidthR; xxx++)
            {
                for (int yyy = 0; yyy < somechunkpriminstancesikarmvoxelheightR; yyy++)
                {

                    float posX = (xxx);
                    float posY = (yyy);
                    float posZ = (0);

                    var xxi = xxx;
                    var yyi = yyy;
                    var zzi = 0;

                    if (xxi < 0)
                    {
                        xxi *= -1;
                        xxi = (somechunkpriminstancesikarmvoxelwidthR) + xxi;
                    }
                    if (yyi < 0)
                    {
                        yyi *= -1;
                        yyi = (somechunkpriminstancesikarmvoxelheightR) + yyi;
                    }
                    if (zzi < 0)
                    {
                        zzi *= -1;
                        zzi = (somechunkpriminstancesikarmvoxeldepthR) + zzi;
                    }

                    int somechunkpriminstanceikarmvoxelindex = xxi + (yyi * (somechunkpriminstancesikarmvoxelheightR));


                    var sometest = ikarmvoxel[somechunkpriminstanceikarmvoxelindex];


                    _sc_jitter_tasks = ikarmvoxel[somechunkpriminstanceikarmvoxelindex].setiktargetnlimbspositionsNrotations(_sc_jitter_tasks, viewMatrix, projectionMatrix, OFFSETPOS, originRot, rotatingMatrix, hmdrotMatrix, hmd_matrix, ikvoxelbody[0]._player_pelvis[0][0]._arrayOfInstances[0].current_pos, _rightTouchMatrix, _leftTouchMatrix, handPoseRight, handPoseLeft, oriProjectionMatrix, ikvoxelbody[0]._player_torso[0][0], lightpos, dirLight, finalRotationMatrix, ikvoxelbody[0]._player_pelvis[0][0], ikvoxelbody[0], somechunkpriminstanceikarmvoxelindex, rotatingMatrixForPelvis, extramatrix, directionvectoroffsets, Vector3.Zero, Vector3.Zero);
                    _sc_jitter_tasks = ikarmvoxel[somechunkpriminstanceikarmvoxelindex].ikarmrender(_sc_jitter_tasks, viewMatrix, projectionMatrix, OFFSETPOS, originRot, rotatingMatrix, hmdrotMatrix, hmd_matrix, rotatingMatrixForPelvis, _rightTouchMatrix, _leftTouchMatrix, handPoseRight, handPoseLeft, oriProjectionMatrix);

                }
            }

            */

            /*
            float disco_sphere_rot_speed = 5.15f;
            var timeSinceStart = (float)(DateTime.Now - sccs.scgraphics.scupdate.startTime).TotalSeconds;
            Matrix worldmatlightrot = Matrix.Scaling(1.0f) * Matrix.RotationX(timeSinceStart * disco_sphere_rot_speed) * Matrix.RotationY(timeSinceStart * 2 * disco_sphere_rot_speed) * Matrix.RotationZ(timeSinceStart * 3 * disco_sphere_rot_speed);
            //Matrix worldmatlightrot = Matrix.Scaling(1.0f) * Matrix.RotationY(timeSinceStart * 2 * disco_sphere_rot_speed);

            //var dirInstanceRight = sc_maths._newgetdirleft(somedirquat);
            //var dirInstanceUp = sc_maths._newgetdirup(somedirquat);

            rotcam =  worldmatlightrot;//sccs.scgraphics.scupdate.Camera.rotationMatrix; //
            Quaternion lightrotquat;
            Quaternion.RotationMatrix(ref rotcam, out lightrotquat);
            var dirlight = sc_maths._newgetdirforward(lightrotquat);*/


            /*Quaternion lightrotquat;
            Quaternion.RotationMatrix(ref worldmatlightrot, out lightrotquat);
            var dirlight = sc_maths._newgetdirforward(lightrotquat);*/


            if (somevoxelvirtualdesktopglobals != null)
            {
                if (setoncevrdesktop == 0) /// && Program._useOculusRift == 1 && Program._useOculusRift == 1
                {

                    //VOXEL VIRTUAL DESKTOP
                    //VOXEL VIRTUAL DESKTOP
                    //VOXEL VIRTUAL DESKTOP
                    for (int xxxx = 0; xxxx < somevoxelvirtualdesktopw; xxxx++)
                    {
                        for (int yyyy = 0; yyyy < somevoxelvirtualdesktoph; yyyy++)
                        {
                            for (int zzzz = 0; zzzz < somevoxelvirtualdesktopd; zzzz++)
                            {
                                var somevoxelvirtualdesktopindex = xxxx + somevoxelvirtualdesktopw * (yyyy + somevoxelvirtualdesktoph * zzzz);

                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfMatrixBuff[0].world = _worldMatrix;
                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfMatrixBuff[0].view = _viewMatrix;
                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfMatrixBuff[0].proj = _projectionMatrix;



                                if (sccsvvdhd.Form1.currentform.projectiontypeindex == 0)//sccsvvdhd.Form1.currentform.comboboxcapturelist2.SelectedIndex == 0)
                                {
                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfMatrixBuff[0].world.M44 = -1.0f;
                                }
                                else if (sccsvvdhd.Form1.currentform.projectiontypeindex == 1)//sccsvvdhd.Form1.currentform.comboboxcapturelist2.SelectedIndex == 1)
                                {
                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfMatrixBuff[0].world.M44 = 1.0f;
                                }

                                //Console.WriteLine(somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfMatrixBuff[0].world.M44);





                                /*
                                if (sccsvvdhd.Form1.someform.checkbox4proj.Checked)
                                {
                                    if (sccsvvdhd.Form1.someform.checkbox4swtc == 1)
                                    {
                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfMatrixBuff[0].world.M44 = -1;

                                        //sccsvvdhd.Form1.someform.checkbox4swtc = 0;
                                    }
                                }
                                else if (!sccsvvdhd.Form1.someform.checkbox4proj.Checked)
                                {
                                    if (sccsvvdhd.Form1.someform.checkbox4swtc == 1)
                                    {
                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfMatrixBuff[0].world.M44 = 1.0f;
                                        //sccsvvdhd.Form1.someform.checkbox4swtc = 0;
                                    }

                                }*/










                                /*somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfMatrixBuff[0] = new SC_instancedChunkPrim.DMatrixBuffer()
                                {
                                    world = _worldMatrix,
                                    view = _viewMatrix,
                                    proj = _projectionMatrix,
                                };*/


                                /*somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].lightBufferInstChunk[0] = new SC_instancedChunkPrim.DLightBufferEr()
                                {
                                    ambientColor = ambientColor,
                                    diffuseColor = diffuseColour,
                                    lightDirection = rayDirFrontInstancesChunks,
                                    padding0 = 0,
                                    lightPosition = centerPosRighthandposRR,
                                    padding1 = 100
                                };*/


                                //lightpos.X = sccs.scgraphics.scupdate._rightTouchMatrix.M41;
                                //lightpos.Y = sccs.scgraphics.scupdate._rightTouchMatrix.M42;
                                //lightpos.Z = sccs.scgraphics.scupdate._rightTouchMatrix.M43;


                                Quaternion somerighttouchquat;
                                Matrix somemat = sccs.scgraphics.scupdate._rightTouchMatrix;
                                Quaternion.RotationMatrix(ref somemat, out somerighttouchquat);

                                Vector3 forwarddir = sc_maths._getDirection(Vector3.ForwardRH, somerighttouchquat);

                                ambientColor = new Vector4(0.45f, 0.45f, 0.45f, 1.0f);
                                //ambientColor = new Vector4(0.75f, 0.75f, 0.75f, 1.0f);

                                diffuseColour = new Vector4(1, 1, 1, 1);
                                //lightDirection = new Vector3(0, -1, -1);
                                lightpos = new Vector3(sccs.scgraphics.scupdate.OFFSETPOS.X, sccs.scgraphics.scupdate.OFFSETPOS.Y, sccs.scgraphics.scupdate.OFFSETPOS.Z);  //new Vector3(0, 100, 0);


                                //Console.WriteLine(lightpos);


                                //lightpos.Y = 10.0f;

                                //lightpos.Z = somevoxelvirtualdesktop[0].worldmatofobj.M43 + (screenNormalForward.Z * 0.1f);
                                //lightpos.X = positionOfMousereducedx;
                                //lightpos.Y = positionOfMousereducedy;

                                /*
                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].lightBufferInstChunk[0].lightDirection = dirlight;// forwarddir;
                                //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].lightBufferInstChunk[0].lightDirection = -Vector3.Up;// forwarddir;
                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].lightBufferInstChunk[0].lightPosition = lightpos;

                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].lightBufferInstChunk[0].ambientColor = ambientColor;
                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].lightBufferInstChunk[0].diffuseColor = diffuseColour;
                                */

                                for (int x = 0; x < somevoxelvirtualdesktopglobals.numberOfObjectInWidth; x++)
                                {
                                    for (int y = 0; y < somevoxelvirtualdesktopglobals.numberOfObjectInHeight; y++)
                                    {
                                        for (int z = 0; z < somevoxelvirtualdesktopglobals.numberOfObjectInDepth; z++)
                                        {
                                            int c = x + somevoxelvirtualdesktopglobals.numberOfObjectInWidth * (y + somevoxelvirtualdesktopglobals.numberOfObjectInHeight * z);


                                            /*somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].someovrdir[0].ovrpos =
                                                new Vector4(sccs.scgraphics.scupdate._hmdPoser.X, sccs.scgraphics.scupdate._hmdPoser.Y, sccs.scgraphics.scupdate._hmdPoser.Z, 1)
                                                + new Vector4(sccs.scgraphics.scupdate.OFFSETPOS.X, sccs.scgraphics.scupdate.OFFSETPOS.Y, sccs.scgraphics.scupdate.OFFSETPOS.Z, 1);
                                            //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].someovrdir[0].ovrpos = new Vector4(sccs.scgraphics.scupdate.OFFSETPOS.X, sccs.scgraphics.scupdate.OFFSETPOS.Y, sccs.scgraphics.scupdate.OFFSETPOS.Z, 1);


                                            //Console.WriteLine(new Vector4(sccs.scgraphics.scupdate.OFFSETPOS.X, sccs.scgraphics.scupdate.OFFSETPOS.Y, sccs.scgraphics.scupdate.OFFSETPOS.Z, 1));
                                            //Vector3 cursorpos = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M43);

                                            somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].someovrdir[0].ovrdirf = sccs.scgraphics.scupdate.dirikvoxelbodyInstanceForward0;
                                            somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].someovrdir[0].ovrdirr = sccs.scgraphics.scupdate.dirikvoxelbodyInstanceRight0;
                                            somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].someovrdir[0].ovrdiru = sccs.scgraphics.scupdate.dirikvoxelbodyInstanceUp0;
                                            */



                                            if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].switchForRender == 1)
                                            {


                                                /*somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].lightDirection = dirlight;//
                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].lightPosition = cursorpos;
                                                //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].lightDirection = -Vector3.Up;// dirlight;
                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].ambientColor = ambientColor;

                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].diffuseColor = diffuseColour;

                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].padding0 = 75;
                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].padding1 = 100;
                                                //specularPower
                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].specularcolor = new Vector4(1, 1, 1, 1);
                                                */

                                                //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].lightBufferInstChunk = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer;
                                                //RENDERING THE INSTANCED CHUNK 
                                                //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].matrixBuffer = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfMatrixBuff;

                                                var matrixBufferDescriptionVertex00 = new BufferDescription()
                                                {
                                                    Usage = ResourceUsage.Dynamic,
                                                    SizeInBytes = Marshal.SizeOf(typeof(SC_instancedChunk.DInstanceType)) * somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].instances.Length,
                                                    BindFlags = BindFlags.VertexBuffer,
                                                    CpuAccessFlags = CpuAccessFlags.Write,
                                                    OptionFlags = ResourceOptionFlags.None,
                                                    StructureByteStride = 0
                                                };

                                                var InstanceBuffer = new SharpDX.Direct3D11.Buffer(sccs.scgraphics.scdirectx.D3D.device, matrixBufferDescriptionVertex00);

                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_Instances = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instances;
                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].worldMatrix = _worldMatrix;
                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].viewMatrix = _viewMatrix;
                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].projectionMatrix = _projectionMatrix;

                                                //arrayOfChunkData[c].worldMatrix += arrayOfMatrixBuff[0].world;

                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].matrixBuffer = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfMatrixBuff;

                                                //arrayOfChunkData[c].lightBuffer = lightBufferInstChunk;

                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instanceBuffer = InstanceBuffer;
                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].arrayOfSomeMap = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].arrayOfSomeMap;

                                                //arrayOfChunkData[c] = shaderOfChunk.Renderer(arrayOfChunkData[c], c);
                                                //Console.WriteLine("test");
                                            }
                                            else
                                            {


                                            }




                                            /*
                                            somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lightBuffer[0].lightDirection = dirlight;//
                                            somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lightBuffer[0].lightPosition = lightpos;
                                            //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].lightDirection = -Vector3.Up;// dirlight;
                                            somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lightBuffer[0].ambientColor = ambientColor;

                                            somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lightBuffer[0].diffuseColor = diffuseColour;*/

                                            /*
                                            somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].lightDirection = dirlight;//
                                            somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].lightPosition = cursorpos;
                                            //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].lightDirection = -Vector3.Up;// dirlight;
                                            somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].ambientColor = ambientColor;

                                            somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].diffuseColor = diffuseColour;

                                            somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].padding0 = 75;
                                            somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].padding1 = 100;
                                            //specularPower
                                            somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].specularcolor = new Vector4(1, 1, 1, 1);
                                            */


                                            //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].lightBufferInstChunk;

                                            //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].lightBufferInstChunk = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer;

                                            //SENDING THE SCREENCAPTURE TO THE BUFFER FOR THE SHADER
                                            //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].shaderOfChunk.shaderResourceView2D = sccs.scgraphics.scupdate._desktopFrame.ShaderResource;// sccs.scgraphics.scupdate._desktopFrame.ShaderResourceArray;
                                            //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].chunkShader.shaderResourceView2D = sccs.scgraphics.scupdate._desktopFrame.ShaderResource;//
                                            //SENDING THE SCREENCAPTURE TO THE BUFFER FOR THE SHADER




                                            //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lightBuffer;

                                            //RENDERING THE INSTANCED CHUNK 
                                            somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].matrixBuffer = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfMatrixBuff;


                                            var theshader = _sc_jitter_tasks[0][0].shaderresource;

                                            if (sccsvvdhd.Form1.currentform.lastcapturedprogram != sccsvvdhd.Form1.capturedprogram && sccsvvdhd.Form1.capturedprogram == IntPtr.Zero)
                                            {

                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c] = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].shaderOfChunk.Renderer(somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c], c, idletexture.TextureResource, somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].voxeltype);
                                            }
                                            else
                                            {

                                                if (_sc_jitter_tasks[0][0].shaderresource==null)
                                                {
                                                    _sc_jitter_tasks[0][0].shaderresource = idletexture.TextureResource;
                                                }
                                                


                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c] = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].shaderOfChunk.Renderer(somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c], c, _sc_jitter_tasks[0][0].shaderresource, somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].voxeltype);

                                            }






                                            //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c] = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].shaderOfChunk.Renderer(somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c], c, sccs.scgraphics.scupdate.screencaptureframe.ShaderResource, somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].voxeltype);


                                            /*Model.Render(sccs.scgraphics.scdirectx.D3D.DeviceContext);
                                            // Render the model using the color shader.
                                            if (!LightShader.Render(sccs.scgraphics.scdirectx.D3D.DeviceContext, Model.IndexCount, _worldMatrix, _viewMatrix, _projectionMatrix, Model.Texture.TextureResource, Light.Direction, Light.AmbientColor, Light.DiffuseColour, sccs.scgraphics.scupdate.Camera.GetPosition(), Light.SpecularColor, Light.SpecularPower))
                                            {

                                            }*/

                                        }
                                    }
                                }
                            }
                        }
                    }
                    //VOXEL VIRTUAL DESKTOP
                    //VOXEL VIRTUAL DESKTOP
                    //VOXEL VIRTUAL DESKTOP
                }
            }



            /*Matrix.RotationY(rotation, out _worldMatrix);

            Model.Render(sccs.scgraphics.scdirectx.D3D.DeviceContext);
            // Render the model using the color shader.
            if (!LightShader.Render(sccs.scgraphics.scdirectx.D3D.DeviceContext, Model.IndexCount, _worldMatrix, _viewMatrix, _projectionMatrix, Model.Texture.TextureResource, Light.Direction, Light.AmbientColor, Light.DiffuseColour, sccs.scgraphics.scupdate.Camera.GetPosition(), Light.SpecularColor, Light.SpecularPower))
            {
                //Program.MessageBox((IntPtr)0, "!LightShader render", "scmsg", 0);
            }
            Rotate();*/

            //sccs.scgraphics.scdirectx.D3D.DeviceContext.Rasterizer.State = sccs.scgraphics.scdirectx.D3D.RasterstateCullBack;
            //sccs.scgraphics.scdirectx.D3D.TurnOffAlphaBlending();
            //sccs.scgraphics.scdirectx.D3D.TurnZBufferOn();


            /*
            sccs.scgraphics.scdirectx.D3D.TurnOnAlphaBlending();
            sccs.scgraphics.scdirectx.D3D.TurnZBufferOff();

            sccs.scgraphics.scdirectx.D3D.TurnOffAlphaBlending();
            sccs.scgraphics.scdirectx.D3D.TurnZBufferOn();
            */
























            return scgraphicssecpackagemessage.scjittertasks; // scgraphicssecpackagemessage.scjittertasks;
        }
















        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern bool Wow64DisableWow64FsRedirection(ref IntPtr ptr);

        int frame_counter_4_buttonY = 45;
        int display_grid_type = 0;


        //[DllImport("User32.dll")]
        //private static extern bool SetCursorPos(int X, int Y);

        //TO STABILIZE THE MOUSE CURSOR ON THE SCREEN.
        const int _MaxArraySize0 = 15; //50
        const int _MaxArraySize1 = 14; //49
        //TO STABILIZE THE MOUSE CURSOR ON THE SCREEN.

        SharpDX.Matrix _oculusR_Cursor_matrix = SharpDX.Matrix.Identity;
        Stopwatch _updateFunctionStopwatchRightThumbstickGoRight = new Stopwatch();
        Stopwatch _updateFunctionStopwatchRightThumbstickGoLeft = new Stopwatch();
        Stopwatch _updateFunctionStopwatchLeftThumbstick = new Stopwatch();
        Stopwatch _updateFunctionStopwatchRight = new Stopwatch();

        int hasClickedBUTTONA = 0;
        int hasClickedBUTTONACounter = 0;

        bool _startOnce02 = true;
        bool _updateFunctionBoolRight = true;
        bool _updateFunctionBoolLeft = true;
        bool _updateFunctionBoolLeftThumbStickGoLeft = true;
        bool _updateFunctionBoolLeftThumbStickGoRight = true;
        bool _updateFunctionBoolRightThumbStickGoLeft = true;
        bool _updateFunctionBoolRightThumbStickGoRight = true;
        bool _updateFunctionBoolLeftHandTrigger = true;
        bool _updateFunctionBoolRightHandTrigger = true;
        bool _updateFunctionBoolLeftIndexTrigger = true;
        bool _updateFunctionBoolRightIndexTrigger = true;
        bool _updateFunctionBoolTouchRightButtonA = true;
        bool _updateFunctionBoolLeftThumbStick = true;
        int _frameCounterTouchRight = 0;

        Plane planer;

        Vector3 centerPosRight;
        SharpDX.Ray someRay;
        Vector3 intersectPointRight;
        bool intersecter;

        Vector3 centerPosLeft;
        Vector3 rayDirLeft;
        SharpDX.Ray someRayLeft;
        Vector3 intersectPointLeft;
        bool intersecterLeft;
        Vector3 stabilizedIntersectionPosLeft;
        Vector3 stabilizedIntersectionPosRight;



        int currentFrameLeft = 0;
        int currentFrameRight = 0;
        double averageXRight = 0;
        double averageYRight = 0;
        double averageZRight = 0;
        double lastRightHitPointXFrameOne = 0;
        double lastRightHitPointYFrameOne = 0;
        double lastRightHitPointZFrameOne = 0;
        double positionXRight = 0;
        double positionYRight = 0;
        double positionZRight = 0;
        double averageXLeft = 0;
        double averageYLeft = 0;
        double averageZLeft = 0;
        double lastLeftHitPointXFrameOne = 0;
        double lastLeftHitPointYFrameOne = 0;
        double lastLeftHitPointZFrameOne = 0;
        double positionXLeft = 0;
        double positionYLeft = 0;
        double positionZLeft = 0;
        double differenceX = 0;
        double differenceY = 0;
        double differenceZ = 0;
        double percentXLeft;
        double percentYLeft;

        float widthLength;
        float heightLength;
        double currentPosWidth;
        double currentPosHeight;

        double percentXRight;
        double percentYRight;

        double currentX;
        double currentY;
        double currentZ;

        int _has_init_ray;
        JMatrix _last_frame_rigid_grab_rot;
        Vector3 _last_frame_rigid_grab_pos;
        Vector3 _last_frame_handPos = Vector3.Zero;
        Vector3 _last_final_hand_pos_right;


        //HERE IS THE MOUSE STABILIZER ARRAYS - THE BIGGER THE ARRAYS THE SLOWER AND MORE STABLE THE MOUSE IS ON THE SCREEN.
        Vector3[] arrayOfStabilizerPosRight = new Vector3[_MaxArraySize0];
        double[] arrayOfStabilizerPosXRight = new double[_MaxArraySize0];
        double[] arrayOfStabilizerPosDifferenceXRight = new double[_MaxArraySize1];
        double[] arrayOfStabilizerPosYRight = new double[_MaxArraySize0];
        double[] arrayOfStabilizerPosDifferenceYRight = new double[_MaxArraySize1];

        double[] arrayOfStabilizerPosZRight = new double[_MaxArraySize0];
        double[] arrayOfStabilizerPosDifferenceZRight = new double[_MaxArraySize1];



        Vector3[] arrayOfStabilizerPosLeft = new Vector3[_MaxArraySize0];
        double[] arrayOfStabilizerPosXLeft = new double[_MaxArraySize0];
        double[] arrayOfStabilizerPosDifferenceXLeft = new double[_MaxArraySize1];
        double[] arrayOfStabilizerPosYLeft = new double[_MaxArraySize0];
        double[] arrayOfStabilizerPosDifferenceYLeft = new double[_MaxArraySize1];

        double[] arrayOfStabilizerPosZLeft = new double[_MaxArraySize0];
        double[] arrayOfStabilizerPosDifferenceZLeft = new double[_MaxArraySize1];

        //
        Vector3[] _arrayOfStabilizerPosRight = new Vector3[_MaxArraySize0];
        double[] _arrayOfStabilizerPosXRight = new double[_MaxArraySize0];
        double[] _arrayOfStabilizerPosDifferenceXRight = new double[_MaxArraySize1];
        double[] _arrayOfStabilizerPosYRight = new double[_MaxArraySize0];
        double[] _arrayOfStabilizerPosDifferenceYRight = new double[_MaxArraySize1];

        Vector3[] _arrayOfStabilizerPosLeft = new Vector3[_MaxArraySize0];
        double[] _arrayOfStabilizerPosXLeft = new double[_MaxArraySize0];
        double[] _arrayOfStabilizerPosDifferenceXLeft = new double[_MaxArraySize1];
        double[] _arrayOfStabilizerPosYLeft = new double[_MaxArraySize0];
        double[] _arrayOfStabilizerPosDifferenceYLeft = new double[_MaxArraySize1];

        int _hasLockedMouse = 0;
        Matrix hmd_matrix_current = Matrix.Identity;
        Matrix hmdmatrixcurrentforpelvis = Matrix.Identity;

        SharpDX.Matrix _intersectTouchRightMatrix = SharpDX.Matrix.Identity;
        SharpDX.Matrix _intersectTouchLeftMatrix = SharpDX.Matrix.Identity;

        Matrix final_hand_pos_right_locked;
        Matrix final_hand_pos_left_locked;
        Matrix tempMatrix = Matrix.Identity;// tempMatrix
        Matrix _last_screen_pos = Matrix.Identity;
        int had_locked_screen = -1;
        int _tier_logic_swtch_lock_screen = 0;
        Matrix _current_screen_pos = Matrix.Identity;

        //OCULUS TOUCH SETTINGS 
        Ab3d.OculusWrap.Result resultsRight;
        uint buttonPressedOculusTouchRight;
        Vector2f[] thumbStickRight;
        float[] handTriggerRight;
        float[] indexTriggerRight;

        float indexTriggerRightLastAbs;
        float indexTriggerLeftLastAbs;

        Ab3d.OculusWrap.Result resultsLeft;
        uint buttonPressedOculusTouchLeft;
        Vector2f[] thumbStickLeft;
        float[] handTriggerLeft;
        float[] indexTriggerLeft;
        //Posef handPoseLeft;
        SharpDX.Quaternion _leftTouchQuat;
        //Posef handPoseRight;
        SharpDX.Quaternion _rightTouchQuat;
        //Matrix _leftTouchMatrix = Matrix.Identity;
        //Matrix _rightTouchMatrix = Matrix.Identity;
        //OCULUS TOUCH SETTINGS


        Matrix hmdmatrixRot_;
        Matrix OriginRot = Matrix.Identity;
        Matrix RotatingMatrix = Matrix.Identity;
        Matrix RotatingMatrixForPelvis = Matrix.Identity;
        Matrix viewMatrix_ = Matrix.Identity;



        uint lastbuttonPressedOculusTouchRight = 0;
        uint lastbuttonPressedOculusTouchLeft = 0;
        public int _indexMouseMove = 0;
        bool restartFrameCounterRight = false;

        int hasClickedHomeButtonTouchLeft = 0;
        int hasClickedHomeButtonTouchLeftCounter = 0;

        bool isHoldingBUTTONA = false;
        bool hasClickedBUTTONB = false;
        int hasClickedBUTTONX = 0;
        int hasClickedBUTTONY = 0;
        bool restartFrameCounterLeft = false;




        bool _canResetCounterTouchRightButtonA = false;
        bool _canResetCounterTouchRightButtonB = false;
        int _frameCounterTouchLeft = 0;
        bool _canResetCounterTouchLeftButtonA = false;
        bool _canResetCounterTouchLeftButtonB = false;
        bool _canResetCounterTouchLeftButtonX = false;
        bool _canResetCounterTouchLeftButtonY = false;
        bool hasUsedThumbStickLeftW = false;
        bool hasUsedThumbStickLeftS = false;
        bool hasUsedThumbStickLeftA = false;
        bool hasUsedThumbStickRightD = false;
        bool hasUsedThumbStickRightQ = false;
        bool hasUsedThumbStickRightE = false;
        bool lastHasUsedHandTriggerLeft = false;
        bool hasUsedHandTriggerLeft = false;


        int _out_of_bounds_oculus_rift = 0;
        int _out_of_bounds_right = 0;
        int _out_of_bounds_left = 0;
        uint _lastMousePosXRight = 9999;
        uint _lastMousePosYRight = 9999;



        //SPECTRUM
        //SPECTRUM
        //SPECTRUM
        const int _inst_spectrum_x = 42; // 36 // 210 //75 // 420
        const int _inst_spectrum_y = 1;
        const int _inst_spectrum_z = 21; // 36 // 210 //75 //5625 //210
        float _spectrum_size_x = 0.0015f; //0.001115f
        float _spectrum_size_y = 0.0015f;
        float _spectrum_size_z = 0.0015f;
        byte[] _sound_byte_array = new byte[_inst_spectrum_x * _inst_spectrum_z]; //44100
        byte[] _sound_byte_array_instant = new byte[_inst_spectrum_x * _inst_spectrum_z]; //44100 //176400
        int has_spoken_main = 0;
        int has_spoken_sec = 0;
        int has_spoken_tier = 0;
        int has_spoken_quart = 0;
        string last_xml_filepath = "";
        string last_wave_filepath = "";
        DateTime _time_of_recording_start = DateTime.Now;
        DateTime _time_of_recording_end = DateTime.Now;
        int sc_can_start_rec_counter = 0;
        int sc_can_start_rec_counter_before_add_index = 0;
        int sc_play_file = 0;
        int sc_play_file_counter = 0;
        int sc_save_file = 0;
        int sc_save_file_counter = 0;
        int sc_start_recording = 0;
        int sc_start_recording_counter = 0;
        string short_path = "";
        string instant_short_path = "";
        float spectrum_noise_value = 0;
        SoundPlayer _sound_player = new SoundPlayer();
        Matrix spectrum_mat = Matrix.Identity;
        static XmlTextWriter writer = new XmlTextWriter(Console.Out);
        string path;
        int _records_counter = 0;
        int _records_instant_counter = 0;
        int _frames_to_access_counter = 0;
        int _spectrum_work = 0;
        int _spectrum_work_counter = 0;
        int _has_recorded = 0;

        public static int GetSoundLength(string fileName)
        {
            StringBuilder lengthBuf = new StringBuilder(32);
            mciSendString(string.Format("open \"{0}\" type waveaudio alias wave", fileName), null, 0, IntPtr.Zero);
            mciSendString("status wave length", lengthBuf, lengthBuf.Capacity, IntPtr.Zero);
            mciSendString("close wave", null, 0, IntPtr.Zero);
            int length = 0;
            int.TryParse(lengthBuf.ToString(), out length);
            return length;
        }
        int swtchinstantsound = -1;
        //END OF
        //END OF
        //END OF

        [DllImport("winmm.dll")]
        private static extern long mciSendString(string strCommand, StringBuilder strReturn, int iReturnLength, IntPtr hwndCallback);


        private void TestIntersection(int mouseX, int mouseY, Matrix projMatrix, out Vector3 rayOrigin, out Vector3 rayDirection)
        {
            // Move the mouse cursor coordinates into the -1 to +1 range.
            float pointX = ((2.0f * (float)mouseX) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceWidth) - 1.0f;
            float pointY = (((2.0f * (float)mouseY) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceHeight) - 1.0f) * -1.0f;

            // Adjust the points using the projection matrix to account for the aspect ratio of the viewport.
            pointX = pointX / projMatrix.M11;
            pointY = pointY / projMatrix.M22;

            // Get the inverse of the view matrix.
            Matrix inverseViewMatrix = Matrix.Invert(sccs.scgraphics.scupdate.Camera.ViewMatrix);

            // Calculate the direction of the picking ray in view space.
            Vector3 direction = new Vector3();
            direction.X = (pointX * inverseViewMatrix.M11) + (pointY * inverseViewMatrix.M21) + inverseViewMatrix.M31;
            direction.Y = (pointX * inverseViewMatrix.M12) + (pointY * inverseViewMatrix.M22) + inverseViewMatrix.M32;
            direction.Z = (pointX * inverseViewMatrix.M23) + (pointY * inverseViewMatrix.M23) + inverseViewMatrix.M33;

            // Get the origin of the picking ray which is the position of the camera.
            Vector3 origin = sccs.scgraphics.scupdate.Camera.GetPosition();

            // Get the world matrix and translate to the location of the sphere.

            Matrix translateMatrix = Matrix.Translation(somevoxelvirtualdesktop[0].currentWorldMatrix.M41, somevoxelvirtualdesktop[0].currentWorldMatrix.M42, somevoxelvirtualdesktop[0].currentWorldMatrix.M43); ;// Matrix.Translation(-5.0f, 1.0f, 5.0f);
            //Matrix translateMatrix = Matrix.Translation(somevoxelvirtualdesktop[0].worldmatofobj.M41, somevoxelvirtualdesktop[0].worldmatofobj.M42, somevoxelvirtualdesktop[0].worldmatofobj.M43); ;// Matrix.Translation(-5.0f, 1.0f, 5.0f);
            Matrix worldMatrix = Matrix.Multiply(sccs.scgraphics.scdirectx.D3D.WorldMatrix, translateMatrix);

            //Matrix worldMatrix = Matrix.Identity;


            // Now get the inverse of the translated world matrix.
            Matrix inversedWorldMatrix = Matrix.Invert(worldMatrix);

            // Now transform the ray origin and the ray direction from view space to world space.
            rayOrigin = Vector3.TransformCoordinate(origin, inversedWorldMatrix);
            rayDirection = Vector3.TransformNormal(direction, inversedWorldMatrix);

            // Normalize the ray direction.
            rayDirection = Vector3.Normalize(rayDirection);

            // Now perform the ray-sphere intersection test.
            // If it does intersect then set the intersection to "yes" in the text string that is displayed to the screen.
            // If not then set the intersection to "No".
            /*if (RaySphereIntersect(rayOrigin, rayDirection, 1.0f))
                Text.SetIntersection(true, D3D.DeviceContext);
            else
                Text.SetIntersection(false, D3D.DeviceContext);*/
        }



        /*
        [DllImport("user32.dll", SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        static extern bool PostMessage(IntPtr hWnd, uint msg, IntPtr wParam, IntPtr lParam);
        */



        //const UInt32 WM_KEYDOWN = 0x0100;
        //const int VK_F5 = 0x74;
        //WORKING POSTMESSAGE FOR KEYBOARD KEYCLICK IN path of exile F1 KEY
        [DllImport("user32.dll")]
        static extern bool PostMessage(IntPtr hWnd, UInt32 Msg, int wParam, int lParam);

        /*[STAThread]
        static void Main()
        {
            while (true)
            {
                Process[] processes = Process.GetProcessesByName("iexplore");

                foreach (Process proc in processes)
                    PostMessage(proc.MainWindowHandle, WM_KEYDOWN, VK_F5, 0);

                Thread.Sleep(5000);
            }
        }*/






        public void processkeyboardkeyclicks()
        {
            int iHandle = FindWindow(null, "VoidExpanse");// "VoidExpanse");

            /*
            if (Program.keynmouseinput._KeyboardState != null && Program.keynmouseinput._KeyboardState.PressedKeys.Contains(Key.W))
            {


                Program.keyboardsim.KeyDown(WindowsInput.Native.VirtualKeyCode.VK_W);


                //PostMessage(Program.vewindowsfoundedz, WM_KEYDOWN, (int)VK.KEY_W, 0);
                //WORKING
                //PostMessage(Program.vewindowsfoundedz, WM_KEYDOWN, (int)VK.KEY_W, 0);
                //WORKING

                //SendMessage(iHandle, WM_KEYDOWN, (int)VK.KEY_W, 0);

                //SendMessage(iHandle, WM_KEYDOWN | WM_KEYUP, (int)0x57, 0);
                //SendMessage(iHandle, WM_KEYUP, 0, (int)0x57);

                //PostMessage(Program.vewindowsfoundedz, WM_SYSKEYDOWN, (int)VK.KEY_W, 0);
                //WM_KEYDOWN = 0x0100;
                //Program.keyboardsim.KeyDown(WindowsInput.Native.VirtualKeyCode.VK_W);

                //PostMessage(Program.vewindowsfoundedz, KeyDown, (int)VK.KEY_W, 0);
                //Program.MessageBox((IntPtr)0, "w", "scmsg", 0);
                //Program.keyboardsim.KeyDown(WindowsInput.Native.VirtualKeyCode.VK_W);
                //SendString("w");
                //SendMessage(Program.vewindowsfoundedz, WM_KEYDOWN, (IntPtr)KEY_W, (IntPtr)1);
                //SendMessage(iHandle, WM_KEYDOWN, 0, KEY_W);
                //PostMessage(Program.vewindowsfoundedz, WM_KEYDOWN, (int)VK.KEY_W, 0);
            }
            if (Program.keynmouseinput._KeyboardState != null && Program.keynmouseinput._KeyboardState.PressedKeys.Contains(Key.A))
            {
                //PostMessage(Program.vewindowsfoundedz, KeyDown, (int)VK.KEY_A, 0);
                //Program.MessageBox((IntPtr)0, "a", "scmsg", 0);
                //Program.keyboardsim.KeyDown(WindowsInput.Native.VirtualKeyCode.VK_A);
                //SendString("a");
                //SendMessage(Program.vewindowsfoundedz, WM_KEYDOWN, (IntPtr)KEY_A, (IntPtr)1);
                //SendMessage(iHandle, WM_KEYDOWN, 0, KEY_A);
                //PostMessage(Program.vewindowsfoundedz, WM_KEYDOWN, (int)VK.KEY_A, 0);
            }

            if (Program.keynmouseinput._KeyboardState != null && Program.keynmouseinput._KeyboardState.PressedKeys.Contains(Key.S))
            {
                //PostMessage(Program.vewindowsfoundedz, KeyDown, (int)VK.KEY_S, 0);
                //Program.MessageBox((IntPtr)0, "s", "scmsg", 0);
                //Program.keyboardsim.KeyDown(WindowsInput.Native.VirtualKeyCode.VK_S);
                //SendString("s");
                //SendMessage(Program.vewindowsfoundedz, WM_KEYDOWN, (IntPtr)KEY_S, (IntPtr)1);
                //SendMessage(iHandle, WM_KEYDOWN, 0, KEY_S);
                //PostMessage(Program.vewindowsfoundedz, WM_KEYDOWN, (int)VK.KEY_S, 0);
            }


            if (Program.keynmouseinput._KeyboardState != null && Program.keynmouseinput._KeyboardState.PressedKeys.Contains(Key.D))
            {
                //PostMessage(Program.vewindowsfoundedz, KeyDown, (int)VK.KEY_D, 0);
                //Program.MessageBox((IntPtr)0, "d", "scmsg", 0);
                //Program.keyboardsim.KeyDown(WindowsInput.Native.VirtualKeyCode.VK_D);
                //SendString("d");
                //SendMessage(Program.vewindowsfoundedz, WM_KEYDOWN, (IntPtr)KEY_D, (IntPtr)1);
                //SendMessage(iHandle, WM_KEYDOWN, 0, KEY_D);
                //PostMessage(Program.vewindowsfoundedz, WM_KEYDOWN, (int)VK.KEY_D, 0);
            }
            */








            /*

            //Program.MessageBox((IntPtr)0, "found handle " + iHandle, "sccs message 1", 0);

            SendMessage(iHandle, WM_RBUTTONDOWN, 0, (mousex << 16) | mousey);
            SendMessage(iHandle, WM_RBUTTONUP, 0, 0);*/
        }















        public unsafe void oculuscontrolsNRecordSoundNMousePointer(Matrix projMatrix, Matrix camViewMatrix)
        {


            if (somevoxelvirtualdesktop != null)
            {
                if (somevoxelvirtualdesktop[0] != null)
                {

                    if (stopwatchmousepossetswtc == 0)
                    {
                        watchforgetmouseposset.Stop();
                        watchforgetmouseposset.Reset();
                        watchforgetmouseposset.Start();

                        stopwatchmousepossetswtc = 1;
                    }

                    if (stopwatchswtc == 0)
                    {
                        watchforgetmousepos.Stop();
                        watchforgetmousepos.Reset();
                        watchforgetmousepos.Start();

                        stopwatchswtc = 1;
                    }



                    if (stopwatchmouseclickswtcl == 0)
                    {
                        watchforgetmouseclickl.Stop();
                        watchforgetmouseclickl.Reset();
                        watchforgetmouseclickl.Start();

                        stopwatchmouseclickswtcl = 1;
                    }

                    if (stopwatchmouseclickswtcr == 0)
                    {
                        watchforgetmouseclickr.Stop();
                        watchforgetmouseclickr.Reset();
                        watchforgetmouseclickr.Start();

                        stopwatchmouseclickswtcr = 1;
                    }


                    if (_updateFunctionBoolRight)
                    {
                        _updateFunctionStopwatchRight.Stop();
                        _updateFunctionStopwatchRight.Reset();
                        _updateFunctionStopwatchRight.Start();
                        _updateFunctionBoolRight = false;
                    }
                    if (_updateFunctionBoolRightThumbStickGoLeft)
                    {
                        _updateFunctionStopwatchRightThumbstickGoLeft.Stop();
                        _updateFunctionStopwatchRightThumbstickGoLeft.Reset();
                        _updateFunctionStopwatchRightThumbstickGoLeft.Start();
                        _updateFunctionBoolRightThumbStickGoLeft = false;
                    }

                    if (_updateFunctionBoolRightThumbStickGoRight)
                    {
                        _updateFunctionStopwatchRightThumbstickGoRight.Stop();
                        _updateFunctionStopwatchRightThumbstickGoRight.Reset();
                        _updateFunctionStopwatchRightThumbstickGoRight.Start();
                        _updateFunctionBoolRightThumbStickGoRight = false;
                    }

                    if (_updateFunctionBoolLeftThumbStick)
                    {
                        _updateFunctionStopwatchLeftThumbstick.Stop();
                        _updateFunctionStopwatchLeftThumbstick.Reset();
                        _updateFunctionStopwatchLeftThumbstick.Start();
                        _updateFunctionBoolLeftThumbStick = false;
                    }






                    //FOR WHEN THERE IS MY PHYSICS DESKTOP SCREEN


                    //FOR SCREEN COLLISION DETECTION
                    /*var centerPosRight = new Vector3(final_hand_pos_right_locked.M41, final_hand_pos_right_locked.M42, final_hand_pos_right_locked.M43);
                    Quaternion.RotationMatrix(ref final_hand_pos_right_locked, out _rightTouchQuat);
                    rayDirRighter = sc_maths._getDirection(Vector3.ForwardRH, _rightTouchQuat);
                    var someRay = new Ray(centerPosRight, rayDirRighter);
                    var intersecter = someRay.Intersects(ref planer, out intersectPointRight);
                    var _ray_dir_right = centerPosRight - intersectPointRight;
                    var _length_of_ray_right = (_ray_dir_right).Length();

                    var centerPosLeft = new Vector3(final_hand_pos_left_locked.M41, final_hand_pos_left_locked.M42, final_hand_pos_left_locked.M43);
                    Quaternion.RotationMatrix(ref final_hand_pos_left_locked, out _leftTouchQuat);
                    var rayDirLeft = sc_maths._getDirection(Vector3.ForwardRH, _leftTouchQuat);
                    var someRayLeft = new Ray(centerPosLeft, rayDirLeft);
                    var intersecterLeft = someRayLeft.Intersects(ref planer, out intersectPointLeft);
                    var _ray_dir_left = centerPosLeft - intersectPointLeft;
                    var _length_of_ray_left = (_ray_dir_left).Length();
                    */
                    //SPECTRUM AND SOUND RECORDING




                    //HEADSET POSITION
                    /*displayMidpoint = sccs.scgraphics.scdirectx.D3D.OVR.GetPredictedDisplayTime(sccs.scgraphics.scdirectx.D3D.sessionPtr, 0);
                    trackingState = sccs.scgraphics.scdirectx.D3D.OVR.GetTrackingState(sccs.scgraphics.scdirectx.D3D.sessionPtr, displayMidpoint, true);
                    latencyMark = false;
                    trackState = sccs.scgraphics.scdirectx.D3D.OVR.GetTrackingState(sccs.scgraphics.scdirectx.D3D.sessionPtr, 0.0f, latencyMark);
                    poseStatefer = trackState.HeadPose;
                    hmdPose = poseStatefer.ThePose;
                    hmdRot = hmdPose.Orientation;
                    _hmdPoser = new Vector3(hmdPose.Position.X, hmdPose.Position.Y, hmdPose.Position.Z);
                    _hmdRoter = new Quaternion(hmdPose.Orientation.X, hmdPose.Orientation.Y, hmdPose.Orientation.Z, hmdPose.Orientation.W);
                    //SET CAMERA POSITION
                    //Camera.SetPosition(hmdPose.Position.X, hmdPose.Position.Y, hmdPose.Position.Z);
                    Quaternion quatter = new Quaternion(hmdRot.X, hmdRot.Y, hmdRot.Z, hmdRot.W);
                    oculusRiftDir = sc_maths._getDirection(Vector3.ForwardRH, quatter);

                    Matrix.RotationQuaternion(ref quatter, out hmd_matrix_current);
                    */
                    /*//TOUCH CONTROLLER RIGHT
                    resultsRight = sccs.scgraphics.scdirectx.D3D.OVR.GetInputState(sccs.scgraphics.scdirectx.D3D.sessionPtr, sccs.scgraphics.scdirectx.D3D.controllerTypeRTouch, ref sccs.scgraphics.scdirectx.D3D.inputStateRTouch);
                    buttonPressedOculusTouchRight = sccs.scgraphics.scdirectx.D3D.inputStateRTouch.Buttons;
                    thumbStickRight = sccs.scgraphics.scdirectx.D3D.inputStateRTouch.Thumbstick;
                    handTriggerRight = sccs.scgraphics.scdirectx.D3D.inputStateRTouch.HandTrigger;
                    indexTriggerRight = sccs.scgraphics.scdirectx.D3D.inputStateRTouch.IndexTrigger;
                    handPoseRight = trackingState.HandPoses[1].ThePose;

                    _rightTouchQuat.X = handPoseRight.Orientation.X;
                    _rightTouchQuat.Y = handPoseRight.Orientation.Y;
                    _rightTouchQuat.Z = handPoseRight.Orientation.Z;
                    _rightTouchQuat.W = handPoseRight.Orientation.W;

                    _rightTouchQuat = new SharpDX.Quaternion(handPoseRight.Orientation.X, handPoseRight.Orientation.Y, handPoseRight.Orientation.Z, handPoseRight.Orientation.W);
                    SharpDX.Matrix.RotationQuaternion(ref _rightTouchQuat, out _rightTouchMatrix);

                    _rightTouchMatrix.M41 = handPoseRight.Position.X + sccs.scgraphics.scupdate.originPos.X + sccs.scgraphics.scupdate.movePos.X;
                    _rightTouchMatrix.M42 = handPoseRight.Position.Y + sccs.scgraphics.scupdate.originPos.Y + sccs.scgraphics.scupdate.movePos.Y;
                    _rightTouchMatrix.M43 = handPoseRight.Position.Z + sccs.scgraphics.scupdate.originPos.Z + sccs.scgraphics.scupdate.movePos.Z;

                    //TOUCH CONTROLLER LEFT
                    resultsLeft = sccs.scgraphics.scdirectx.D3D.OVR.GetInputState(sccs.scgraphics.scdirectx.D3D.sessionPtr, sccs.scgraphics.scdirectx.D3D.controllerTypeLTouch, ref sccs.scgraphics.scdirectx.D3D.inputStateLTouch);
                    buttonPressedOculusTouchLeft = sccs.scgraphics.scdirectx.D3D.inputStateLTouch.Buttons;
                    thumbStickLeft = sccs.scgraphics.scdirectx.D3D.inputStateLTouch.Thumbstick;
                    handTriggerLeft = sccs.scgraphics.scdirectx.D3D.inputStateLTouch.HandTrigger;
                    indexTriggerLeft = sccs.scgraphics.scdirectx.D3D.inputStateLTouch.IndexTrigger;
                    handPoseLeft = trackingState.HandPoses[0].ThePose;

                    _leftTouchQuat.X = handPoseLeft.Orientation.X;
                    _leftTouchQuat.Y = handPoseLeft.Orientation.Y;
                    _leftTouchQuat.Z = handPoseLeft.Orientation.Z;
                    _leftTouchQuat.W = handPoseLeft.Orientation.W;

                    _leftTouchQuat = new SharpDX.Quaternion(handPoseLeft.Orientation.X, handPoseLeft.Orientation.Y, handPoseLeft.Orientation.Z, handPoseLeft.Orientation.W);

                    SharpDX.Matrix.RotationQuaternion(ref _leftTouchQuat, out _leftTouchMatrix);
                    //_other_left_touch_matrix = _leftTouchMatrix;
                    //_other_left_touch_matrix.M41 = handPoseLeft.Position.X;
                    //_other_left_touch_matrix.M42 = handPoseLeft.Position.Y;
                    //_other_left_touch_matrix.M43 = handPoseLeft.Position.Z;

                    _leftTouchMatrix.M41 = handPoseLeft.Position.X + sccs.scgraphics.scupdate.originPos.X + sccs.scgraphics.scupdate.movePos.X;
                    _leftTouchMatrix.M42 = handPoseLeft.Position.Y + sccs.scgraphics.scupdate.originPos.Y + sccs.scgraphics.scupdate.movePos.Y;
                    _leftTouchMatrix.M43 = handPoseLeft.Position.Z + sccs.scgraphics.scupdate.originPos.Z + sccs.scgraphics.scupdate.movePos.Z;
                    */
                    //TO READD FOR SOME LOCK SCREEN IN SCENE LOGIC
                    //TO READD FOR SOME LOCK SCREEN IN SCENE LOGIC
                    //TO READD FOR SOME LOCK SCREEN IN SCENE LOGIC
                    /*
                    if (_has_locked_screen_pos == 0)
                    {
                        if (had_locked_screen == 0)
                        {
                            tempMatrix = ikarmvoxel[0]._player_rght_hnd[0][0]._arrayOfInstances[0].current_pos;

                            Vector3 savingPos = new Vector3(tempMatrix.M41, tempMatrix.M42, tempMatrix.M43);

                            Quaternion _testQuator;
                            Quaternion.RotationMatrix(ref tempMatrix, out _testQuator);

                            float xq = _testQuator.X;
                            float yq = _testQuator.Y;
                            float zq = _testQuator.Z;
                            float wq = _testQuator.W;
                            float roll = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180 / Math.PI));
                            float pitch = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180 / Math.PI));
                            float yaw = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180 / Math.PI));

                            //RotationScreenX = pitch;
                            //RotationScreenY = yaw;
                            //RotationScreenZ = roll;

                            _current_screen_pos = _direction_offsetter * tempMatrix;

                            _current_screen_pos.M41 = savingPos.X;
                            _current_screen_pos.M42 = savingPos.Y;
                            _current_screen_pos.M43 = savingPos.Z;

                            _last_screen_pos = tempMatrix;

                        }
                        else if (had_locked_screen == 1)
                        {
                            _last_screen_pos = _world_screen_list[0][0]._arrayOfInstances[0].current_pos;
                            had_locked_screen = 0;
                        }

                        _current_screen_pos = _world_screen_list[0][0]._arrayOfInstances[0].current_pos;
                        _last_screen_pos = _world_screen_list[0][0]._arrayOfInstances[0].current_pos;// worldMatrix_instances_screens[0][0];

                        /*Matrix _temp_mat = finalRotationMatrix;
                        Quaternion _testQuator;
                        Quaternion.RotationMatrix(ref _temp_mat, out _testQuator);

                        xq = _testQuator.X;
                        yq = _testQuator.Y;
                        zq = _testQuator.Z;
                        wq = _testQuator.W;

                        //temproll = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq));// * (180 / Math.PI));
                        //pitch = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180 / Math.PI));//
                        //tempyaw = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq));// * (180 / Math.PI));

                        had_locked_screen = 0;

                    }
                    else if (_has_locked_screen_pos == 1)
                    {
                        if (had_locked_screen == 0)
                        {
                            Quaternion _testQuator;
                            Quaternion.RotationMatrix(ref _last_screen_pos, out _testQuator);

                            float xq = _testQuator.X;
                            float yq = _testQuator.Y;
                            float zq = _testQuator.Z;
                            float wq = _testQuator.W;

                            float roll = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq));// * (180 / Math.PI));
                            float pitch = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180 / Math.PI));//
                            float yaw = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq));// * (180 / Math.PI));

                            hmd_matrix_current = hmd_matrix_current * OriginRot * RotatingMatrix * RotatingMatrixForPelvis;
                            Quaternion.RotationMatrix(ref hmd_matrix_current, out _testQuator);

                            xq = _testQuator.X;
                            yq = _testQuator.Y;
                            zq = _testQuator.Z;
                            wq = _testQuator.W;

                            float roller = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq));// * (180 / Math.PI));
                            float pitcher = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180 / Math.PI));//
                            float yawer = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq));// * (180 / Math.PI));

                            pitch = (float)((Math.PI * pitcher + 45) / 180);
                            roll = (float)(0);

                            tempMatrix = SharpDX.Matrix.RotationYawPitchRoll(pitch, 0, roll);

                            tempMatrix.M41 = _last_screen_pos.M41;
                            tempMatrix.M42 = _last_screen_pos.M42;
                            tempMatrix.M43 = _last_screen_pos.M43;

                            _current_screen_pos = tempMatrix; //_direction_offsetter

                            float somediffx = _current_screen_pos.M41 - sccs.scgraphics.scupdate.OFFSETPOS.X;
                            float somediffy = _current_screen_pos.M42 - sccs.scgraphics.scupdate.OFFSETPOS.Y;
                            float somediffz = _current_screen_pos.M43 - sccs.scgraphics.scupdate.OFFSETPOS.Z;

                            //_current_screen_pos.M41 = _last_screen_pos.M41;
                            //_current_screen_pos.M42 = _last_screen_pos.M42;
                            //_current_screen_pos.M43 = _last_screen_pos.M43;


                            //OFFSETPOS, originRot, rotatingMatrix, hmdmatrixRot, hmd_matrix, rotatingMatrixForPelvis

                            _current_screen_pos = sccs.scgraphics.scupdate.originRot * sccs.scgraphics.scupdate.rotatingMatrix * sccs.scgraphics.scupdate.rotatingMatrixForPelvis * sccs.scgraphics.scupdate.hmdmatrixRot;

                            Quaternion somequat;
                            Quaternion.RotationMatrix(ref _current_screen_pos, out somequat);

                            Vector3 forwardcurrentpos = sc_maths._getDirection(Vector3.ForwardRH, somequat);

                            //_current_screen_pos = sccs.scgraphics.scupdate.ori


                            _current_screen_pos.M41 = sccs.scgraphics.scupdate.OFFSETPOS.X;
                            _current_screen_pos.M42 = sccs.scgraphics.scupdate.OFFSETPOS.Y;
                            _current_screen_pos.M43 = sccs.scgraphics.scupdate.OFFSETPOS.Z;


                            //_current_screen_pos.M41 += somediffx;
                            //_current_screen_pos.M42 += somediffy;
                            //_current_screen_pos.M43 += somediffz;

                            _current_screen_pos.M41 += forwardcurrentpos.X;
                            _current_screen_pos.M42 += forwardcurrentpos.Y;
                            _current_screen_pos.M43 += forwardcurrentpos.Z;


                            had_locked_screen = 1;
                        }
                    }
                    //TO READD FOR SOME LOCK SCREEN IN SCENE LOGIC
                    //TO READD FOR SOME LOCK SCREEN IN SCENE LOGIC
                    //TO READD FOR SOME LOCK SCREEN IN SCENE LOGIC
                    */






                    //float somediffx = _current_screen_pos.M41 - sccs.scgraphics.scupdate.OFFSETPOS.X;
                    //float somediffy = _current_screen_pos.M42 - sccs.scgraphics.scupdate.OFFSETPOS.Y;
                    //float somediffz = _current_screen_pos.M43 - sccs.scgraphics.scupdate.OFFSETPOS.Z;



                    //SETTING THE POSITION OF THE SCREEN
                    //SETTING THE POSITION OF THE SCREEN
                    //SETTING THE POSITION OF THE SCREEN
                    //_world_screen_list[0][0]._arrayOfInstances[0]._POSITION= sccs.scgraphics.scupdate._rightTouchMatrix;
                    //_world_screen_list[0][0]._arrayOfInstances[0].current_pos = _current_screen_pos;//_player_l_hand_grab[0][0]._arrayOfInstances[0].current_pos;// _current_screen_pos;// _player_l_hand_grab[0][0]._arrayOfInstances[0].current_pos;// originRot * rotatingMatrix * rotatingMatrixForPelvis * sccs.scgraphics.scupdate._leftTouchMatrix;
                    //worldMatrix_instances_screens[0][0][0] = _world_screen_list[0][0]._arrayOfInstances[0].current_pos;
                    //worldMatrix_instances_containment_grid_screen[0][0][0] = _world_screen_list[0][0]._arrayOfInstances[0].current_pos;
                    //_world_containment_grid_screen[0][0]._arrayOfInstances[0].current_pos = _world_screen_list[0][0]._arrayOfInstances[0].current_pos;
                    //SETTING THE POSITION OF THE SCREEN
                    //SETTING THE POSITION OF THE SCREEN
                    //SETTING THE POSITION OF THE SCREEN









                    /*screen_mat = _world_screen_list[0][0]._arrayOfInstances[0].current_pos;//_player_lft_hnd[0]._arrayOfInstances[0].current_pos; 


                    //Quaternion _quat_screen;
                    Quaternion.RotationMatrix(ref screen_mat, out _quat_screen);
                     screenNormal = sc_maths._getDirection(Vector3.ForwardRH, _quat_screen);
                    screenNormal.Normalize();
                     planer = new Plane(new Vector3(screen_mat.M41, screen_mat.M42, screen_mat.M43), screenNormal);

                    Vector3 screenPos = new Vector3(_world_screen_list[0][0]._arrayOfInstances[0].current_pos.M41, _world_screen_list[0][0]._arrayOfInstances[0].current_pos.M42, _world_screen_list[0][0]._arrayOfInstances[0].current_pos.M43);
                    float distancer;
                    Vector3.Distance(ref screenPos, ref sccs.scgraphics.scupdate.OFFSETPOS, out distancer);
                    screen_mat = _world_screen_list[0][0]._arrayOfInstances[0].current_pos;*/

                    //SCREEN HMDPOINTER
                    /*if (_out_of_bounds_oculus_rift == 1)// || distancer >= 4)
                    {
                        var tester00 = new Vector3(_screenDirMatrix_correct_pos[0][2].M41, _screenDirMatrix_correct_pos[0][2].M42, _screenDirMatrix_correct_pos[0][2].M43);
                        _oculusR_Cursor_matrix = screen_mat;

                        _oculusR_Cursor_matrix.M41 = tester00.X;
                        _oculusR_Cursor_matrix.M42 = tester00.Y;
                        _oculusR_Cursor_matrix.M43 = tester00.Z;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][4] = _oculusR_Cursor_matrix;
                    }
                    else
                    {
                        worldmatrixinstancesvoxelsforcalculationsonly[0][4] = _oculusR_Cursor_matrix;
                    }*/
                    //END OF 

                    //OCULUS TOUCH RIGHT
                    /*if (_out_of_bounds_right == 1)// || distancer >= 4)
                    {
                        Vector3 tester00 = new Vector3(_screenDirMatrix_correct_pos[0][0][2].M41, _screenDirMatrix_correct_pos[0][0][2].M42, _screenDirMatrix_correct_pos[0][0][2].M43);
                        _intersectTouchRightMatrix = screen_mat;

                        _intersectTouchRightMatrix.M41 = tester00.X;
                        _intersectTouchRightMatrix.M42 = tester00.Y;
                        _intersectTouchRightMatrix.M43 = tester00.Z;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][5] = _intersectTouchRightMatrix;

                    }
                    else
                    {
                        Vector3 tester00 = new Vector3(intersectPointRight.X, intersectPointRight.Y, intersectPointRight.Z);
                        _intersectTouchRightMatrix = screen_mat;

                        _intersectTouchRightMatrix.M41 = tester00.X;
                        _intersectTouchRightMatrix.M42 = tester00.Y;
                        _intersectTouchRightMatrix.M43 = tester00.Z;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][5] = _intersectTouchRightMatrix;
                    }*/




                    /*Vector3 tester01 = new Vector3(intersectPointRight.X, intersectPointRight.Y, intersectPointRight.Z);
                    var newmatrix = screen_mat;
                    newmatrix.M41 = tester01.X;
                    newmatrix.M42 = tester01.Y;
                    newmatrix.M43 = tester01.Z;*/


                    Vector3 cameraPos = sccs.scgraphics.scupdate.Camera.GetPosition();
                    Matrix tempmattrixcamera = sccs.scgraphics.scupdate.Camera.rotationMatrix;
                    Quaternion otherQuat;
                    Quaternion.RotationMatrix(ref tempmattrixcamera, out otherQuat);

                    Vector3 direction_feet_forward;
                    Vector3 direction_feet_right;
                    Vector3 direction_feet_up;

                    direction_feet_forward = -sc_maths._getDirection(Vector3.ForwardRH, otherQuat);
                    direction_feet_right = sc_maths._getDirection(Vector3.Right, otherQuat);
                    direction_feet_up = sc_maths._getDirection(Vector3.Up, otherQuat);



                    Quaternion _quat_screen00;

                    //Matrix mater = worldMatrix_instances_screens[0][0][0];
                    Matrix mater = somevoxelvirtualdesktop[0].currentWorldMatrix;

                    Quaternion.RotationMatrix(ref mater, out _quat_screen00);
                    var screenNormal = sc_maths._getDirection(Vector3.ForwardRH, _quat_screen00);
                    screenNormal.Normalize();

                    var planer = new Plane(new Vector3(mater.M41, mater.M42, mater.M43), screenNormal);
                    //var screen_mat = worldMatrix_instances_screens[0][0][0];
                    Matrix screen_mat = somevoxelvirtualdesktop[0].currentWorldMatrix;

                    var somematroxer2 = screen_mat;
                    Quaternion _quat_screen;
                    Quaternion.RotationMatrix(ref screen_mat, out _quat_screen);
                    screenNormal = sc_maths._getDirection(Vector3.ForwardRH, _quat_screen);
                    screenNormal.Normalize();
                    planer = new Plane(new Vector3(screen_mat.M41, screen_mat.M42, screen_mat.M43), screenNormal);



                    Matrix materrealposscreen = somevoxelvirtualdesktop[0].worldmatofobj;
                    Quaternion.RotationMatrix(ref materrealposscreen, out _quat_screen00);
                    var screenNormalrealpos = sc_maths._getDirection(Vector3.ForwardRH, _quat_screen00);
                    screenNormalrealpos.Normalize();
                    var planerrealposscreen = new Plane(new Vector3(materrealposscreen.M41, materrealposscreen.M42, materrealposscreen.M43), screenNormalrealpos);
                    var raycamrealposscreen = new Ray(cameraPos, direction_feet_forward);
                    Vector3 camintersectsscreenvecrealpos;
                    var camintersectsscreen = raycamrealposscreen.Intersects(ref planerrealposscreen, out camintersectsscreenvecrealpos);
                    //Vector3 offsetmouseposz = camintersectsscreenvec;


                    //NORMAL SCREEN CALCULATION
                    //tempMatrix = worldMatrix_instances_screens[0][0][0];
                    tempMatrix = somevoxelvirtualdesktop[0].currentWorldMatrix;
                    Quaternion.RotationMatrix(ref tempMatrix, out _testQuater);
                    var screenNormalRight = sc_maths._getDirection(Vector3.Right, _testQuater);
                    screenNormalRight.Normalize();
                    var screenNormalUp = sc_maths._getDirection(Vector3.Up, _testQuater);
                    screenNormalUp.Normalize();
                    var screenNormalForward = sc_maths._getDirection(Vector3.ForwardRH, _testQuater);
                    screenNormalForward.Normalize();








                    var tempMatRight = _intersectTouchRightMatrix;

                    /*
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][5] = _intersectTouchRightMatrix;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6] = _intersectTouchLeftMatrix;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][7] = _oculusR_Cursor_matrix;
                    */








                    if (watchforgetmousepos.Elapsed.Milliseconds > 10)
                    {
                        Program.GetCursorPos(out somepoint);

                        //mousex = Program.keynmouseinput._MouseX;
                        //mousey = Program.keynmouseinput._MouseY;

                        mousex = somepoint.X;
                        mousey = somepoint.Y;


                        if (swtccapturemouseinitpos == 0)
                        {
                            mousevirtualx = mousex;
                            mousevirtualy = mousey;

                            mousevirtualinitx = mousex;
                            mousevirtualinity = mousey;

                            swtccapturemouseinitpos = 1;
                        }



                        stopwatchswtc = 0;
                    }
                    //Console.WriteLine(mousex + " " + mousey);




                    /*
                    if (lastmousevirtualx > mousex)
                    {
                        mousevirtualx = (int)Math.Abs(lastmousevirtualx - mousex);
                        positionOfMousereducedx = (((2.0f * (float)mousevirtualx) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceWidth) - 1.0f);
                    }
                    else if (lastmousevirtualx < mousex)
                    {
                        mousevirtualx = (int)Math.Abs(lastmousevirtualx - mousex);
                        positionOfMousereducedx = (((2.0f * (float)mousevirtualx) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceWidth) - 1.0f);
                    }
                    else
                    {

                    }

                    if (lastmousevirtualy > mousey)
                    {
                        mousevirtualy =(int)Math.Abs(lastmousevirtualy - mousey);
                        positionOfMousereducedy = ((((2.0f * (float)mousevirtualy) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceHeight) - 1.0f) * -1.0f);
                    }
                    else if (lastmousevirtualy < mousey)
                    {
                        mousevirtualy = (int)Math.Abs(lastmousevirtualy - mousey);
                        positionOfMousereducedy = ((((2.0f * (float)mousevirtualy) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceHeight) - 1.0f) * -1.0f);
                    }
                    else
                    {

                    }*/













                    Vector3 positionOfScreen = new Vector3(somevoxelvirtualdesktop[0].currentWorldMatrix.M41, somevoxelvirtualdesktop[0].currentWorldMatrix.M42, somevoxelvirtualdesktop[0].currentWorldMatrix.M43);
                    //Vector3 positionOfScreen = somevoxelvirtualdesktop[0].worldmatofobj;


                    float posoffsetx = somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * somevoxelvirtualdesktopglobals.tinyChunkWidth * somevoxelvirtualdesktopglobals.planeSize * 0.5f;
                    float posoffsety = somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * somevoxelvirtualdesktopglobals.tinyChunkHeight * somevoxelvirtualdesktopglobals.planeSize * 0.5f;




                    //var centerPosRight = new Vector3(somepoint.X, somepoint.Y, 0);

                    //var centerPosRight = new Vector3(final_hand_pos_right_locked.M41, final_hand_pos_right_locked.M42, final_hand_pos_right_locked.M43);




                    //var somemat = sc_maths.makeRotationDir(direction_feet_forward,Vector3.Up);
                    //rayDirRighter = sc_maths._getDirection(Vector3.ForwardRH, _rightTouchQuat);




                    /*Vector3 screenorigindir = new Vector3(somevoxelvirtualdesktop[0].worldmatofobj.M41, somevoxelvirtualdesktop[0].worldmatofobj.M42, somevoxelvirtualdesktop[0].worldmatofobj.M43);
                    Matrix tempmatsc = somevoxelvirtualdesktop[0].worldmatofobj;
                    Quaternion otherQuatsc;
                    Quaternion.RotationMatrix(ref tempmatsc, out otherQuatsc);

                    Vector3 directionoriginscreenf;
                    Vector3 directionoriginscreenr;
                    Vector3 directionoriginscreenu;

                    directionoriginscreenf = -sc_maths._getDirection(Vector3.ForwardRH, otherQuatsc);
                    directionoriginscreenr = sc_maths._getDirection(Vector3.Right, otherQuatsc);
                    directionoriginscreenu = sc_maths._getDirection(Vector3.Up, otherQuatsc);
                    */




                    someRay = new Ray(cameraPos, direction_feet_forward);

                    //Vector3 pointVirtualInsideofscreenx = someVirtualPointOnScreenX + direction_feet_forward;
                    Vector3 cameraforwardintersectsscreen;

                    /*
                    var somematroxer2 = screen_mat;
                    Quaternion _quat_screen;
                    Quaternion.RotationMatrix(ref screen_mat, out _quat_screen);
                    screenNormal = sc_maths._getDirection(Vector3.ForwardRH, _quaft_screen);
                    screenNormal.Normalize();
                    planer = new Plane(new Vector3(screen_mat.M41, screen_mat.M42, screen_mat.M43), screenNormal);*/

                    intersecter = someRay.Intersects(ref planer, out cameraforwardintersectsscreen);


                    if (intersecter)
                    {
                        //Console.WriteLine("true " + intersectpointforscreen.X);
                    }
                    else
                    {
                        //Console.WriteLine("false " + intersectpointforscreen.X);
                    }




                    var raycam = new Ray(cameraPos, direction_feet_forward);
                    Vector3 camintersectsscreenvec;
                    camintersectsscreen = raycam.Intersects(ref planer, out camintersectsscreenvec);
                    //Vector3 offsetmouseposz = camintersectsscreenvec;

                    var vert00 = new Vector3(_screenDirMatrix[0][0][0].M41, _screenDirMatrix[0][0][0].M42, _screenDirMatrix[0][0][0].M43);
                    var vert11 = new Vector3(_screenDirMatrix[0][0][1].M41, _screenDirMatrix[0][0][1].M42, _screenDirMatrix[0][0][1].M43);
                    var vert22 = new Vector3(_screenDirMatrix[0][0][2].M41, _screenDirMatrix[0][0][2].M42, _screenDirMatrix[0][0][2].M43);
                    var vert33 = new Vector3(_screenDirMatrix[0][0][3].M41, _screenDirMatrix[0][0][3].M42, _screenDirMatrix[0][0][3].M43);

                    var pointOnScreenn = new Vector3(camintersectsscreenvec.X, camintersectsscreenvec.Y, camintersectsscreenvec.Z);

                    var dd = (vert22 - vert00).Length();
                    widthLength = (vert22 - vert00).Length();
                    heightLength = (vert11 - vert00).Length();
                    float rr = (pointOnScreenn - vert00).Length();
                    var RR = (pointOnScreenn - vert22).Length();
                    var xcirccircc = ((dd * dd) - (rr * rr) + (RR * RR)) / (2.0f * dd);
                    var dd1 = xcirccircc;
                    var dd2 = dd - xcirccircc;

                    //r is with d2
                    //R is with d1
                    //a2 + b2 = c2

                    /*if ( d1 < 0)
                    {
                        //Program.MessageBox((IntPtr)0, "over bounds 0", "sccs message 1", 0);
                        Console.WriteLine("out of bounds 0");
                    }*/

                    float bb = (float)Math.Sqrt((rr * rr) - (dd2 * dd2));
                    currentPosWidth = (widthLength / 2.0f) - dd1; // 
                                                                  //currentPosWidth = dd1; // 
                                                                  //currentPosHeight = ((heightLength/2) - bb);
                    currentPosHeight = bb - (heightLength / 2.0f);

                    /* worldmatrixinstancesvoxelsforcalculationsonly[0][0][0] = somevoxelvirtualdesktop[0].currentWorldMatrix;
                     worldmatrixinstancesvoxelsforcalculationsonly[0][0][0].M41 = (float)currentPosWidth;
                     worldmatrixinstancesvoxelsforcalculationsonly[0][0][0].M42 = (float)currentPosHeight;
                     worldmatrixinstancesvoxelsforcalculationsonly[0][0][0].M43 = (float)pointOnScreenn.Z;
                    */



                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][5] = somevoxelvirtualdesktop[0].currentWorldMatrix;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][5].M41 = (float)pointOnScreenn.X;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][5].M42 = (float)pointOnScreenn.Y;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][5].M43 = (float)pointOnScreenn.Z;

                    //float distfromscreen = (pointOnScreenn - cameraPos).Length();
                    //float sofscrpersp = 1.0f;
                    //Vector3 pointerofcamonscreen = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][0].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][0].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][0].M43);


                    //var positionOfMousereducedx = ((mousex * (somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * 8 * somevoxelvirtualdesktopglobals.planeSize * sofscrpersp)) / (1920));
                    //var positionOfMousereducedy = ((mousey * (somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * 8 * somevoxelvirtualdesktopglobals.planeSize * sofscrpersp)) / (1080));
                    //positionOfMousereducedy = (somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * 8 * somevoxelvirtualdesktopglobals.planeSize * sofscrpersp) - positionOfMousereducedy;



                    //TOREADD

                    //positionOfMousereducedx = (((2.0f * (float)mousex) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceWidth) - 1.0f);
                    //positionOfMousereducedy = ((((2.0f * (float)mousey) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceHeight) - 1.0f) * -1.0f);
                    //TOREADD






                    /*
                    if (lastmousevirtualx > mousex)
                    {
                        mousevirtualx = (int)Math.Abs(lastmousevirtualx - mousex);
                        positionOfMousereducedx = (((2.0f * (float)mousevirtualx) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceWidth) - 1.0f);
                    }
                    else if (lastmousevirtualx < mousex)
                    {
                        mousevirtualx = (int)Math.Abs(lastmousevirtualx - mousex);
                        positionOfMousereducedx = (((2.0f * (float)mousevirtualx) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceWidth) - 1.0f);
                    }
                    else
                    {

                    }

                    if (lastmousevirtualy > mousey)
                    {
                        mousevirtualy = (int)Math.Abs(lastmousevirtualy - mousey);
                        positionOfMousereducedy = ((((2.0f * (float)mousevirtualy) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceHeight) - 1.0f) * -1.0f);
                    }
                    else if (lastmousevirtualy < mousey)
                    {
                        mousevirtualy = (int)Math.Abs(lastmousevirtualy - mousey);
                        positionOfMousereducedy = ((((2.0f * (float)mousevirtualy) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceHeight) - 1.0f) * -1.0f);
                    }
                    else
                    {

                    }*/






                    //var positionOfMousereducedx = (((9 * (float)mousex) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceWidth) - 4.5f);
                    //var positionOfMousereducedy = ((((16 * (float)mousey) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceHeight) - 8.0f) * -8.0f);
                    //var positionOfMousereducedx = (((16 * (float)mousex) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceWidth) - 8);
                    //var positionOfMousereducedy = ((((9 * (float)mousey) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceHeight) - 4.5f) * -4.5f);





                    //Console.WriteLine("mx:" + mousex + " my:" + mousey);

                    //var positionOfMousereducedx = (((float)mousex * 16) / (1920* 16));
                    //var positionOfMousereducedy = (((float)mousey * 9) / (1080 * 9));
                    //var positionOfMousereducedx = 1/(((16f * (float)mousex) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceWidth) - 8f);
                    //var positionOfMousereducedy = 1/((((9f * (float)mousey) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceHeight) - 4.5f) * -4.5f);
                    /*var positionOfMousereducedx = (((2 * (float)mousex) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceWidth) - 1.0f);
                    var positionOfMousereducedy = ((((2 * (float)mousey) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceHeight) - 1.0f) * -1.0f);

                    positionOfMousereducedx = positionOfMousereducedx / projMatrix.M11;
                    positionOfMousereducedy = positionOfMousereducedy / projMatrix.M22;

                    Vector3 someposleftTop = cameraPos + (direction_feet_right * (positionOfMousereducedx)); //9
                    someposleftTop = someposleftTop + (direction_feet_up * (positionOfMousereducedy)); //16


                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6] = somevoxelvirtualdesktop[0].currentWorldMatrix;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][5] = Matrix.Identity;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M41 = (float)someposleftTop.X;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = somevoxelvirtualdesktop[0].currentWorldMatrix.M43;// (float)someposleftTop.Z;
                    */


                    Vector3 currentScreenPos = new Vector3(tempMatrix.M41, tempMatrix.M42, tempMatrix.M43); // new Vector3(xii, yii, zii);// new Vector3(_finalRotMatrixScreen.M41, _finalRotMatrixScreen.M42, _finalRotMatrixScreen.M43);
                    /*Vector3 newDirRight = (screenNormalRight) * sizeWidtherer; // + screenNormalTop
                    currentScreenPos -= newDirRight;
                    Vector3 newDirUp = (screenNormalUp) * sizeheighterer; // + screenNormalTop
                    currentScreenPos -= newDirUp;*/
                    Matrix resulter0 = tempMatrix;
                    resulter0.M41 = currentScreenPos.X;
                    resulter0.M42 = currentScreenPos.Y;
                    resulter0.M43 = currentScreenPos.Z;
                    _screenDirMatrix_correct_pos[0][0][0] = resulter0;

                    currentScreenPos = new Vector3(tempMatrix.M41, tempMatrix.M42, tempMatrix.M43);
                    //Vector3 newDirRight = (screenNormalRight) * (sizeWidtherer*2);
                    //currentScreenPos -= newDirRight;
                    Vector3 newDirUp = (screenNormalUp) * (sizeheighterer * 2.0f);
                    currentScreenPos += newDirUp;
                    resulter0 = tempMatrix;
                    resulter0.M41 = currentScreenPos.X;
                    resulter0.M42 = currentScreenPos.Y;
                    resulter0.M43 = currentScreenPos.Z;
                    _screenDirMatrix_correct_pos[0][0][1] = resulter0;

                    currentScreenPos = new Vector3(tempMatrix.M41, tempMatrix.M42, tempMatrix.M43);
                    Vector3 newDirRight = (screenNormalRight) * (sizeWidtherer * 2.0f);
                    currentScreenPos += newDirRight;
                    //newDirUp = (screenNormalUp) * sizeheighterer;
                    //currentScreenPos -= newDirUp;
                    resulter0 = tempMatrix;
                    resulter0.M41 = currentScreenPos.X;
                    resulter0.M42 = currentScreenPos.Y;
                    resulter0.M43 = currentScreenPos.Z;
                    _screenDirMatrix_correct_pos[0][0][2] = resulter0;

                    currentScreenPos = new Vector3(tempMatrix.M41, tempMatrix.M42, tempMatrix.M43);
                    newDirRight = (screenNormalRight) * (sizeWidtherer * 2.0f);
                    currentScreenPos += newDirRight;
                    newDirUp = (screenNormalUp) * (sizeheighterer * 2.0f);
                    currentScreenPos += newDirUp;
                    resulter0 = tempMatrix;
                    resulter0.M41 = currentScreenPos.X;
                    resulter0.M42 = currentScreenPos.Y;
                    resulter0.M43 = currentScreenPos.Z;
                    _screenDirMatrix_correct_pos[0][0][3] = resulter0;

                    vert00 = new Vector3(_screenDirMatrix_correct_pos[0][0][0].M41, _screenDirMatrix_correct_pos[0][0][0].M42, _screenDirMatrix_correct_pos[0][0][0].M43);
                    vert11 = new Vector3(_screenDirMatrix_correct_pos[0][0][1].M41, _screenDirMatrix_correct_pos[0][0][1].M42, _screenDirMatrix_correct_pos[0][0][1].M43);
                    vert22 = new Vector3(_screenDirMatrix_correct_pos[0][0][2].M41, _screenDirMatrix_correct_pos[0][0][2].M42, _screenDirMatrix_correct_pos[0][0][2].M43);
                    vert33 = new Vector3(_screenDirMatrix_correct_pos[0][0][3].M41, _screenDirMatrix_correct_pos[0][0][3].M42, _screenDirMatrix_correct_pos[0][0][3].M43);

                    float distfromscreen = (pointOnScreenn - cameraPos).Length();
                    //float ratioofhowsmall = (distfromscreen * heightLength) / 1;




                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][0] = somevoxelvirtualdesktop[0].currentWorldMatrix;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][0].M41 = _screenDirMatrix_correct_pos[0][0][0].M41;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][0].M42 = _screenDirMatrix_correct_pos[0][0][0].M42;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][0].M43 = _screenDirMatrix_correct_pos[0][0][0].M43;

                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][1] = somevoxelvirtualdesktop[0].currentWorldMatrix;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][1].M41 = _screenDirMatrix_correct_pos[0][0][1].M41;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][1].M42 = _screenDirMatrix_correct_pos[0][0][1].M42;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][1].M43 = _screenDirMatrix_correct_pos[0][0][1].M43;

                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][2] = somevoxelvirtualdesktop[0].currentWorldMatrix;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][2].M41 = _screenDirMatrix_correct_pos[0][0][2].M41;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][2].M42 = _screenDirMatrix_correct_pos[0][0][2].M42;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][2].M43 = _screenDirMatrix_correct_pos[0][0][2].M43;

                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][3] = somevoxelvirtualdesktop[0].currentWorldMatrix;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][3].M41 = _screenDirMatrix_correct_pos[0][0][3].M41;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][3].M42 = _screenDirMatrix_correct_pos[0][0][3].M42;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][3].M43 = _screenDirMatrix_correct_pos[0][0][3].M43;









                    mousevirtualx = (float)Math.Abs(mousex);
                    positionOfMousereducedx = (((2.0f * (float)mousevirtualx) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceWidth) - 1.0f);

                    mousevirtualy = (float)Math.Abs(mousey);
                    positionOfMousereducedy = ((((2.0f * (float)mousevirtualy) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceHeight) - 1.0f) * -1.0f);







                    // cameraPos + (direction_feet_forward * 1.0f);// 
                    ///Vector3 screenorigindir =new Vector3(somevoxelvirtualdesktop[0].worldmatofobj.M41, somevoxelvirtualdesktop[0].worldmatofobj.M42, somevoxelvirtualdesktop[0].worldmatofobj.M43);
                    //Vector3 screenorigindir = new Vector3(somevoxelvirtualdesktop[0].currentWorldMatrix.M41, somevoxelvirtualdesktop[0].currentWorldMatrix.M42, somevoxelvirtualdesktop[0].currentWorldMatrix.M43);
                    //Vector3 screenorigindir = cameraPos;// new Vector3(somevoxelvirtualdesktop[0].currentWorldMatrix.M41, somevoxelvirtualdesktop[0].currentWorldMatrix.M42, somevoxelvirtualdesktop[0].currentWorldMatrix.M43);


                    Matrix tempmatsc = somevoxelvirtualdesktop[0].currentWorldMatrix; // tempmattrixcamera;// 
                    Quaternion otherQuatsc;
                    Quaternion.RotationMatrix(ref tempmatsc, out otherQuatsc);

                    Vector3 directionoriginscreenf;
                    Vector3 directionoriginscreenr;
                    Vector3 directionoriginscreenu;

                    directionoriginscreenf = -sc_maths._getDirection(Vector3.ForwardRH, otherQuatsc);
                    directionoriginscreenr = sc_maths._getDirection(Vector3.Right, otherQuatsc);
                    directionoriginscreenu = sc_maths._getDirection(Vector3.Up, otherQuatsc);

                    float somevalxxx = 9.0f * 1.05f;// 1.125f; //9.0f // 
                    float somevalyyy = 16.0f * 1.05f; //16.0f 1.7777777777777777777777777777778f // 

                    Vector3 somemaxposleftbottom = cameraPos - (directionoriginscreenr * (-1.0f / somevalxxx)); //9
                    somemaxposleftbottom = somemaxposleftbottom - (directionoriginscreenu * (-1.0f / somevalyyy)); //16

                    somemaxposleftbottom = somemaxposleftbottom + (directionoriginscreenf * 0.145f);
                    //somemaxposleftbottom.Z = cameraPos.Z;
                    //Console.WriteLine("x:" + somemaxposleftbottom.X + " y:" + somemaxposleftbottom.Y);

                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][15] = tempmatsc;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][15].M41 = (float)somemaxposleftbottom.X;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][15].M42 = (float)somemaxposleftbottom.Y;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][15].M43 = (float)somemaxposleftbottom.Z;

                    somemaxposleftbottom = cameraPos - (directionoriginscreenr * (-1.0f / somevalxxx)); //9
                    somemaxposleftbottom = somemaxposleftbottom + (directionoriginscreenu * (-1.0f / somevalyyy)); //16
                    somemaxposleftbottom = somemaxposleftbottom + (directionoriginscreenf * 0.145f);
                    //somemaxposleftbottom.Z = cameraPos.Z;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][16] = tempmatsc;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][16].M41 = (float)somemaxposleftbottom.X;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][16].M42 = (float)somemaxposleftbottom.Y;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][16].M43 = (float)somemaxposleftbottom.Z;

                    somemaxposleftbottom = cameraPos + (directionoriginscreenr * (-1.0f / somevalxxx)); //9
                    somemaxposleftbottom = somemaxposleftbottom - (directionoriginscreenu * (-1.0f / somevalyyy)); //16
                    somemaxposleftbottom = somemaxposleftbottom + (directionoriginscreenf * 0.145f);
                    //somemaxposleftbottom.Z = cameraPos.Z;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][17] = tempmatsc;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][17].M41 = (float)somemaxposleftbottom.X;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][17].M42 = (float)somemaxposleftbottom.Y;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][17].M43 = (float)somemaxposleftbottom.Z;

                    somemaxposleftbottom = cameraPos + (directionoriginscreenr * (-1.0f / somevalxxx)); //9
                    somemaxposleftbottom = somemaxposleftbottom + (directionoriginscreenu * (-1.0f / somevalyyy)); //16
                    somemaxposleftbottom = somemaxposleftbottom + (directionoriginscreenf * 0.145f);
                    //somemaxposleftbottom.Z = cameraPos.Z;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][18] = tempmatsc;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][18].M41 = (float)somemaxposleftbottom.X;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][18].M42 = (float)somemaxposleftbottom.Y;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][18].M43 = (float)somemaxposleftbottom.Z;


                    /*tempmatsc =tempmattrixcamera;// 
                    //Quaternion otherQuatsc;
                    Quaternion.RotationMatrix(ref tempmatsc, out otherQuatsc);

                    //Vector3 directionoriginscreenf;
                    //Vector3 directionoriginscreenr;
                    //Vector3 directionoriginscreenu;

                    directionoriginscreenf = -sc_maths._getDirection(Vector3.ForwardRH, otherQuatsc);
                    directionoriginscreenr = sc_maths._getDirection(Vector3.Right, otherQuatsc);
                    directionoriginscreenu = sc_maths._getDirection(Vector3.Up, otherQuatsc);
                    */


                    somevalxxx = 9.0f * 1.05f;// 1.125f; //9.0f // 131072.0f
                    somevalyyy = 16.0f * 1.05f; //16.0f 1.7777777777777777777777777777778f // 

                    somemaxposleftbottom = cameraPos + (directionoriginscreenr * (positionOfMousereducedx / somevalxxx)); //9
                    somemaxposleftbottom = somemaxposleftbottom + (directionoriginscreenu * (positionOfMousereducedy / somevalyyy)); //16
                    somemaxposleftbottom = somemaxposleftbottom + (directionoriginscreenf * 0.145f);
                    Vector3 realcamcursormemoryposonvd = somemaxposleftbottom;

                    //Matrix initmatfortest = tempmatsc;
                    /*worldmatrixinstancesvoxelsforcalculationsonly[0][0][6] = tempmatsc;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][5] = Matrix.Identity;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M41 = (float)somemaxposleftbottom.X;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)pointOnScreenn.Z;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)somemaxposleftbottom.Y;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)somemaxposleftbottom.Z;*/

                    Matrix tempmatsc1 = tempmattrixcamera;// 
                    Quaternion otherQuatsc1;
                    Quaternion.RotationMatrix(ref tempmatsc1, out otherQuatsc1);

                    Vector3 directionoriginscreenf1;
                    Vector3 directionoriginscreenr1;
                    Vector3 directionoriginscreenu1;

                    directionoriginscreenf1 = -sc_maths._getDirection(Vector3.ForwardRH, otherQuatsc1);
                    directionoriginscreenr1 = sc_maths._getDirection(Vector3.Right, otherQuatsc1);
                    directionoriginscreenu1 = sc_maths._getDirection(Vector3.Up, otherQuatsc1);
                    //screenorigindir = new Vector3(tempMatrix.M41, tempMatrix.M42, tempMatrix.M43);

                    somevalxxx = 9.0f * 1.05f;// 1.125f; //9.0f // 
                    somevalyyy = 16.0f * 1.05f; //16.0f 1.7777777777777777777777777777778f // 

                    somemaxposleftbottom = cameraPos + (directionoriginscreenr1 * (positionOfMousereducedx / somevalxxx)); //9
                    somemaxposleftbottom = somemaxposleftbottom + (directionoriginscreenu1 * (positionOfMousereducedy / somevalyyy)); //16
                    somemaxposleftbottom = somemaxposleftbottom + (directionoriginscreenf1 * 0.145f);
                    Vector3 camcursormemoryposon = somemaxposleftbottom;

                    tempMatrix = somevoxelvirtualdesktop[0].worldmatofobj;
                    Quaternion.RotationMatrix(ref tempMatrix, out _testQuater);
                    screenNormalRight = sc_maths._getDirection(Vector3.Right, _testQuater);
                    screenNormalRight.Normalize();
                    screenNormalUp = sc_maths._getDirection(Vector3.Up, _testQuater);
                    screenNormalUp.Normalize();
                    screenNormalForward = sc_maths._getDirection(Vector3.ForwardRH, _testQuater);
                    screenNormalForward.Normalize();

                    currentScreenPos = new Vector3(tempMatrix.M41, tempMatrix.M42, tempMatrix.M43); // new Vector3(xii, yii, zii);// new Vector3(_finalRotMatrixScreen.M41, _finalRotMatrixScreen.M42, _finalRotMatrixScreen.M43);
                                                                                                    //newDirRight = (screenNormalRight) * sizeWidtherer; // + screenNormalTop
                                                                                                    //currentScreenPos -= newDirRight;
                                                                                                    //newDirUp = (screenNormalUp) * sizeheighterer; // + screenNormalTop
                                                                                                    //currentScreenPos -= newDirUp;
                    resulter0 = tempMatrix;
                    resulter0.M41 = currentScreenPos.X;
                    resulter0.M42 = currentScreenPos.Y;
                    resulter0.M43 = currentScreenPos.Z;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][8] = resulter0;

                    currentScreenPos = new Vector3(tempMatrix.M41, tempMatrix.M42, tempMatrix.M43);
                    //Vector3 newDirRight = (screenNormalRight) * (sizeWidtherer*2);
                    //currentScreenPos -= newDirRight;
                    newDirUp = (screenNormalUp) * (sizeheighterer * 2.0f);
                    currentScreenPos += newDirUp;
                    resulter0 = tempMatrix;
                    resulter0.M41 = currentScreenPos.X;
                    resulter0.M42 = currentScreenPos.Y;
                    resulter0.M43 = currentScreenPos.Z;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][9] = resulter0;

                    currentScreenPos = new Vector3(tempMatrix.M41, tempMatrix.M42, tempMatrix.M43);
                    newDirRight = (screenNormalRight) * (sizeWidtherer * 2.0f);
                    currentScreenPos += newDirRight;
                    //newDirUp = (screenNormalUp) * sizeheighterer;
                    //currentScreenPos -= newDirUp;
                    resulter0 = tempMatrix;
                    resulter0.M41 = currentScreenPos.X;
                    resulter0.M42 = currentScreenPos.Y;
                    resulter0.M43 = currentScreenPos.Z;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][10] = resulter0;

                    currentScreenPos = new Vector3(tempMatrix.M41, tempMatrix.M42, tempMatrix.M43);
                    newDirRight = (screenNormalRight) * (sizeWidtherer * 2.0f);
                    currentScreenPos += newDirRight;
                    newDirUp = (screenNormalUp) * (sizeheighterer * 2.0f);
                    currentScreenPos += newDirUp;
                    resulter0 = tempMatrix;
                    resulter0.M41 = currentScreenPos.X;
                    resulter0.M42 = currentScreenPos.Y;
                    resulter0.M43 = currentScreenPos.Z;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][11] = resulter0;




                    Vector3 verttopright = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][18].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][18].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][18].M43);
                    Vector3 vertbottomright = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][17].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][17].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][17].M43);
                    Vector3 vertbottomleft = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][15].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][15].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][15].M43);
                    Vector3 verttopleft = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][16].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][16].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][16].M43);


                    /*
                    Vector3 verttopright = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][4].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][4].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][4].M43);
                    Vector3 vertbottomright = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][3].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][3].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][3].M43);
                    Vector3 vertbottomleft = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][1].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][1].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][1].M43);
                    Vector3 verttopleft = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][2].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][2].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][2].M43);
                    */


                    Vector3 cursorloc = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43);


                    //Vector3 realscreencornerleftbottom = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][9].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][9].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][9].M43);
                    Vector3 realscreencornerleftbottom = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][8].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][8].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][8].M43);

                    float maxdistx = (verttopright - verttopleft).Length();
                    float maxdisty = (vertbottomright - verttopright).Length();


                    float diffx = vertbottomleft.X - cursorloc.X;
                    float diffy = vertbottomleft.Y - cursorloc.Y;

                    float ratiox = maxdistx / diffx;
                    float ratioy = maxdisty / diffy;


                    //Vector3 verttopright0 = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][11].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][11].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][11].M43);
                    //Vector3 vertbottomright0 = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][10].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][10].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][10].M43);
                    //Vector3 vertbottomleft0 = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][8].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][8].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][8].M43);
                    //Vector3 verttopleft0 = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][9].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][9].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][9].M43);


                    Vector3 verttopright0 = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][11].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][11].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][11].M43);
                    Vector3 vertbottomright0 = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][10].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][10].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][10].M43);
                    Vector3 vertbottomleft0 = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][8].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][8].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][8].M43);
                    Vector3 verttopleft0 = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][9].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][9].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][9].M43);

                    float maxdistx0 = (verttopright0 - verttopleft0).Length();
                    float maxdisty0 = (vertbottomright0 - verttopright0).Length();

                    float cursorx = maxdistx0 - (maxdistx0 / ratiox);
                    float cursory = maxdisty0 - (maxdisty0 / ratioy); // - 




                    somemaxposleftbottom = realscreencornerleftbottom + (screenNormalRight * (cursorx)); //9
                    somemaxposleftbottom = somemaxposleftbottom + (screenNormalUp * ((cursory))); //16

                    Vector3 memposition = somemaxposleftbottom;




                    //Vector3 cursorposonscreentovdcursor = somemaxposleftbottom - realcamcursormemoryposonvd;
                    //cursorposonscreentovdcursor.Normalize();


                    //somemaxposleftbottom = somemaxposleftbottom - (cursorposonscreentovdcursor * 0.1f);

                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][19] = Matrix.Identity;// somevoxelvirtualdesktop[0].worldmatofobj;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M41 = (float)somemaxposleftbottom.X;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M42 = (float)somemaxposleftbottom.Y;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M43 = (float)somemaxposleftbottom.Z;




                    //realcamcursormemoryposonvd = realcamcursormemoryposonvd - (cursorposonscreentovdcursor * 0.1f);



                    /*
                    tempmatsc = somevoxelvirtualdesktop[0].currentWorldMatrix; // tempmattrixcamera;// 
                    //Quaternion otherQuatsc;
                    Quaternion.RotationMatrix(ref tempmatsc, out otherQuatsc);

                    directionoriginscreenf = -sc_maths._getDirection(Vector3.ForwardRH, otherQuatsc);
                    directionoriginscreenr = sc_maths._getDirection(Vector3.Right, otherQuatsc);
                    directionoriginscreenu = sc_maths._getDirection(Vector3.Up, otherQuatsc);
                    */

                    /*
                    somemaxposleftbottom = cameraPos + (directionoriginscreenr * (cursorx)); //9
                    somemaxposleftbottom = somemaxposleftbottom + (directionoriginscreenu * (cursory)); //16

                    Vector3 realviewmatrixcursorpos = somemaxposleftbottom;*/

                    /*
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6] = Matrix.Identity;// tempmatsc;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][5] = Matrix.Identity;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M41 = (float)somemaxposleftbottom.X;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)pointOnScreenn.Z;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)somemaxposleftbottom.Y;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)cameraPos.Z;*/



                    Vector3 somedirforward = memposition - new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43);
                    somedirforward.Normalize();







                    float someyaw = 0;
                    float someroll = 0;
                    float somepitch = 0;



                    dataForPerceptronXAxis.dronePos = camcursormemoryposon;
                    Matrix targetpoint = worldmatrixinstancesvoxelsforcalculationsonly[0][0][19];
                    Quaternion targetpointquat;
                    Quaternion.RotationMatrix(ref targetpoint, out targetpointquat);
                    Vector3 forwardtargetpoint = sc_maths._getDirection(Vector3.ForwardRH, targetpointquat);
                    Vector3 righttargetpoint = sc_maths._getDirection(Vector3.Right, targetpointquat);
                    Vector3 uptargetpoint = sc_maths._getDirection(Vector3.Up, targetpointquat);

                    Matrix initpoint = worldmatrixinstancesvoxelsforcalculationsonly[0][0][6];
                    Quaternion initpointquat;
                    Quaternion.RotationMatrix(ref initpoint, out initpointquat);
                    Vector3 forwardinitpoint = sc_maths._getDirection(Vector3.ForwardRH, initpointquat);
                    Vector3 rightinitpoint = sc_maths._getDirection(Vector3.Right, initpointquat);
                    Vector3 upinitpoint = sc_maths._getDirection(Vector3.Up, initpointquat);


                    dataForPerceptronXAxis.dronePosDirForward = forwardinitpoint; //dirDroneInstanceForward;
                    dataForPerceptronXAxis.dronePosDirRight = rightinitpoint; //new Vector3(dirDroneInstanceRight.X, dirDroneInstanceRight.Y, dirDroneInstanceRight.Z); //dirDroneInstanceRight;
                    dataForPerceptronXAxis.dronePosDirUp = upinitpoint; //new Vector3(dirDroneInstanceUp.X, dirDroneInstanceUp.Y, dirDroneInstanceUp.Z); // dirDroneInstanceUp;


                    dataForPerceptronXAxis.playerPos = memposition; //pointTarget;
                    dataForPerceptronXAxis.playerDirForward = forwardtargetpoint; //dirTargetInstanceForward;
                    dataForPerceptronXAxis.playerDirRight = righttargetpoint; //new Vector3(dirTargetInstanceRight.X, dirTargetInstanceRight.Y, dirTargetInstanceRight.Z); //dirTargetInstanceRight;
                    dataForPerceptronXAxis.playerDirUp = uptargetpoint; //new Vector3(dirTargetInstanceUp.X, dirTargetInstanceUp.Y, dirTargetInstanceUp.Z); //dirTargetInstanceUp;

                    dataForPerceptronXAxis.formationWaypoint = memposition; //pointTarget;


                    //Quaternion otherQuat;
                    //Quaternion.RotationMatrix(ref worldMatrixChunkDroneInstance, out otherQuat);
                    //otherQuat.Normalize();


                    var xq = initpointquat.X;
                    var yq = initpointquat.Y;
                    var zq = initpointquat.Z;
                    var wq = initpointquat.W;

                    //Vector3 vecPitchYawRoll = sc_maths.QuaternionToEuler(otherQuat);
                    Vector3 vecPitchYawRoll = sc_maths.QuaternionToEuler(initpointquat);

                    //float pitcha = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180.0f / Math.PI));
                    //float yawa = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180.0f / Math.PI));
                    //float rolla = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180.0f / Math.PI));

                    float pitcha = vecPitchYawRoll.X;//(float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180.0f / Math.PI)); //
                    float yawa = vecPitchYawRoll.Y;//(float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180.0f / Math.PI));
                    float rolla = vecPitchYawRoll.Z;//(float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180.0f / Math.PI));

                    dataForPerceptronXAxis.angleX = pitcha;
                    dataForPerceptronXAxis.angleY = yawa;
                    dataForPerceptronXAxis.angleZ = rolla;

                    dataForPerceptronXAxis.formationWaypointOffsetX = 0;
                    dataForPerceptronXAxis.formationWaypointOffsetY = 0;
                    dataForPerceptronXAxis.formationWaypointOffsetZ = 0;


                    if (perceptronRotationXAXIS != null)
                    {
                        if (perceptronRotationXAXIS.SC_AI != null)
                        {
                            if (perceptronRotationXAXIS.SC_AI.Length > 0)
                            {

                                if (perceptronRotationXAXIS.hasinitperceptronsweight == 1)
                                {
                                    //PITCH
                                    //PITCH
                                    //PITCH

                                    //Console.WriteLine("!null");
                                    //TO READD
                                    //TO READD
                                    //TO READD
                                    dataForPerceptronXAxis.CompassTypeSwitch = 2;
                                    //dataForPerceptronXAxis.swtchwaypointtype = 2;
                                    somepitch = perceptronRotationXAXIS.Update(dataForPerceptronXAxis, initpoint, out rotatedDroneMatrix);
                                    //someyaw = perceptronRotationXAXIS[c][cc].Update(dataForPerceptronXAxis, InitialDroneMatrix, out rotatedDroneMatrix);
                                    /*

                                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6] = rotatedDroneMatrix;// somevoxelvirtualdesktop[0].worldmatofobj;
                                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M41 = (float)realcamcursormemoryposonvd.X;
                                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)realcamcursormemoryposonvd.Y;
                                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)realcamcursormemoryposonvd.Z;

                                    */

                                    //dataForPerceptronYAXIS.CompassTypeSwitch = 2;
                                    //perceptronRotationXAXIS[c][cc].Update(dataForPerceptronYAXIS, InitialDroneMatrix, out rotatedDroneMatrix);
                                    //perceptronRotationXAXIS[c][cc].switchWaypoint = 1;
                                    //perceptronRotationXAXIS[c][cc].UpdatePerceptron(dataForPerceptronXAxis);
                                    //Console.WriteLine("! null");
                                    //TO READD
                                    //TO READD
                                    //TO READD

                                    //PITCH
                                    //PITCH
                                    //PITCH
                                }
                            }
                        }
                    }
                    else
                    {
                        //TO READD
                        //TO READD
                        //TO READD
                        //Console.WriteLine(" null");

                        //Matrix matrixPosHandRight0 = _player_rght_hnd[0][0]._arrayOfInstances[0].current_pos;
                        //Matrix worldMatrixChunkDroneInstance0 = arrayOfChunks[c].arrayOfScriptForInstances[cc].current_pos;
                        //perceptronRotationXAXIS[c][cc] = new SC_AI_Start(matrixPosHandRight0, worldMatrixChunkDroneInstance0);

                        //perceptronRotationXAXIS[c][cc] = new SC_AI(worldMatrixChunkDroneInstance0, matrixPosHandRight0);
                        //TO READD
                        //TO READD
                        //TO READD
                    }





                    initpoint = worldmatrixinstancesvoxelsforcalculationsonly[0][0][6];
                    //Quaternion initpointquat;
                    Quaternion.RotationMatrix(ref initpoint, out initpointquat);
                    xq = initpointquat.X;
                    yq = initpointquat.Y;
                    zq = initpointquat.Z;
                    wq = initpointquat.W;

                    //Vector3 vecPitchYawRoll = sc_maths.QuaternionToEuler(otherQuat);
                    vecPitchYawRoll = sc_maths.QuaternionToEuler(initpointquat);

                    //float pitcha = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180.0f / Math.PI));
                    //float yawa = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180.0f / Math.PI));
                    //float rolla = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180.0f / Math.PI));

                    pitcha = vecPitchYawRoll.X;//(float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180.0f / Math.PI)); //
                    yawa = vecPitchYawRoll.Y;//(float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180.0f / Math.PI));
                    rolla = vecPitchYawRoll.Z;//(float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180.0f / Math.PI));

                    dataForPerceptronYAXIS.angleX = pitcha;
                    dataForPerceptronYAXIS.angleY = yawa;
                    dataForPerceptronYAXIS.angleZ = rolla;

                    dataForPerceptronYAXIS.formationWaypointOffsetX = 0;
                    dataForPerceptronYAXIS.formationWaypointOffsetY = 0;
                    dataForPerceptronYAXIS.formationWaypointOffsetZ = 0;

                    dataForPerceptronYAXIS.dronePos = camcursormemoryposon; //pointStart;


                    targetpoint = worldmatrixinstancesvoxelsforcalculationsonly[0][0][19];
                    //Quaternion targetpointquat;
                    Quaternion.RotationMatrix(ref targetpoint, out targetpointquat);
                    forwardtargetpoint = sc_maths._getDirection(Vector3.ForwardRH, targetpointquat);
                    righttargetpoint = sc_maths._getDirection(Vector3.Right, targetpointquat);
                    uptargetpoint = sc_maths._getDirection(Vector3.Up, targetpointquat);

                    //initpoint = worldmatrixinstancesvoxelsforcalculationsonly[0][0][6];
                    //Quaternion initpointquat;
                    Quaternion.RotationMatrix(ref initpoint, out initpointquat);
                    forwardinitpoint = sc_maths._getDirection(Vector3.ForwardRH, initpointquat);
                    rightinitpoint = sc_maths._getDirection(Vector3.Right, initpointquat);
                    upinitpoint = sc_maths._getDirection(Vector3.Up, initpointquat);


                    dataForPerceptronYAXIS.dronePosDirForward = forwardinitpoint; //dirDroneInstanceForward;
                    dataForPerceptronYAXIS.dronePosDirRight = rightinitpoint; //new Vector3(dirDroneInstanceRight.X, dirDroneInstanceRight.Y, dirDroneInstanceRight.Z); //dirDroneInstanceRight;
                    dataForPerceptronYAXIS.dronePosDirUp = upinitpoint; //new Vector3(dirDroneInstanceUp.X, dirDroneInstanceUp.Y, dirDroneInstanceUp.Z); // dirDroneInstanceUp;


                    dataForPerceptronYAXIS.playerPos = memposition; //pointTarget;
                    dataForPerceptronYAXIS.playerDirForward = forwardtargetpoint; //dirTargetInstanceForward;
                    dataForPerceptronYAXIS.playerDirRight = righttargetpoint; //new Vector3(dirTargetInstanceRight.X, dirTargetInstanceRight.Y, dirTargetInstanceRight.Z); //dirTargetInstanceRight;
                    dataForPerceptronYAXIS.playerDirUp = uptargetpoint; //new Vector3(dirTargetInstanceUp.X, dirTargetInstanceUp.Y, dirTargetInstanceUp.Z); //dirTargetInstanceUp;

                    dataForPerceptronYAXIS.formationWaypoint = memposition; //pointTarget;




                    //Matrix.Multiply();



                    if (perceptronRotationYAXIS != null)
                    {
                        //YAW
                        //YAW
                        //YAW

                        //TO READD
                        //TO READD
                        //TO READD
                        dataForPerceptronYAXIS.CompassTypeSwitch = 0;
                        someyaw = perceptronRotationYAXIS.Update(dataForPerceptronYAXIS, initpoint, out rotatedDroneMatrix1);


                        //rotatedDroneMatrix1 = rotatedDroneMatrix * rotatedDroneMatrix1;


                        /*worldmatrixinstancesvoxelsforcalculationsonly[0][0][6] = rotatedDroneMatrix * rotatedDroneMatrix1;// somevoxelvirtualdesktop[0].worldmatofobj;
                        //realcamcursormemoryposonvd = realcamcursormemoryposonvd + (cursorposonscreentovdcursor * (_screen_assets_size_z * 0.5f));
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M41 = (float)realcamcursormemoryposonvd.X;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)realcamcursormemoryposonvd.Y;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)realcamcursormemoryposonvd.Z;
                        */
                        //dataForPerceptronYAXIS.CompassTypeSwitch = 2;
                        //perceptronRotationXAXIS[c][cc].Update(dataForPerceptronYAXIS, InitialDroneMatrix, out rotatedDroneMatrix);
                        //perceptronRotationXAXIS[c][cc].switchWaypoint = 1;
                        //perceptronRotationXAXIS[c][cc].UpdatePerceptron(dataForPerceptronXAxis);
                        //Console.WriteLine("! null");
                        //TO READD
                        //TO READD
                        //TO READD
                    }
                    else
                    {
                        //TO READD
                        //TO READD
                        //TO READD
                        //Console.WriteLine(" null");

                        //Matrix matrixPosHandRight0 = _player_rght_hnd[0][0]._arrayOfInstances[0].current_pos;
                        //Matrix worldMatrixChunkDroneInstance0 = arrayOfChunks[c].arrayOfScriptForInstances[cc].current_pos;
                        //Vector3 posTarget = new Vector3(matrixPosHandRight0.M41, matrixPosHandRight0.M42, matrixPosHandRight0.M43);
                        //Vector3 pivotPos= new Vector3(worldMatrixChunkDroneInstance0.M41, worldMatrixChunkDroneInstance0.M42, worldMatrixChunkDroneInstance0.M43);
                        //perceptronRotationXAXIS[c][cc] = new SC_AI_Start(matrixPosHandRight0, worldMatrixChunkDroneInstance0);

                        //perceptronRotationXAXIS[c][cc] = new SC_AI(worldMatrixChunkDroneInstance0, matrixPosHandRight0);
                        //TO READD
                        //TO READD
                        //TO READD
                    }








                    initpoint = worldmatrixinstancesvoxelsforcalculationsonly[0][0][6];
                    //Quaternion initpointquat;
                    Quaternion.RotationMatrix(ref initpoint, out initpointquat);
                    xq = initpointquat.X;
                    yq = initpointquat.Y;
                    zq = initpointquat.Z;
                    wq = initpointquat.W;

                    //Vector3 vecPitchYawRoll = sc_maths.QuaternionToEuler(otherQuat);
                    vecPitchYawRoll = sc_maths.QuaternionToEuler(initpointquat);

                    //float pitcha = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180.0f / Math.PI));
                    //float yawa = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180.0f / Math.PI));
                    //float rolla = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180.0f / Math.PI));

                    pitcha = vecPitchYawRoll.X;//(float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180.0f / Math.PI)); //
                    yawa = vecPitchYawRoll.Y;//(float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180.0f / Math.PI));
                    rolla = vecPitchYawRoll.Z;//(float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180.0f / Math.PI));

                    dataForPerceptronZAXIS.angleX = pitcha;
                    dataForPerceptronZAXIS.angleY = yawa;
                    dataForPerceptronZAXIS.angleZ = rolla;

                    dataForPerceptronZAXIS.formationWaypointOffsetX = 0;
                    dataForPerceptronZAXIS.formationWaypointOffsetY = 0;
                    dataForPerceptronZAXIS.formationWaypointOffsetZ = 0;

                    dataForPerceptronZAXIS.dronePos = camcursormemoryposon; //pointStart;


                    targetpoint = worldmatrixinstancesvoxelsforcalculationsonly[0][0][19];
                    //Quaternion targetpointquat;
                    Quaternion.RotationMatrix(ref targetpoint, out targetpointquat);
                    forwardtargetpoint = sc_maths._getDirection(Vector3.ForwardRH, targetpointquat);
                    righttargetpoint = sc_maths._getDirection(Vector3.Right, targetpointquat);
                    uptargetpoint = sc_maths._getDirection(Vector3.Up, targetpointquat);

                    //initpoint = worldmatrixinstancesvoxelsforcalculationsonly[0][0][6];
                    //Quaternion initpointquat;
                    Quaternion.RotationMatrix(ref initpoint, out initpointquat);
                    forwardinitpoint = sc_maths._getDirection(Vector3.ForwardRH, initpointquat);
                    rightinitpoint = sc_maths._getDirection(Vector3.Right, initpointquat);
                    upinitpoint = sc_maths._getDirection(Vector3.Up, initpointquat);


                    dataForPerceptronZAXIS.dronePosDirForward = forwardinitpoint; //dirDroneInstanceForward;
                    dataForPerceptronZAXIS.dronePosDirRight = rightinitpoint; //new Vector3(dirDroneInstanceRight.X, dirDroneInstanceRight.Y, dirDroneInstanceRight.Z); //dirDroneInstanceRight;
                    dataForPerceptronZAXIS.dronePosDirUp = upinitpoint; //new Vector3(dirDroneInstanceUp.X, dirDroneInstanceUp.Y, dirDroneInstanceUp.Z); // dirDroneInstanceUp;


                    dataForPerceptronZAXIS.playerPos = memposition; //pointTarget;
                    dataForPerceptronZAXIS.playerDirForward = forwardtargetpoint; //dirTargetInstanceForward;
                    dataForPerceptronZAXIS.playerDirRight = righttargetpoint; //new Vector3(dirTargetInstanceRight.X, dirTargetInstanceRight.Y, dirTargetInstanceRight.Z); //dirTargetInstanceRight;
                    dataForPerceptronZAXIS.playerDirUp = uptargetpoint; //new Vector3(dirTargetInstanceUp.X, dirTargetInstanceUp.Y, dirTargetInstanceUp.Z); //dirTargetInstanceUp;

                    dataForPerceptronZAXIS.formationWaypoint = memposition; //pointTarget;




                    //Matrix.Multiply();



                    if (perceptronRotationZAXIS != null)
                    {


                        //TO READD
                        //TO READD
                        //TO READD
                        dataForPerceptronZAXIS.CompassTypeSwitch = 1;
                        someroll = perceptronRotationZAXIS.Update(dataForPerceptronZAXIS, initpoint, out rotatedDroneMatrix2);
                        //someyaw = perceptronRotationXAXIS[c][cc].Update(dataForPerceptronXAxis, InitialDroneMatrix, out rotatedDroneMatrix);

                        /*Matrix somemulmatrix = rotatedDroneMatrix * rotatedDroneMatrix2; // rotatedDroneMatrix * 
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][6] = somemulmatrix;// somevoxelvirtualdesktop[0].worldmatofobj;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M41 = (float)realcamcursormemoryposonvd.X;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)realcamcursormemoryposonvd.Y;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)realcamcursormemoryposonvd.Z;
                        */



                        //dataForPerceptronZAXIS.CompassTypeSwitch = 2;
                        //perceptronRotationXAXIS[c][cc].Update(dataForPerceptronZAXIS, InitialDroneMatrix, out rotatedDroneMatrix);
                        //perceptronRotationXAXIS[c][cc].switchWaypoint = 1;
                        //perceptronRotationXAXIS[c][cc].UpdatePerceptron(dataForPerceptronXAxis);
                        //Console.WriteLine("! null");
                        //TO READD
                        //TO READD
                        //TO READD
                    }
                    else
                    {
                        //TO READD
                        //TO READD
                        //TO READD
                        //Console.WriteLine(" null");

                        //Matrix matrixPosHandRight0 = _player_rght_hnd[0][0]._arrayOfInstances[0].current_pos;
                        //Matrix worldMatrixChunkDroneInstance0 = arrayOfChunks[c].arrayOfScriptForInstances[cc].current_pos;
                        //Vector3 posTarget = new Vector3(matrixPosHandRight0.M41, matrixPosHandRight0.M42, matrixPosHandRight0.M43);
                        //Vector3 pivotPos= new Vector3(worldMatrixChunkDroneInstance0.M41, worldMatrixChunkDroneInstance0.M42, worldMatrixChunkDroneInstance0.M43);
                        //perceptronRotationXAXIS[c][cc] = new SC_AI_Start(matrixPosHandRight0, worldMatrixChunkDroneInstance0);

                        //perceptronRotationXAXIS[c][cc] = new SC_AI(worldMatrixChunkDroneInstance0, matrixPosHandRight0);
                        //TO READD
                        //TO READD
                        //TO READD
                    }




                    initpoint = worldmatrixinstancesvoxelsforcalculationsonly[0][0][6];
                    //Quaternion initpointquat;
                    Quaternion.RotationMatrix(ref initpoint, out initpointquat);
                    xq = initpointquat.X;
                    yq = initpointquat.Y;
                    zq = initpointquat.Z;
                    wq = initpointquat.W;

                    //Vector3 vecPitchYawRoll = sc_maths.QuaternionToEuler(otherQuat);
                    vecPitchYawRoll = sc_maths.QuaternionToEuler(initpointquat);

                    /*pitcha = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180.0f / Math.PI)); //to degrees
                    yawa = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180.0f / Math.PI)); //to degrees
                    rolla = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180.0f / Math.PI));//to degrees
                    */


                    pitcha = vecPitchYawRoll.X;//(float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180.0f / Math.PI)); //
                    yawa = vecPitchYawRoll.Y;//(float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180.0f / Math.PI));
                    rolla = vecPitchYawRoll.Z;//(float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq) * (180.0f / Math.PI));


                    //var pitcher0 = (float)(Math.PI * (pitcha + somepitch) / 180.0f);
                    //var yawer0 = (float)(Math.PI * (yawa + someyaw) / 180.0f);
                    //var roller0 = (float)(Math.PI * (rolla + someroll) / 180.0f);

                    var pitcher0 = (float)(Math.PI * (0 + somepitch) / 180.0f);
                    //var yawer0 = (float)(Math.PI * (0) / 180.0f);
                    //var roller0 = (float)(Math.PI * (0) / 180.0f);

                    //var somematrixroterpitchchange0 = SharpDX.Matrix.RotationYawPitchRoll(yawer0, pitcher0, roller0);


                    //pitcher0 = (float)(Math.PI * (0) / 180.0f);
                    var yawer0 = (float)(Math.PI * (0 + someyaw) / 180.0f);
                    //roller0 = (float)(Math.PI * (0) / 180.0f);

                    //var somematrixroteryawchange1 = SharpDX.Matrix.RotationYawPitchRoll(yawer0, pitcher0, roller0);

                    //pitcher0 = (float)(Math.PI * (0) / 180.0f);
                    //yawer0 = (float)(Math.PI * (0 ) / 180.0f);
                    var roller0 = (float)(Math.PI * (0 + someroll) / 180.0f);

                    //var somematrixroterrollchange1 = SharpDX.Matrix.RotationYawPitchRoll(yawer0, pitcher0, roller0);
                    var somematrixroterrollchange1 = SharpDX.Matrix.RotationYawPitchRoll(yawer0, pitcher0, roller0);
                    //pitch and roll or
                    //pitch and yaw
                    //yaw and roll doesnt work.
                    //
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6] = somematrixroterrollchange1;// somevoxelvirtualdesktop[0].worldmatofobj;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M41 = (float)realcamcursormemoryposonvd.X;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)realcamcursormemoryposonvd.Y;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)realcamcursormemoryposonvd.Z;

                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][20] = somematrixroterrollchange1;// somevoxelvirtualdesktop[0].worldmatofobj;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][20].M41 = (float)camcursormemoryposon.X;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][20].M42 = (float)camcursormemoryposon.Y;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][20].M43 = (float)camcursormemoryposon.Z;


                    /*Matrix somemulmatrix = rotatedDroneMatrix * rotatedDroneMatrix2; // rotatedDroneMatrix * 
                      worldmatrixinstancesvoxelsforcalculationsonly[0][0][6] = somemulmatrix;// somevoxelvirtualdesktop[0].worldmatofobj;
                      worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M41 = (float)realcamcursormemoryposonvd.X;
                      worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)realcamcursormemoryposonvd.Y;
                      worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)realcamcursormemoryposonvd.Z;
                      */





                    //worldMatrix_instances_voxel_cube[0][0][19] = worldmatrixinstancesvoxelsforcalculationsonly[0][0][19];



                    /*for (int i = 0; i < worldMatrix_instances_voxel_cube[0][0].Length;i++)
                    {
                        if (worldMatrix_instances_voxel_cube[0][0][i]!= null && worldmatrixinstancesvoxelsforcalculationsonly[0][0][i]!= null)
                        {
                            worldMatrix_instances_voxel_cube[0][0][i] = worldmatrixinstancesvoxelsforcalculationsonly[0][0][i];

                        }
                    }*/







                    worldMatrix_instances_voxel_cube[0][0][0] = worldmatrixinstancesvoxelsforcalculationsonly[0][0][0];
                    worldMatrix_instances_voxel_cube[0][0][1] = worldmatrixinstancesvoxelsforcalculationsonly[0][0][1];
                    worldMatrix_instances_voxel_cube[0][0][2] = worldmatrixinstancesvoxelsforcalculationsonly[0][0][2];
                    worldMatrix_instances_voxel_cube[0][0][3] = worldmatrixinstancesvoxelsforcalculationsonly[0][0][3];
                    worldMatrix_instances_voxel_cube[0][0][4] = worldmatrixinstancesvoxelsforcalculationsonly[0][0][19];
                    worldMatrix_instances_voxel_cube[0][0][5] = worldmatrixinstancesvoxelsforcalculationsonly[0][0][20];



                    worldMatrix_instances_screen_assets[0][0][0] = worldmatrixinstancesvoxelsforcalculationsonly[0][0][20];

                    /*worldMatrix_instances_screen_assets[0][0][0] = worldmatrixinstancesvoxelsforcalculationsonly[0][0][0];
                    worldMatrix_instances_screen_assets[0][0][1] = worldmatrixinstancesvoxelsforcalculationsonly[0][0][1];
                    worldMatrix_instances_screen_assets[0][0][2] = worldmatrixinstancesvoxelsforcalculationsonly[0][0][2];
                    worldMatrix_instances_screen_assets[0][0][3] = worldmatrixinstancesvoxelsforcalculationsonly[0][0][3];
                    worldMatrix_instances_screen_assets[0][0][4] = worldmatrixinstancesvoxelsforcalculationsonly[0][0][19];
                    worldMatrix_instances_screen_assets[0][0][5] = worldmatrixinstancesvoxelsforcalculationsonly[0][0][20];
                    */












                    //worldmatrixinstancesvoxelsforcalculationsonly























                    //perceptronRotationYAXIS = new SC_AI_Start(matrixPosHandRight0, worldMatrixChunkDroneInstance0);
                    //perceptronRotationZAXIS = new SC_AI_Start(matrixPosHandRight0, worldMatrixChunkDroneInstance0);








                    //Vector3 worldup = new Vector3(0, 1, 0);
                    //Vector3 upvec = somedirforward * Vector.Cross(ref worldup) * Vector3.Cross(somedirforward);
                    //Vector3 upvector = rotatevecxaxis(somedirforward.X, somedirforward.Y, somedirforward.Z, 90);





                    /*Vector3 position = new Vector3(PositionX, PositionY, PositionZ);
                    Vector3 lookAt = new Vector3(0, 0, 1);
                    float pitch = RotationX * 0.0174532925f;
                    float yaw = RotationY * 0.0174532925f; ;
                    float roll = RotationZ * 0.0174532925f; ;
                    rotationMatrix = Matrix.RotationYawPitchRoll(yaw, pitch, roll);
                    lookAt = Vector3.TransformCoordinate(lookAt, rotationMatrix);
                    Vector3 up = Vector3.TransformCoordinate(Vector3.UnitY, rotationMatrix);
                    lookAt = position + lookAt;
                    ViewMatrix = Matrix.LookAtLH(position, lookAt, up);*/



                    //sc_maths.qu

                    //Quaternion.loo








                    /*Matrix3x3 somemat = sc_maths.makeRotationDir(somedirforward, upvector);
                    Matrix somemat4x4 = Matrix.Identity;

                    somemat4x4.M11 = somemat.M11;
                    somemat4x4.M12 = somemat.M12;
                    somemat4x4.M13 = somemat.M13;
                    somemat4x4.M21 = somemat.M21;
                    somemat4x4.M22 = somemat.M22;
                    somemat4x4.M23 = somemat.M23;
                    somemat4x4.M31 = somemat.M31;
                    somemat4x4.M32 = somemat.M32;
                    somemat4x4.M33 = somemat.M33;


                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][19] = somemat4x4;// somevoxelvirtualdesktop[0].worldmatofobj;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][5] = Matrix.Identity;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M41 = (float)memposition.X;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)pointOnScreenn.Z;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M42 = (float)memposition.Y;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M43 = (float)memposition.Z;*/




















                    /*
                    screenorigindir = new Vector3(tempMatrix.M41, tempMatrix.M42, tempMatrix.M43);

                    somemaxposleftbottom = screenorigindir + (directionoriginscreenr * (positionOfMousereducedx / somevalxxx)); //9
                    somemaxposleftbottom = somemaxposleftbottom + (directionoriginscreenu * (positionOfMousereducedy / somevalyyy)); //16


                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6] = tempMatrix;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][5] = Matrix.Identity;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M41 = (float)somemaxposleftbottom.X;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)pointOnScreenn.Z;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)somemaxposleftbottom.Y;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)somemaxposleftbottom.Z;*/






                    /*
                    float ratiox = (maxdistx * mousex) / 1920;
                    float ratioy = (maxdisty * mousey) / 1080;
                    Console.WriteLine("d0:" + diffx + " d1: " + diffy + " md0:" + maxdistx + " mdy:" + maxdisty);

                    //currentScreenPos = new Vector3(tempMatrix.M41, tempMatrix.M42, tempMatrix.M43);
                    somemaxposleftbottom = realscreencornerleftbottom + (directionoriginscreenr * (ratiox)); //9
                    somemaxposleftbottom = somemaxposleftbottom + (directionoriginscreenu * (ratioy)); //16

                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][19] = tempmatsc;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][5] = Matrix.Identity;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M41 = (float)somemaxposleftbottom.X;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)pointOnScreenn.Z;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M42 = (float)somemaxposleftbottom.Y;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M43 = (float)somemaxposleftbottom.Z;

                    */








                    //c2 = a2 + b2



                    //float distfromcursortotop = 















                    /*
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][19] = tempMatrix;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][5] = Matrix.Identity;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M41 = (float)somemaxposleftbottom.X;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)pointOnScreenn.Z;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M42 = (float)somemaxposleftbottom.Y;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M43 = (float)somemaxposleftbottom.Z;*/


























                    /*
                    Vector3 vertbl = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][15].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][15].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][15].M43);
                    Vector3 vertbr = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][17].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][17].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][17].M43);

                    float sizeofscreenmonitor = (float)(vertbl - vertbr).Length();
















                    tempMatrix = somevoxelvirtualdesktop[0].worldmatofobj;
                    Quaternion.RotationMatrix(ref tempMatrix, out _testQuater);
                    screenNormalRight = sc_maths._getDirection(Vector3.Right, _testQuater);
                    screenNormalRight.Normalize();
                    screenNormalUp = sc_maths._getDirection(Vector3.Up, _testQuater);
                    screenNormalUp.Normalize();
                    screenNormalForward = sc_maths._getDirection(Vector3.ForwardRH, _testQuater);
                    screenNormalForward.Normalize();

                    currentScreenPos = new Vector3(tempMatrix.M41, tempMatrix.M42, tempMatrix.M43); // new Vector3(xii, yii, zii);// new Vector3(_finalRotMatrixScreen.M41, _finalRotMatrixScreen.M42, _finalRotMatrixScreen.M43);
                    //newDirRight = (screenNormalRight) * sizeWidtherer; // + screenNormalTop
                    //currentScreenPos -= newDirRight;
                    //newDirUp = (screenNormalUp) * sizeheighterer; // + screenNormalTop
                    //currentScreenPos -= newDirUp;
                    resulter0 = tempMatrix;
                    resulter0.M41 = currentScreenPos.X;
                    resulter0.M42 = currentScreenPos.Y;
                    resulter0.M43 = currentScreenPos.Z;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][8] = resulter0;

                    currentScreenPos = new Vector3(tempMatrix.M41, tempMatrix.M42, tempMatrix.M43);
                    //Vector3 newDirRight = (screenNormalRight) * (sizeWidtherer*2);
                    //currentScreenPos -= newDirRight;
                    newDirUp = (screenNormalUp) * (sizeheighterer * 2.0f);
                    currentScreenPos += newDirUp;
                    resulter0 = tempMatrix;
                    resulter0.M41 = currentScreenPos.X;
                    resulter0.M42 = currentScreenPos.Y;
                    resulter0.M43 = currentScreenPos.Z;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][9] = resulter0;

                    currentScreenPos = new Vector3(tempMatrix.M41, tempMatrix.M42, tempMatrix.M43);
                    newDirRight = (screenNormalRight) * (sizeWidtherer * 2.0f);
                    currentScreenPos += newDirRight;
                    //newDirUp = (screenNormalUp) * sizeheighterer;
                    //currentScreenPos -= newDirUp;
                    resulter0 = tempMatrix;
                    resulter0.M41 = currentScreenPos.X;
                    resulter0.M42 = currentScreenPos.Y;
                    resulter0.M43 = currentScreenPos.Z;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][10] = resulter0;

                    currentScreenPos = new Vector3(tempMatrix.M41, tempMatrix.M42, tempMatrix.M43);
                    newDirRight = (screenNormalRight) * (sizeWidtherer * 2.0f);
                    currentScreenPos += newDirRight;
                    newDirUp = (screenNormalUp) * (sizeheighterer * 2.0f);
                    currentScreenPos += newDirUp;
                    resulter0 = tempMatrix;
                    resulter0.M41 = currentScreenPos.X;
                    resulter0.M42 = currentScreenPos.Y;
                    resulter0.M43 = currentScreenPos.Z;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][11] = resulter0;






                    //sizeofscreenmonitor

                    Vector3 realvertbl = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][8].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][8].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][8].M43);
                    Vector3 realvertbr = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][11].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][11].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][11].M43);

                    float realsizeofscreenmonitor = (float)(realvertbl - realvertbr).Length();

                    float currentratio = realsizeofscreenmonitor / sizeofscreenmonitor; //4.96542f or 0.2++f

                    //Console.WriteLine("r:" + currentratio);


                    float distancefromlefttorightinit = (new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][11].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][11].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][11].M43) - new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][9].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][9].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][9].M43)).Length();


                    float somedistmiddle = distancefromlefttorightinit / 2;
                    Vector3 posscreenasset = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][9].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][9].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][9].M43);

                    posscreenasset = posscreenasset + (direction_feet_forward * somedistmiddle);
                    distfromscreen = (pointOnScreenn - cameraPos).Length();
                    //distfromscreen = (camintersectsscreenvecrealpos - cameraPos).Length();
                    //distfromscreen = (posscreenasset - cameraPos).Length();
                    //Console.WriteLine(distfromscreen);
                    var distfromscreen2 = (posscreenasset - cameraPos).Length();





                    float ratiovalx = distfromscreen / 9.0f;
                    float ratiovaly = distfromscreen / 16.0f;
                    float ratiovalxx = distfromscreen2 / 9.0f;
                    float ratiovalyy = distfromscreen2 / 16.0f;









                    //var somedirection = posscreenasset - cameraPos;

                    //distfromscreen2 -= (float)Math.Abs(sccs.scgraphics.scupdate.originPosScreen.Z);
                    //camintersectsscreenvecrealpos
                    //0.73f //0.53f
                    //float somevalx = 2.0f * (1.04f + 0);// 1.125f; //9.0f // 
                    //float somevaly = 3.555555555555555555555555556f * (1.04f + 0); //16.0f 1.7777777777777777777777777777778f // 

                    //float somevalx = 2.0f * ((1.0f * 1.0f));// 1.125f; //9.0f // 
                    //float somevaly = 3.555555555555555555555555556f * ((1.0f * 1.0f)); //16.0f 1.7777777777777777777777777777778f // 

                    //float somevalx = 2.0f * ((1.0f * 1.0f));// 1.125f; //9.0f // 
                    //float somevaly = 3.555555555555555555555555556f * ((1.0f * 1.0f)); //16.0f 1.7777777777777777777777777777778f // 


                    float somevalx = (9.0f / (currentratio * 0.6195525f * (1 + ratiovalyy)));// 1.125f; //9.0f // 0.6195525f
                    float somevaly = (16.0f / (currentratio * 0.6195525f * (1 + ratiovalyy))); //3.555555555555555555555555556f * ((1.0f * 1.0f)); //16.0f 1.7777777777777777777777777777778f // 


                    //Console.WriteLine("r" + currentratio);

                    Vector3 backcampos = cameraPos - (direction_feet_forward * (1.0f)); //1.9f // 1.85f


                    //Vector3 someposleftTop = cameraPos + (direction_feet_right * (positionOfMousereducedx / 9.0f)); //9
                    //someposleftTop = someposleftTop + (direction_feet_up * (positionOfMousereducedy / 16.0f)); //16

                    float somemousevaluex = (((2.0f * (float)(mousex)) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceWidth) - 1.0f);
                    float somemousevaluey = ((((2.0f * (float)(mousey)) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceHeight) - 1.0f) * -1.0f);



                    //Console.WriteLine("r0:" + currentratio + " " + distfromscreen2 * 2);

                    tempMatrix = somevoxelvirtualdesktop[0].worldmatofobj;
                    currentScreenPos = new Vector3(tempMatrix.M41, tempMatrix.M42, tempMatrix.M43);


                    Vector3 someposleftTop = cameraPos + (directionoriginscreenr * (positionOfMousereducedx / 9.0f)); //9
                    someposleftTop = someposleftTop + (directionoriginscreenu * (positionOfMousereducedy/16.0f)); //16



                    /*
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6] = tempMatrix;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][5] = Matrix.Identity;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M41 = (float)someposleftTop.X;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)pointOnScreenn.Z;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)pointOnScreenn.Z;





                    someposleftTop = cameraPos + (direction_feet_right * ((positionOfMousereducedx) / (somevalx))); //9
                    someposleftTop = someposleftTop + (direction_feet_up * ((positionOfMousereducedy) / (somevaly))); //16

                    //someposleftTop = someposleftTop + (direction_feet_forward * 0.650f);
                    //Console.WriteLine("d0:" + distfromscreen + " d2:" + distfromscreen2 + " bcamp:" + backcampos+ " r0x" + ratiovalx + "r0y" + ratiovaly);

                    Vector3 campostopoint = (someposleftTop - backcampos);
                    campostopoint.Normalize();

                    var raymouse = new Ray(backcampos, campostopoint);
                    Vector3 mouseintersectsscreenvec;
                    var mouseintersectsscreen = raymouse.Intersects(ref planer, out mouseintersectsscreenvec);

                    ///worldmatrixinstancesvoxelsforcalculationsonly[0][0][6] = tempmat;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6] = tempMatrix;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M41 = (float)mouseintersectsscreenvec.X;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)pointOnScreenn.Z;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)mouseintersectsscreenvec.Y;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)mouseintersectsscreenvec.Z;


                    Vector3 directioncamtopoint = (mouseintersectsscreenvec - cameraPos);
                    directioncamtopoint.Normalize();





                    //somevalx = 2.0f * (1.04f + 0);// 1.125f; //9.0f // 
                    //somevaly = 3.555555555555555555555555556f * (1.04f + 0); //16.0f 1.7777777777777777777777777777778f // 

                    //Vector3 backcampos = cameraPos - (direction_feet_forward * 1.85f); //1.9f

                    //someposleftTop = cameraPos + (direction_feet_right * (positionOfMousereducedx / (somevalx))); //9
                    //someposleftTop = someposleftTop + (direction_feet_up * (positionOfMousereducedy / (somevaly))); //16

                    //someposleftTop = someposleftTop + (direction_feet_forward * 0.650f);

                    //Vector3 campostopoint = (someposleftTop - backcampos);
                    //campostopoint.Normalize();



                    //Quaternion _quat_screen00;

                    //Matrix mater = worldMatrix_instances_screens[0][0][0];
                    mater = somevoxelvirtualdesktop[0].worldmatofobj;

                    //Quaternion.RotationMatrix(ref mater, out _quat_screen00);
                    //var screenNormal = sc_maths._getDirection(Vector3.ForwardRH, _quat_screen00);
                    //screenNormal.Normalize();

                    //planer = new Plane(new Vector3(mater.M41, mater.M42, mater.M43), screenNormal);
                    //var screen_mat = worldMatrix_instances_screens[0][0][0];
                    //screen_mat = somevoxelvirtualdesktop[0].currentWorldMatrix;

                    //var somematroxer2 = screen_mat;
                    //Quaternion _quat_screen;
                    Quaternion.RotationMatrix(ref mater, out _quat_screen);
                    screenNormal = sc_maths._getDirection(Vector3.ForwardRH, _quat_screen);
                    screenNormal.Normalize();
                    planer = new Plane(new Vector3(mater.M41, mater.M42, mater.M43), screenNormal);


                    raymouse = new Ray(cameraPos, directioncamtopoint);
                    //mouseintersectsscreenvec;
                    mouseintersectsscreen = raymouse.Intersects(ref planer, out mouseintersectsscreenvec);



                    /*
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6] = tempMatrix;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M41 = (float)mouseintersectsscreenvec.X;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)pointOnScreenn.Z;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)mouseintersectsscreenvec.Y;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)mouseintersectsscreenvec.Z;







                    Vector3 positionCursorTopRight = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][11].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][11].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][11].M43);
                    Vector3 positionCursorbottomright = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][10].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][10].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][10].M43);
                    Vector3 positionCursorTopLeft = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][9].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][9].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][9].M43);
                    Vector3 positionCursorbottomLeft = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][8].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][8].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][8].M43);

                    //float hypothenusecursortotopright = (mouseintersectsscreenvec - positionCursorTopRight).Length();
                    //float hypothenusecursortobottomright = (mouseintersectsscreenvec - positionCursorbottomright).Length();


                    /*float sizeofside = (positionCursorTopRight - positionCursorbottomright).Length();
                    float remainsx = (positionCursorTopRight.X - mouseintersectsscreenvec.X);
                    float remainsy = (positionCursorTopRight.Y - mouseintersectsscreenvec.Y);

                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][7] = tempMatrix;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][7].M41 = (float)remainsx;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)pointOnScreenn.Z;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][7].M42 = (float)remainsy;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][7].M43 = (float)mouseintersectsscreenvec.Z;*/





                    /*
                    float sizeofside = (positionCursorTopRight - positionCursorbottomright).Length();
                    float diffy0 = positionCursorTopRight.Y - mouseintersectsscreenvec.Y;
                    float diffy1 = positionCursorbottomright.Y - mouseintersectsscreenvec.Y;


                    //Vector3 somePos = mouseintersectsscreenvec + (screenNormalUp * (diffy0));
                    Vector3 somePos0 = mouseintersectsscreenvec;
                    somePos0.Y = mouseintersectsscreenvec.Y + (screenNormalUp.Y * diffy1);

                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][7] = tempMatrix;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][7].M41 = (float)somePos0.X;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)pointOnScreenn.Z;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][7].M42 = (float)somePos0.Y;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][7].M43 = (float)somePos0.Z;




                    //float sizeofside = (positionCursorTopRight - positionCursorbottomright).Length();

                    float diffy0 = positionCursorTopRight.Y - mouseintersectsscreenvec.Y;
                    float diffy1 = positionCursorbottomright.Y - mouseintersectsscreenvec.Y;

                    float diffx0 = positionCursorTopRight.X - mouseintersectsscreenvec.X;
                    float diffx1 = positionCursorbottomright.X - mouseintersectsscreenvec.X;

                    //float thesize0 = sizeofside - (float)Math.Abs(diffy0);
                    //float thesize1 = sizeofside - (float)Math.Abs(diffy1);


                    if (diffy0 < diffy1)
                    {
                        Vector3 somePos = positionCursorTopRight + (screenNormalUp * (-diffy0));
                        somePos.Y = mouseintersectsscreenvec.Y;
                        somePos.Z = mouseintersectsscreenvec.Z;

                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][7] = tempMatrix;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][7].M41 = (float)somePos.X;
                        //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                        //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)pointOnScreenn.Z;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][7].M42 = (float)somePos.Y;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][7].M43 = (float)somePos.Z;


                        somePos = positionCursorTopLeft + (screenNormalUp * (-diffy0));
                        somePos.Y = mouseintersectsscreenvec.Y;
                        somePos.Z = mouseintersectsscreenvec.Z;

                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][13] = tempMatrix;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][13].M41 = (float)somePos.X;
                        //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                        //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)pointOnScreenn.Z;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][13].M42 = (float)somePos.Y;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][13].M43 = (float)somePos.Z;








                        somePos = positionCursorTopRight + (screenNormalRight * (-diffx0));
                        //somePos.X = mouseintersectsscreenvec.X;
                        somePos.Z = positionCursorTopRight.Z;
                        somePos.Y = positionCursorTopRight.Y;

                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][12] = tempMatrix;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][12].M41 = (float)somePos.X;
                        //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                        //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)pointOnScreenn.Z;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][12].M42 = (float)somePos.Y;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][12].M43 = (float)somePos.Z;


                        somePos = positionCursorTopLeft + (screenNormalRight * (-diffx0));
                        //somePos.X = mouseintersectsscreenvec.X;
                        somePos.Z = positionCursorTopLeft.Z;
                        somePos.Y = positionCursorTopLeft.Y;

                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][14] = tempMatrix;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][14].M41 = (float)somePos.X;
                        //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                        //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)pointOnScreenn.Z;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][14].M42 = (float)somePos.Y;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][14].M43 = (float)somePos.Z;
                    }
                    else
                    {
                        Vector3 somePos = positionCursorbottomright + (screenNormalUp * (-diffy1));
                        somePos.Y = mouseintersectsscreenvec.Y;
                        somePos.Z = mouseintersectsscreenvec.Z;
                        //somePos.Y += positionCursorbottomright.Y;

                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][7] = tempMatrix;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][7].M41 = (float)somePos.X;
                        //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                        //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)pointOnScreenn.Z;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][7].M42 = (float)somePos.Y;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][7].M43 = (float)somePos.Z;





                        somePos = positionCursorbottomLeft + (screenNormalUp * (-diffy1));
                        somePos.Y = mouseintersectsscreenvec.Y;
                        somePos.Z = mouseintersectsscreenvec.Z;

                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][13] = tempMatrix;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][13].M41 = (float)somePos.X;
                        //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                        //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)pointOnScreenn.Z;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][13].M42 = (float)somePos.Y;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][13].M43 = (float)somePos.Z;





                        somePos = positionCursorbottomright + (screenNormalRight * (-diffx1));
                        somePos.Z = positionCursorbottomright.Z;
                        somePos.Y = positionCursorbottomright.Y;
                        //somePos.Y += positionCursorbottomright.Y;

                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][12] = tempMatrix;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][12].M41 = (float)somePos.X;
                        //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                        //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)pointOnScreenn.Z;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][12].M42 = (float)somePos.Y;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][12].M43 = (float)somePos.Z;



                        somePos = positionCursorTopRight + (screenNormalRight * (-diffx1));
                        //somePos.X = mouseintersectsscreenvec.X;
                        somePos.Z = positionCursorTopRight.Z;
                        somePos.Y = positionCursorTopRight.Y;

                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][14] = tempMatrix;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][14].M41 = (float)somePos.X;
                        //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                        //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)pointOnScreenn.Z;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][14].M42 = (float)somePos.Y;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][14].M43 = (float)somePos.Z;



                    }







                    Vector3 xspotterb = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][12].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][12].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][12].M43);
                    Vector3 yspotterr = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][7].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][7].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][7].M43);
                    Vector3 yspotterl = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][13].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][13].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][13].M43);
                    Vector3 xspottert = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][14].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][14].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][14].M43);


                    float distancefromlefttoright = (yspotterl - yspotterr).Length();
                    float distancefrombottomtotop = (xspotterb - xspottert).Length();

                    float distancefromcursorlefttoright = (yspotterr - mouseintersectsscreenvec).Length();
                    float distancefromcursorbottomtotop = (xspottert - mouseintersectsscreenvec).Length();


                    float positionmousex = 1920 - ((distancefromcursorlefttoright * 1920) / distancefromlefttoright);
                    float positionmousey = 1080 - ((distancefromcursorbottomtotop * 1080) / distancefrombottomtotop);


                    int canworkx = 0;
                    int canworky = 0;
                    */


                    /*


                    Vector3 verttopright = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][11].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][11].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][11].M43);
                    Vector3 vertbottomright = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][10].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][10].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][10].M43);
                    Vector3 vertbottomleft = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][8].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][8].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][8].M43);
                    Vector3 verttopleft = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][9].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][9].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][9].M43);


                    float someoffsetx = (vertbottomright - vertbottomleft).Length();// (somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * somevoxelvirtualdesktopglobals.tinyChunkWidth * somevoxelvirtualdesktopglobals.planeSize);
                    float somemousex = (mousex * someoffsetx) / 1920;

                    float someoffsety = (verttopright - verttopleft).Length();// (somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * somevoxelvirtualdesktopglobals.tinyChunkHeight * somevoxelvirtualdesktopglobals.planeSize);
                    float somemousey = (mousey * someoffsety) / 1080;

                    someoffsetx = (verttopright - verttopleft).Length();// (somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * somevoxelvirtualdesktopglobals.tinyChunkHeight * somevoxelvirtualdesktopglobals.planeSize);
                    somemousex = (mousex * someoffsetx) / 1920;

                    someposleftTop = (vertbottomright) + (screenNormalRight * (somemousex)); //9 // (screenNormalRight * sizeWidtherer)
                    //someposleftTop = (someposleftTop) + (screenNormalUp * (somemousey)); //9 //+ (screenNormalUp * sizeheighterer)

                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][19] = tempMatrix;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M41 = (float)someposleftTop.X;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M42 = (float)someposleftTop.Y;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M43 = (float)someposleftTop.Z;

                    */


                    /*
                     worldmatrixinstancesvoxelsforcalculationsonly[0][0][6] = tempMatrix;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][5] = Matrix.Identity;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M41 = (float)someposleftTop.X;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)pointOnScreenn.Z;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)someposleftTop.Z;*/













                    /*
                    float someoffsetx = (somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * somevoxelvirtualdesktopglobals.tinyChunkWidth * somevoxelvirtualdesktopglobals.planeSize);
                    float somemousex = (mousex * someoffsetx) / 1920;

                    float someoffsety = (somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * somevoxelvirtualdesktopglobals.tinyChunkHeight * somevoxelvirtualdesktopglobals.planeSize);
                    float somemousey = (mousey * someoffsety) / 1080;


                    tempMatrix = somevoxelvirtualdesktop[0].worldmatofobj;
                    Quaternion.RotationMatrix(ref tempMatrix, out _testQuater);
                    screenNormalRight = sc_maths._getDirection(Vector3.Right, _testQuater);
                    screenNormalRight.Normalize();
                    screenNormalUp = sc_maths._getDirection(Vector3.Up, _testQuater);
                    screenNormalUp.Normalize();
                    screenNormalForward = sc_maths._getDirection(Vector3.ForwardRH, _testQuater);
                    screenNormalForward.Normalize();


                    Vector3 vertbottomright = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][10].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][10].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][10].M43);
                    Vector3 vertbottomleft = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][8].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][8].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][8].M43);
                    Vector3 verttopleft = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][9].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][9].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][9].M43);

                    someposleftTop = (verttopleft) + (screenNormalRight * (somemousex)); //9 // (screenNormalRight * sizeWidtherer)
                    //someposleftTop = (someposleftTop) + (screenNormalUp * (somemousey)); //9 //+ (screenNormalUp * sizeheighterer)

                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][19] = tempMatrix;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][5] = Matrix.Identity;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M41 = (float)someposleftTop.X;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)pointOnScreenn.Z;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M42 = (float)someposleftTop.Y;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][19].M43 = (float)pointOnScreenn.Z;*/
































                    /*
                    //somevalx = 2.0f * ((1.0f * 1.0f));// 1.125f; //9.0f // 
                    //somevaly = 3.555555555555555555555555556f * ((1.0f * 1.0f)); //16.0f 1.7777777777777777777777777777778f // 


                    somevalx = (9.0f / (currentratio * 0.6195525f * (1 + ratiovalyy)));// 1.125f; //9.0f // 0.6195525f
                    somevaly = (16.0f / (currentratio * 0.6195525f * (1 + ratiovalyy))); //3.555555555555555555555555556f * ((1.0f * 1.0f)); //16.0f 1.7777777777777777777777777777778f // 


                    tempMatrix = somevoxelvirtualdesktop[0].worldmatofobj;
                    Quaternion.RotationMatrix(ref tempMatrix, out _testQuater);
                    screenNormalRight = sc_maths._getDirection(Vector3.Right, _testQuater);
                    screenNormalRight.Normalize();
                    screenNormalUp = sc_maths._getDirection(Vector3.Up, _testQuater);
                    screenNormalUp.Normalize();
                    screenNormalForward = sc_maths._getDirection(Vector3.ForwardRH, _testQuater);
                    screenNormalForward.Normalize();

                    mousevirtualx = (int)Math.Abs(mousex);
                    positionOfMousereducedx = (((2.0f * (float)mousevirtualx) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceWidth) - 1.0f);

                    mousevirtualy = (int)Math.Abs(mousey);
                    positionOfMousereducedy = ((((2.0f * (float)mousevirtualy) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceHeight) - 1.0f) * -1.0f);

                    Vector3 vertbottomright = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][10].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][10].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][10].M43);
                    Vector3 vertbottomleft = new Vector3(worldmatrixinstancesvoxelsforcalculationsonly[0][0][8].M41, worldmatrixinstancesvoxelsforcalculationsonly[0][0][8].M42, worldmatrixinstancesvoxelsforcalculationsonly[0][0][8].M43);

                    someposleftTop = (vertbottomleft + (screenNormalRight * sizeWidtherer)) + (screenNormalRight * (positionOfMousereducedx / somevalx)); //9
                    someposleftTop = (someposleftTop + (screenNormalUp * sizeheighterer)) + (screenNormalUp * (positionOfMousereducedy / somevaly)); //9

                    //someposleftTop = someposleftTop + (screenNormalUp * (positionOfMousereducedy/ somevaly)); //9

                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6] = tempMatrix;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][5] = Matrix.Identity;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M41 = (float)someposleftTop.X;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)pointOnScreenn.Z;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M42 = (float)someposleftTop.Y;
                    worldmatrixinstancesvoxelsforcalculationsonly[0][0][6].M43 = (float)pointOnScreenn.Z;*/


















                    /*distfromscreen = (camintersectsscreenvecrealpos - cameraPos).Length();
                    float somevalofdist = distfromscreen;


                    if (distfromscreen != 1)
                    {
                        if (distfromscreen >= 1)
                        {
                            somevalofdist = distfromscreen;
                            //somevalofdist -= 1;
                        }
                        else
                        {

                        }
                    }*/

                    /*

                    //Console.WriteLine("xm:" + positionmousex + " ym:" + positionmousey);
                    if (positionmousex >= 1920 || positionmousex < 0)
                    {
                        if (positionmousex >= 1920)
                        {
                            positionmousex = mousex;
                        }
                        else
                        {
                            positionmousex = mousex;
                        }
                        canworkx = 1;
                    }
                    else
                    {

                    }



                    if (positionmousey >= 1080 || positionmousey < 0)
                    {
                        if (positionmousey >= 1080)
                        {
                            positionmousey = mousey;
                        }
                        else
                        {
                            positionmousey = mousey;
                        }
                        //positionmousey = 1080;
                        canworky = 1;
                    }
                    else
                    {

                    }




                    */












                    /*if (canworkx == 0 && canworky == 0)
                    {
                        Console.WriteLine("is inside bounds");
                    }*/




                    /*
                    int xm = (int)positionmousex;
                    int ym = (int)positionmousey;

                    //Program.MessageBox((IntPtr)0, "xm:" + xm + " ym:" + ym, "scmsg", 0);
                    //var absoluteMoveX = Convert.ToUInt32((xm * 65535 - 1) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                    //var absoluteMoveY = Convert.ToUInt32((ym * 65535 - 1) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);

                    int lparm = (ym << 16) + xm;
                    //int lparm = (ym) + xm;


                    //Program.MessageBox((IntPtr)0, "mouse down", "scmsg", 0);

                    //Program.mousesim.MoveMouseToPositionOnVirtualDesktop(xm,ym);
                    //Program.mousesim.MoveMouseTo(xm, ym);
                    //mouse_event(MOUSEEVENTF_MOVE | MOUSEEVENTF_ABSOLUTE, absoluteMoveX, absoluteMoveY, 0, 0);
                    int positionmouseinvx = (int)(1920 - ((distancefromcursorlefttoright * 1920) / distancefromlefttoright));
                    int positionmouseinvy = (int)(((distancefromcursorbottomtotop * 1080) / distancefrombottomtotop));




                    if (watchforgetmouseposset.Elapsed.Milliseconds > 10)
                    {

                        //SetCursorPos((int)positionmouseinvx, (int)positionmouseinvy);

                        stopwatchmousepossetswtc = 0;
                    }
                    */

                    //Program.MessageBox((IntPtr)0, "0" + Program.vewindowsfoundedz, "sccs message 1", 0);


                    if (Program.vewindowsfoundedz == IntPtr.Zero) // && canworkx == 0 && canworky == 0
                    {

                        int xm = (int)mousex;
                        int ym = (int)mousey;
                        int lparm = (ym << 16) + xm;

                        if (watchforgetmouseclickl.Elapsed.Ticks > 3)
                        {


                            //SetCursorPos((int)mbefposx, (int)mbefposy);


                            var mbefposx = mousex;
                            var mbefposy = mousey;




                            //Program.MessageBox((IntPtr)0, "0", "sccs message 1", 0);

                            //Console.WriteLine(Program.mlbuttondown);





                            if (sccsvvdhd.Form1.mlbuttondown == 1) // keynmouseinput._MouseState.Buttons[0]) //
                                                                   //if (Program.keynmouseinput._MouseState.Buttons[0])
                            {
                                //Program.MessageBox((IntPtr)0, "1", "sccs message 1", 0);


                                if (mousebuttonframecounterl == 0)
                                {
                                    //Program.mousesim.LeftButtonDown();

                                    //var absoluteMoveX = Convert.ToUInt32((memorymousex * 65535 - 1) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                                    //var absoluteMoveY = Convert.ToUInt32((memorymousey * 65535 - 1) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);

                                    //Program.mousesim.MoveMouseToPositionOnVirtualDesktop(absoluteMoveX, absoluteMoveY);

                                    /* SetCursorPos((int)positionmouseinvx, (int)positionmouseinvy);
                                     GetText(lparm);
                                     SetCursorPos((int)mbefposx, (int)mbefposy);
                                    */

                                    //Dictionary<string, IntPtr> edgelist = new Dictionary<string, IntPtr>< string, IntPtr> ();// IntPtr.Zero;

                                    /*List<IntPtr> edgelistptr = new List<IntPtr>();// IntPtr.Zero;
                                    List<string> edgeliststr = new List<string>();

                                    Process[] processlist = Process.GetProcesses();

                                    string processname = "";
                                    foreach (Process processes in processlist)
                                    {

                                        //Program.MessageBox((IntPtr)0, "edge" + " " + processes.ProcessName, "sccoresystems0", 0);

                                        /*if (process.ProcessName.ToLower() == "msedge")
                                        {
                                            //Console.WriteLine("Process: {0} ID: {1} Window title: {2}", process.ProcessName, process.Id, process.MainWindowTitle);
                                            Program.MessageBox((IntPtr)0, "edge" + " " + process.MainWindowHandle, "sccoresystems0", 0);
                                            //vewindowsfoundedz = process.MainWindowHandle;
                                            edge = process.MainWindowHandle;
                                            processname = process.ProcessName;

                                            break;
                                        }

                                        edgelistptr.Add(processes.MainWindowHandle);
                                        edgeliststr.Add(processes.ProcessName);
                                    }
                                    */

                                    //Program.capturedwindowname
                                    int iHandle = FindWindow(null, Program.capturedwindowname);//  "Path of Exile"
                                                                                               //int iHandle = FindWindow(null, "Path of Exile"); //Path of Exile
                                                                                               //"VoidExpanse"); //process.ProcessName //CryoFall //Factorio 1.1.53 //It Lurks Below //Terraria: Terrestrial Trouble

                                    //SetCursorPos((int)mousex, (int)mousey);
                                    //GetText(lparm);


                                    //IntPtr edithWnd = FindWindowEx(Program.vewindowsfoundedz, IntPtr.Zero, "Path of Exile", null);
                                    //Program.MessageBox((IntPtr)0, "found handle " + edithWnd, "sccs message 1", 0);



                                    //IntPtr hFocus = IntPtr.Zero;

                                    //IntPtr hFore;

                                    //uint id = 0;

                                    //hFore = Program.vewindowsfoundedz;// GetForegroundWindow();

                                    //var idAttach = GetWindowThreadProcessId(hFore, out id);

                                    //Program.MessageBox((IntPtr)0, "found handle " + idAttach + " " + id, "sccs message 1", 0);

                                    //var curThreadId = GetCurrentThreadId();
                                    // To attach to current thread
                                    //AttachThreadInput(idAttach, curThreadId, true);

                                    //AttachThreadInput(id, curThreadId, true);

                                    //string WINDOW_NAME = "sccsr14wpf";  //"It Lurks Below"
                                    //IntPtr window = FindWindowByCaption(IntPtr.Zero, WINDOW_NAME);
                                    //MessageBox((IntPtr)0, "window" + window, "scmsg", 0);
                                    //SetWindowLong(Program.somemainwpfhandle, GWL_EXSTYLE, (IntPtr)(GetWindowLong(window, GWL_EXSTYLE) | WS_EX_LAYERED | WS_EX_TOPMOST | WS_EX_TRANSPARENT));//| WS_EX_TOPMOST | WS_EX_LAYERED | WS_EX_OVERLAPPEDWINDOW //WS_EX_TRANSPARENT
                                    //SetLayeredWindowAttributes(Program.somemainwpfhandle, 0, 255, LWA_ALPHA);




                                    SendMessage(iHandle, WM_LBUTTONDOWN, 0, (mousex << 16) | mousey);
                                    //SendMessage(iHandle, WM_LBUTTONUP, 0, 0);
                                    // Program.mousesim.LeftButtonDown();
                                    //GetText(lparm);

                                    /*
                                    Input[] inputs = new Input[]
                                    {
                                        new Input
                                        {
                                            type = (int) InputType.Mouse,
                                            u = new InputUnion
                                            {
                                                mi = new MouseInput
                                                {
                                                    dx = 0,
                                                    dy = 0,
                                                    dwFlags = (uint)MouseEventF.LeftDown, //(uint)(MouseEventF.Move | 
                                                    dwExtraInfo = GetMessageExtraInfo()
                                                }
                                            }
                                        }
                                    };


                                    SendInput((uint)inputs.Length, inputs, Marshal.SizeOf(typeof(Input)));
                                    */









                                    mousebuttonframecounterl = 1;
                                    //SendMessage(iHandle, (uint)MouseEventF.LeftDown, 0, 0);

                                    //Program.MessageBox((IntPtr)0, "1" + Program.capturedwindowname, "sccs message 1" , 0);


                                    //int initialStyle = GetWindowLong(Program.somemainwpfhandle, -20);
                                    //IntPtr initialStyle = GetWindowLongPtr(Program.somemainwpfhandle,-20);
                                    //SetWindowLong(Program.somemainwpfhandle, -20, (IntPtr)initialStyle | (IntPtr)0x80000 | (IntPtr)0x20);
                                    /*SetForegroundWindow(hFore);
                                    WINDOW_NAME = "Path of Exile";  //"It Lurks Below"
                                    window = FindWindowByCaption(IntPtr.Zero, WINDOW_NAME);
                                    //MessageBox((IntPtr)0, "window" + window, "scmsg", 0);
                                    SetWindowLong(Program.vewindowsfoundedz, GWL_EXSTYLE, (IntPtr)(GetWindowLong(window, GWL_EXSTYLE) | WS_EX_TRANSPARENT));//| WS_EX_TOPMOST | WS_EX_LAYERED | WS_EX_OVERLAPPEDWINDOW //WS_EX_TRANSPARENT
                                    */
                                    //int initialStyle = GetWindowLong(this.Handle, -20);
                                    //IntPtr initialStyle = GetWindowLongPtr(Program.somemainwpfhandle,-20);
                                    //SetWindowLong(Program.somemainwpfhandle, -20, (uint)initialStyle | (uint)0x80000 | (uint)0x20);
                                    //SetWindowLong(Program.somemainwpfhandle, -20, (uint)initialStyle | (uint)0x80000 | (uint)0x20);

                                    //SendMessage(iHandle, WM_LBUTTONDOWN, 0, (mousex << 16) | mousey);
                                    //SendMessage(iHandle, WM_LBUTTONUP, 0, 0);

                                    //PostMessage(Program.vewindowsfoundedz, WM_KEYDOWN, (int)VK.F1, 0);
                                    //PostMessage(Program.vewindowsfoundedz, WM_KEYUP, (int)VK.LBUTTON, 0);

                                    //PostMessage(Program.vewindowsfoundedz, WM_LBUTTONDOWN, 1, lparm);
                                    //PostMessage(Program.vewindowsfoundedz, WM_LBUTTONUP, 0, lparm);

                                    //Program.mousesim.LeftButtonDown();
                                    //Program.mousesim.LeftButtonUp();
                                    // To dettach from current thread

                                    //AttachThreadInput(idAttach, curThreadId, false);
                                    //AttachThreadInput(id, curThreadId, false);
                                    //SetForegroundWindow(Program.somemainwpfhandle);









                                    //Program.MessageBox((IntPtr)0, "found handle " + hFore + " " + Program.vewindowsfoundedz + " " + Program.somemainwpfhandle, "sccs message 1", 0);







                                    /*IntPtr hWnd = FindWindow("Notepad", "Untitled - Notepad");

                                    if (!hWnd.Equals(IntPtr.Zero))
                                    {
                                        // make the minimized window be normal
                                        ShowWindowAsync(hWnd, SW_SHOWNORMAL);

                                        //Thread.Sleep(100);

                                        // retrieve Edit window handle of Notepad
                                        IntPtr edithWnd = FindWindowEx(hWnd, IntPtr.Zero, "Edit", null);

                                        if (!edithWnd.Equals(IntPtr.Zero))

                                        {
                                            PostMessage(edithWnd, WM_KEYDOWN, (int)VK.F1, 0);

                                        }
                                    }*/



                                    //PostMessage(Program.vewindowsfoundedz, WM_KEYDOWN, (int)VK.LBUTTON, 0);

                                    //PostMessage(Program.vewindowsfoundedz, WM_KEYUP, (int)VK.LBUTTON, 0);
                                    //WORKING
                                    //PostMessage(Program.vewindowsfoundedz, WM_KEYDOWN, (int)VK.F1, 0);
                                    //WORKING


                                    //PostMessage(Program.vewindowsfoundedz,(uint)WM_LBUTTONDOWN, 0, 0);
                                    //PostMessage(Program.vewindowsfoundedz, (uint)WM_LBUTTONUP, 0, 0);







                                    //Program.mousesim.LeftButtonDown();
                                    //Program.mousesim.LeftButtonUp();
                                    //Program.MessageBox((IntPtr)0, "found handle " + iHandle + " " + (int)Program.testGetWindowThreadProcessId, "sccs message 1", 0);
                                    //GetText(lparm);
                                    /*
                                    SendMessage((int)Program.testGetWindowThreadProcessId, WM_LBUTTONDOWN, 0, (mousex << 16) | mousey);
                                    SendMessage((int)Program.testGetWindowThreadProcessId, WM_LBUTTONUP, 0, (mousex << 16) | mousey);
                                    */

                                    //var absoluteMoveX = Convert.ToUInt32((mousex * 65535 - 1) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                                    //var absoluteMoveY = Convert.ToUInt32((mousey * 65535 - 1) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);
                                    //mouse_event(WM_LBUTTONDOWN, absoluteMoveX, absoluteMoveY, 0, 0);
                                    //mouse_event(WM_LBUTTONUP, 0, 0, 0, 0);



                                    //WORKING BUT NOT ON THE CHARACTER GAMING/MOVEMENT SURFACE OF PATH OF EXIL.
                                    //PostMessage(Program.vewindowsfoundedz, WM_LBUTTONDOWN, IntPtr.Zero, IntPtr.Zero);
                                    //PostMessage(Program.vewindowsfoundedz, WM_LBUTTONUP, IntPtr.Zero, IntPtr.Zero);
                                    //WORKING BUT NOT ON THE CHARACTER GAMING/MOVEMENT SURFACE OF PATH OF EXIL.



                                    /*Point screenPoint;
                                    screenPoint.X = mousex;
                                    screenPoint.Y = mousey;

                                    IntPtr handlePtr = WindowFromPoint(screenPoint);

                                    if (handlePtr != IntPtr.Zero)
                                    {
                                        //int lParam = MAKELPARAM(screenPoint.x, screenPoint.y);
                                        int lparm0 = (mousey << 16) + mousex;

                                        PostMessage(handlePtr, WM_LBUTTONDOWN, 0, lparm0);
                                        PostMessage(handlePtr, WM_LBUTTONUP, 0, lparm0);
                                    }*/











                                    //ClickOnPoint(Program.vewindowsfoundedz, new Point(mousex, mousey), mousex, mousey);

                                    /*var absoluteMoveX = Convert.ToUInt32((mousex * 65535 - 1) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                                    var absoluteMoveY = Convert.ToUInt32((mousey * 65535 - 1) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);

                                    mouse_event(MOUSEEVENTF_LEFTDOWN, absoluteMoveX, absoluteMoveY, 0, 0);
                                    mouse_event(MOUSEEVENTF_LEFTUP, absoluteMoveX, absoluteMoveY, 0, 0);*/












                                    //int iHandle = FindWindow(null, "VoidExpanse");
                                    if (iHandle != 0)
                                    {

                                    }

                                    /*
                                    for (int i = 0; i < edgelistptr.Count; i++)
                                    {
                                        var title = new StringBuilder(1024);
                                        NativeMethodsother.GetWindowText(Program.vewindowsfoundedz, title, title.Capacity);

                                        //if (string.IsNullOrWhiteSpace(title.ToString()))

                                        NativeMethodsother.GetWindowThreadProcessId(Program.vewindowsfoundedz, out var processId);
                                        // ignore by process name
                                        var process = Process.GetProcessById((int)processId);

                                        var pname = $"{title} ({process.ProcessName}.exe)";

                                        int iHandle = FindWindow(null, edgeliststr[i]);// "VoidExpanse"); //process.ProcessName

                                        //int iHandle = FindWindow(null, "VoidExpanse");
                                        if (iHandle != 0)
                                        {
                                            //Program.MessageBox((IntPtr)0, "found handle " + iHandle, "sccs message 1", 0);

                                            SendMessage(iHandle, WM_LBUTTONDOWN, 0, (mousex << 16) | mousey);
                                            SendMessage(iHandle, WM_LBUTTONUP, 0, 0);
                                        }                            

                                    }*/

                                    //mouse_event(0x0001, (uint)positionmouseinvx, (uint)positionmouseinvy, 0, 0);
                                    //Program.MessageBox((IntPtr)0, "found handle " + ((positionmouseinvy << 16) | positionmouseinvx), "sccs message 1", 0);

                                    //Program.mlbuttondown = 0;

                                    //mousebuttonframecounterl = 1;
                                    //sccsvvdhd.Form1.mlbuttondown = 1;
                                    stopwatchmouseclickswtcl = 0;
                                }
                                else
                                {
                                    //sccsvvdhd.Form1.mlbuttondown = 1;
                                    //mousebuttonframecounterl = 0;
                                    stopwatchmouseclickswtcl = 0;
                                    //mousebuttonframecounterl = 0;
                                }

                                /*else if (mousebuttonframecounterl == 1)
                                {

                                    mousebuttonframecounterl = 0;
                                }
                                else if (mousebuttonframecounterl == 2)
                                {
                                    mousebuttonframecounterl = 0;
                                }*/

                            }
                            else
                            {

                                //Program.mousesim.LeftButtonUp();






                                if (mousebuttonframecounterl == 1)
                                {

                                    //int iHandle = FindWindow(null, "VoidExpanse");//  "Path of Exile"
                                    int iHandle = FindWindow(null, Program.capturedwindowname);
                                    //"VoidExpanse"); //process.ProcessName //CryoFall //Factorio 1.1.53 //It Lurks Below //Terraria: Terrestrial Trouble

                                    //SetCursorPos((int)mousex, (int)mousey);
                                    //GetText(lparm);


                                    //IntPtr edithWnd = FindWindowEx(Program.vewindowsfoundedz, IntPtr.Zero, "Path of Exile", null);
                                    //Program.MessageBox((IntPtr)0, "found handle " + edithWnd, "sccs message 1", 0);



                                    //IntPtr hFocus = IntPtr.Zero;

                                    //IntPtr hFore;

                                    //uint id = 0;

                                    //hFore = Program.vewindowsfoundedz;// GetForegroundWindow();

                                    //var idAttach = GetWindowThreadProcessId(hFore, out id);

                                    //Program.MessageBox((IntPtr)0, "found handle " + idAttach + " " + id, "sccs message 1", 0);

                                    //var curThreadId = GetCurrentThreadId();
                                    // To attach to current thread
                                    //AttachThreadInput(idAttach, curThreadId, true);

                                    //AttachThreadInput(id, curThreadId, true);

                                    //string WINDOW_NAME = "sccsr14wpf";  //"It Lurks Below"
                                    //IntPtr window = FindWindowByCaption(IntPtr.Zero, WINDOW_NAME);
                                    //MessageBox((IntPtr)0, "window" + window, "scmsg", 0);
                                    //SetWindowLong(Program.somemainwpfhandle, GWL_EXSTYLE, (IntPtr)(GetWindowLong(window, GWL_EXSTYLE) | WS_EX_LAYERED | WS_EX_TOPMOST | WS_EX_TRANSPARENT));//| WS_EX_TOPMOST | WS_EX_LAYERED | WS_EX_OVERLAPPEDWINDOW //WS_EX_TRANSPARENT
                                    //SetLayeredWindowAttributes(Program.somemainwpfhandle, 0, 255, LWA_ALPHA);





                                    /*
                                    Input[] inputs = new Input[]
                                  {
                                        new Input
                                        {
                                            type = (int) InputType.Mouse,
                                            u = new InputUnion
                                            {
                                                mi = new MouseInput
                                                {
                                                    dwFlags = (uint)MouseEventF.LeftUp,
                                                    dwExtraInfo = GetMessageExtraInfo()
                                                }
                                            }
                                        }
                                  };



                                    SendInput((uint)inputs.Length, inputs, Marshal.SizeOf(typeof(Input)));

                                    */








                                    //SendMessage(iHandle, WM_LBUTTONDOWN, 0, (mousex << 16) | mousey);
                                    SendMessage(iHandle, WM_LBUTTONUP, 0, 0);
                                    //sccsvvdhd.Form1.mlbuttondown = 0;

                                    mousebuttonframecounterl = 0;



                                }
                                else
                                {
                                    //sccsvvdhd.Form1.mlbuttondown = 0;
                                    //sccsvvdhd.Form1.mlbuttondown = 0;
                                    //mousebuttonframecounterl = 1;
                                }
                                stopwatchmouseclickswtcl = 0;


                            }



                        }





                        if (watchforgetmouseclickr.Elapsed.Ticks > 3)
                        {


                            //SetCursorPos((int)mbefposx, (int)mbefposy);


                            var mbefposx = mousex;
                            var mbefposy = mousey;

                            //Console.WriteLine(Program.mlbuttondown);

                            if (sccsvvdhd.Form1.mrbuttondown == 1) // keynmouseinput._MouseState.Buttons[0]) //
                                                                   //if (Program.keynmouseinput._MouseState.Buttons[0])
                            {
                                //Program.MessageBox((IntPtr)0, "1", "sccs message 1", 0);


                                if (mousebuttonframecounterr == 0)
                                {

                                    // var absoluteMoveX = Convert.ToUInt32((memorymousex * 65535 - 1) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                                    // var absoluteMoveY = Convert.ToUInt32((memorymousey * 65535 - 1) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);

                                    //Program.mousesim.MoveMouseToPositionOnVirtualDesktop(absoluteMoveX, absoluteMoveY);

                                    /* SetCursorPos((int)positionmouseinvx, (int)positionmouseinvy);
                                     GetText(lparm);
                                     SetCursorPos((int)mbefposx, (int)mbefposy);
                                    */

                                    /*IntPtr edge = IntPtr.Zero;
                                    Process[] processlist = Process.GetProcesses();
                                    string processname = "";
                                    foreach (Process process in processlist)
                                    {

                                        Program.MessageBox((IntPtr)0, "edge" + " " + process.ProcessName, "sccoresystems0", 0);

                                        if (process.ProcessName.ToLower() == "msedge")
                                        {
                                            //Console.WriteLine("Process: {0} ID: {1} Window title: {2}", process.ProcessName, process.Id, process.MainWindowTitle);
                                            //Program.MessageBox((IntPtr)0, "edge" + " " + process.MainWindowHandle, "sccoresystems0", 0);
                                            //vewindowsfoundedz = process.MainWindowHandle;
                                            edge= process.MainWindowHandle;
                                            processname = process.ProcessName;

                                            break;
                                        }
                                    }*/


                                    //int iHandle = FindWindow(null, "VoidExpanse");//  "Path of Exile"

                                    int iHandle = FindWindow(null, Program.capturedwindowname);// "VoidExpanse");

                                    SendMessage(iHandle, WM_RBUTTONDOWN, 0, (mousex << 16) | mousey);




                                    //SendMessage(iHandle, WM_LBUTTONDOWN, 0, (mousex << 16) | mousey);
                                    //SendMessage(iHandle, WM_LBUTTONUP, 0, 0);

                                    /*var absoluteMoveX = Convert.ToUInt32((mousex * 65535 - 1) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                                    var absoluteMoveY = Convert.ToUInt32((mousey * 65535 - 1) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);
                                    mouse_event(WM_LBUTTONDOWN, absoluteMoveX, absoluteMoveY, 0, 0);
                                    mouse_event(WM_LBUTTONUP, absoluteMoveX, absoluteMoveY, 0, 0);
                                    */



                                    // ClickOnPoint(Program.vewindowsfoundedz,new Point(mousex,mousey), mousex, mousey);


                                    //Program.MessageBox((IntPtr)0, "found handle " + iHandle, "sccs message 1", 0);

                                    //Program.mousesim.LeftButtonDown();
                                    //Program.mousesim.LeftButtonUp();

                                    //SendMessage(iHandle, WM_RBUTTONDOWN, 0, (mousex << 16) | mousey);
                                    //SendMessage(iHandle, WM_RBUTTONUP, 0, 0);
                                    //GetText(lparm);
                                    //mouse_event(0x0001, (uint)positionmouseinvx, (uint)positionmouseinvy, 0, 0);

                                    /*var absoluteMoveX = Convert.ToUInt32((mousex * 65535 - 1) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                                    var absoluteMoveY = Convert.ToUInt32((mousey * 65535 - 1) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);

                                   mouse_event(MOUSEEVENTF_LEFTDOWN, absoluteMoveX, absoluteMoveY, 0, 0);
                                   mouse_event(MOUSEEVENTF_LEFTUP, absoluteMoveX, absoluteMoveY, 0, 0);*/
                                    //Program.MessageBox((IntPtr)0, "found handle " + ((positionmouseinvy << 16) | positionmouseinvx), "sccs message 1", 0);

                                    //Program.mrbuttondown = 0;
                                    sccsvvdhd.Form1.mrbuttondown = 1;
                                    mousebuttonframecounterr = 1;
                                }
                                else
                                {
                                    sccsvvdhd.Form1.mrbuttondown = 1;
                                    //sccsvvdhd.Form1.mrbuttondown = 1;
                                    //mousebuttonframecounterr = 0;
                                }
                                /*else if (mousebuttonframecounterr == 1)
                                {
                                    int iHandle = FindWindow(null, "Path of Exile");// "VoidExpanse");

                                    SendMessage(iHandle, WM_RBUTTONUP, 0, (mousex << 16) | mousey);


                                    mousebuttonframecounterr = 0;
                                }
                                else if (mousebuttonframecounterr == 2)
                                {
                                    mousebuttonframecounterr = 0;
                                }*/
                                //stopwatchmouseclickswtcr = 0;
                                stopwatchmouseclickswtcr = 0;
                            }
                            else
                            {



                                if (mousebuttonframecounterr == 1)
                                {
                                    int iHandle = FindWindow(null, Program.capturedwindowname);// "VoidExpanse");

                                    SendMessage(iHandle, WM_RBUTTONUP, 0, (mousex << 16) | mousey);
                                    //Program.mousesim.LeftButtonUp();
                                    //sccsvvdhd.Form1.mrbuttondown = 0;
                                    mousebuttonframecounterr = 0;
                                }
                                else
                                {
                                    //sccsvvdhd.Form1.mrbuttondown = 0;
                                    //mousebuttonframecounterr = 0;
                                }
                                stopwatchmouseclickswtcr = 0;
                            }

                        }

                    }


                    //Console.WriteLine("xm:" + positionmousex + " ym:" + positionmousey);

                    //Vector3 directionfromcursortoyspot = 












































                    /*
                    Vector3 currentScreenPos = new Vector3(tempMatrix.M41, tempMatrix.M42, tempMatrix.M43); // new Vector3(xii, yii, zii);// new Vector3(_finalRotMatrixScreen.M41, _finalRotMatrixScreen.M42, _finalRotMatrixScreen.M43);
                    Vector3 newDirRight = (screenNormalRight) * sizeWidtherer; // + screenNormalTop
                    currentScreenPos -= newDirRight;
                    Vector3 newDirUp = (screenNormalUp) * sizeheighterer; // + screenNormalTop
                    currentScreenPos -= newDirUp;
                    Matrix resulter0 = tempMatrix;
                    resulter0.M41 = currentScreenPos.X;
                    resulter0.M42 = currentScreenPos.Y;
                    resulter0.M43 = currentScreenPos.Z;
                    _screenDirMatrix_correct_pos[0][0][0] = resulter0;

                    currentScreenPos = new Vector3(tempMatrix.M41, tempMatrix.M42, tempMatrix.M43);
                    newDirRight = (screenNormalRight) * sizeWidtherer;
                    currentScreenPos -= newDirRight;
                    newDirUp = (screenNormalUp) * sizeheighterer;
                    currentScreenPos += newDirUp;
                    resulter0 = tempMatrix;
                    resulter0.M41 = currentScreenPos.X;
                    resulter0.M42 = currentScreenPos.Y;
                    resulter0.M43 = currentScreenPos.Z;
                    _screenDirMatrix_correct_pos[0][0][1] = resulter0;

                    currentScreenPos = new Vector3(tempMatrix.M41, tempMatrix.M42, tempMatrix.M43);
                    newDirRight = (screenNormalRight) * sizeWidtherer;
                    currentScreenPos += newDirRight;
                    newDirUp = (screenNormalUp) * sizeheighterer;
                    currentScreenPos -= newDirUp;
                    resulter0 = tempMatrix;
                    resulter0.M41 = currentScreenPos.X;
                    resulter0.M42 = currentScreenPos.Y;
                    resulter0.M43 = currentScreenPos.Z;
                    _screenDirMatrix_correct_pos[0][0][2] = resulter0;

                    currentScreenPos = new Vector3(tempMatrix.M41, tempMatrix.M42, tempMatrix.M43);
                    newDirRight = (screenNormalRight) * sizeWidtherer;
                    currentScreenPos += newDirRight;
                    newDirUp = (screenNormalUp) * sizeheighterer;
                    currentScreenPos += newDirUp;
                    resulter0 = tempMatrix;
                    resulter0.M41 = currentScreenPos.X;
                    resulter0.M42 = currentScreenPos.Y;
                    resulter0.M43 = currentScreenPos.Z;
                    _screenDirMatrix_correct_pos[0][0][3] = resulter0;
                    */
                    /*for (int x = 0; x < _physics_engine_instance_x; x++)
                    {
                        for (int y = 0; y < _physics_engine_instance_y; y++)
                        {
                            for (int z = 0; z < _physics_engine_instance_z; z++)
                            {
                                var _index = x + _physics_engine_instance_x * (y + _physics_engine_instance_y * z);

                                for (int i = 0; i < worldmatrixinstancesvoxelsforcalculationsonly[0].Length; i++)
                                {
                                    Matrix matrixor = _screenDirMatrix_correct_pos[0][i];
                                    worldmatrixinstancesvoxelsforcalculationsonly[0][i] = matrixor;
                                }
                            }
                        }
                    }*/
                    /*for (int i = 0; i < 4; i++) //worldmatrixinstancesvoxelsforcalculationsonly[0].Length
                    {
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][i] = _screenDirMatrix_correct_pos[0][0][i];
                    }*/






                    //RIGHT CONTROLLER HITPOINT
                    if (currentFrameRight < arrayOfStabilizerPosRight.Length)
                    {
                        arrayOfStabilizerPosXRight[currentFrameRight] = intersectPointRight.X;
                        arrayOfStabilizerPosYRight[currentFrameRight] = intersectPointRight.Y;
                        arrayOfStabilizerPosZRight[currentFrameRight] = intersectPointRight.Z;

                        arrayOfStabilizerPosRight[currentFrameRight] = intersectPointRight;
                    }
                    else
                    {
                        differenceX = 0;
                        differenceY = 0;
                        differenceZ = 0;

                        int j = 1;

                        for (int i = 0; i < arrayOfStabilizerPosXRight.Length - 1; i++, j++)
                        {
                            currentX = arrayOfStabilizerPosXRight[j];
                            currentY = arrayOfStabilizerPosYRight[j];
                            currentZ = arrayOfStabilizerPosZRight[j];

                            lastRightHitPointXFrameOne = arrayOfStabilizerPosXRight[i];
                            lastRightHitPointYFrameOne = arrayOfStabilizerPosYRight[i];
                            lastRightHitPointZFrameOne = arrayOfStabilizerPosZRight[i];

                            if (lastRightHitPointXFrameOne >= currentX)
                            {
                                differenceX = lastRightHitPointXFrameOne - currentX;
                            }
                            else
                            {
                                differenceX = currentX - lastRightHitPointXFrameOne;
                            }
                            arrayOfStabilizerPosDifferenceXRight[i] = differenceX;


                            if (lastRightHitPointYFrameOne >= currentY)
                            {
                                differenceY = lastRightHitPointYFrameOne - currentY;
                            }
                            else
                            {
                                differenceY = currentY - lastRightHitPointYFrameOne;
                            }
                            arrayOfStabilizerPosDifferenceYRight[i] = differenceY;


                            if (lastRightHitPointZFrameOne >= currentZ)
                            {
                                differenceZ = lastRightHitPointZFrameOne - currentZ;
                            }
                            else
                            {
                                differenceZ = currentZ - lastRightHitPointZFrameOne;
                            }
                            arrayOfStabilizerPosDifferenceZRight[i] = differenceZ;
                        }

                        averageXRight = 0;
                        averageYRight = 0;
                        averageZRight = 0;

                        for (int i = 0; i < arrayOfStabilizerPosDifferenceXRight.Length; i++)
                        {
                            averageXRight += arrayOfStabilizerPosDifferenceXRight[i];
                            averageYRight += arrayOfStabilizerPosDifferenceYRight[i];
                            averageZRight += arrayOfStabilizerPosDifferenceZRight[i];
                        }

                        averageXRight = averageXRight / arrayOfStabilizerPosDifferenceXRight.Length;
                        averageYRight = averageYRight / arrayOfStabilizerPosDifferenceYRight.Length;
                        averageZRight = averageZRight / arrayOfStabilizerPosDifferenceZRight.Length;
                        restartFrameCounterRight = true;
                    }

                    if (!restartFrameCounterRight)
                    {
                        currentFrameRight++;
                    }
                    else
                    {
                        currentFrameRight = 0;
                        restartFrameCounterRight = false;
                    }

                    positionXRight = 0;
                    positionYRight = 0;
                    positionZRight = 0;

                    for (int i = 0; i < arrayOfStabilizerPosRight.Length; i++)
                    {
                        positionXRight += arrayOfStabilizerPosRight[i].X;
                        positionYRight += arrayOfStabilizerPosRight[i].Y;
                        positionZRight += arrayOfStabilizerPosRight[i].Z;
                    }

                    positionXRight = positionXRight / arrayOfStabilizerPosRight.Length;
                    positionYRight = positionYRight / arrayOfStabilizerPosRight.Length;
                    positionZRight = positionZRight / arrayOfStabilizerPosRight.Length;

                    stabilizedIntersectionPosRight = new Vector3((float)positionXRight, (float)positionYRight, (float)positionZRight);

                    //_intersectTouchRightMatrix = _world_screen_list[0][0]._arrayOfInstances[0].current_pos;
                    _intersectTouchRightMatrix = somevoxelvirtualdesktop[0].currentWorldMatrix;

                    _intersectTouchRightMatrix.M41 = stabilizedIntersectionPosRight.X;
                    _intersectTouchRightMatrix.M42 = stabilizedIntersectionPosRight.Y;
                    _intersectTouchRightMatrix.M43 = stabilizedIntersectionPosRight.Z;

                    var vert0 = new Vector3(_screenDirMatrix_correct_pos[0][0][0].M41, _screenDirMatrix_correct_pos[0][0][0].M42, _screenDirMatrix_correct_pos[0][0][0].M43);
                    var vert1 = new Vector3(_screenDirMatrix_correct_pos[0][0][1].M41, _screenDirMatrix_correct_pos[0][0][1].M42, _screenDirMatrix_correct_pos[0][0][1].M43);
                    var vert2 = new Vector3(_screenDirMatrix_correct_pos[0][0][2].M41, _screenDirMatrix_correct_pos[0][0][2].M42, _screenDirMatrix_correct_pos[0][0][2].M43);
                    var vert3 = new Vector3(_screenDirMatrix_correct_pos[0][0][3].M41, _screenDirMatrix_correct_pos[0][0][3].M42, _screenDirMatrix_correct_pos[0][0][3].M43);

                    var pointOnScreen = new Vector3(_intersectTouchRightMatrix.M41, _intersectTouchRightMatrix.M42, _intersectTouchRightMatrix.M43);
                    //var pointOnScreen = new Vector3(intersectPointRight.X, intersectPointRight.Y, intersectPointRight.Z);

                    var d = (vert2 - vert0).Length();
                    widthLength = (vert2 - vert0).Length();
                    heightLength = (vert1 - vert0).Length();
                    float r = (pointOnScreen - vert0).Length();
                    var R = (pointOnScreen - vert2).Length();
                    var xcirccirc = ((d * d) - (r * r) + (R * R)) / (2 * d);
                    var d1 = xcirccirc;
                    var d2 = d - xcirccirc;

                    //r is with d2
                    //R is with d1
                    //a2 + b2 = c2

                    /*if ( d1 < 0)
                    {
                        //Program.MessageBox((IntPtr)0, "over bounds 0", "sccs message 1", 0);
                        Console.WriteLine("out of bounds 0");
                    }*/

                    float b = (float)Math.Sqrt((r * r) - (d2 * d2));
                    currentPosWidth = widthLength - d1; // 
                    currentPosHeight = heightLength - b;

                    var someval0 = (pointOnScreen - vert0);
                    var someval1 = (pointOnScreen - vert1);


                    percentXRight = currentPosWidth / widthLength;
                    percentYRight = currentPosHeight / heightLength;

                    percentXRight *= sccs.scgraphics.scdirectx.D3D.SurfaceWidth;
                    percentYRight *= sccs.scgraphics.scdirectx.D3D.SurfaceHeight;


                    if (someval0.Y < 0) // || someval1.Y < 0
                    {
                        percentYRight = sccs.scgraphics.scdirectx.D3D.SurfaceHeight;
                    }



                    //LEFT CONTROLLER HITPOINT
                    //////////////////////////////////////////////////////////////////////////

                    /*if (currentFrameLeft < arrayOfStabilizerPosLeft.Length)
                    {
                        arrayOfStabilizerPosXLeft[currentFrameLeft] = intersectPointLeft.X;
                        arrayOfStabilizerPosYLeft[currentFrameLeft] = intersectPointLeft.Y;
                        arrayOfStabilizerPosZLeft[currentFrameLeft] = intersectPointLeft.Z;
                        arrayOfStabilizerPosLeft[currentFrameLeft] = intersectPointLeft;
                    }
                    else
                    {
                        differenceX = 0;
                        differenceY = 0;
                        differenceZ = 0;

                        int j = 1;
                        for (int i = 0; i < arrayOfStabilizerPosXLeft.Length - 1; i++, j++)
                        {
                            currentX = arrayOfStabilizerPosXLeft[j];
                            currentY = arrayOfStabilizerPosYLeft[j];
                            currentZ = arrayOfStabilizerPosZLeft[j];

                            lastLeftHitPointXFrameOne = arrayOfStabilizerPosXLeft[i];
                            lastLeftHitPointYFrameOne = arrayOfStabilizerPosYLeft[i];
                            lastLeftHitPointZFrameOne = arrayOfStabilizerPosZLeft[i];

                            if (lastLeftHitPointXFrameOne >= currentX)
                            {
                                differenceX = lastLeftHitPointXFrameOne - currentX;
                            }
                            else
                            {
                                differenceX = currentX - lastLeftHitPointXFrameOne;
                            }
                            arrayOfStabilizerPosDifferenceXLeft[i] = differenceX;

                            if (lastLeftHitPointYFrameOne >= currentY)
                            {
                                differenceY = lastLeftHitPointYFrameOne - currentY;
                            }
                            else
                            {
                                differenceY = currentY - lastLeftHitPointYFrameOne;
                            }
                            arrayOfStabilizerPosDifferenceYLeft[i] = differenceY;


                            if (lastLeftHitPointZFrameOne >= currentZ)
                            {
                                differenceZ = lastLeftHitPointZFrameOne - currentZ;
                            }
                            else
                            {
                                differenceZ = currentZ - lastLeftHitPointZFrameOne;
                            }
                            arrayOfStabilizerPosDifferenceZLeft[i] = differenceZ;
                        }

                        averageXLeft = 0;
                        averageYLeft = 0;
                        averageZLeft = 0;


                        for (int i = 0; i < arrayOfStabilizerPosDifferenceXLeft.Length; i++)
                        {
                            averageXLeft += arrayOfStabilizerPosDifferenceXLeft[i];
                            averageYLeft += arrayOfStabilizerPosDifferenceYLeft[i];
                            averageZLeft += arrayOfStabilizerPosDifferenceZLeft[i];
                        }

                        averageXLeft = averageXLeft / arrayOfStabilizerPosDifferenceXLeft.Length;
                        averageYLeft = averageYLeft / arrayOfStabilizerPosDifferenceYLeft.Length;
                        averageZLeft = averageZLeft / arrayOfStabilizerPosDifferenceZLeft.Length;

                        restartFrameCounterLeft = true;
                    }

                    if (!restartFrameCounterLeft)
                    {
                        currentFrameLeft++;
                    }
                    else
                    {
                        currentFrameLeft = 0;
                        restartFrameCounterLeft = false;
                    }

                    positionXLeft = 0;
                    positionYLeft = 0;
                    positionZLeft = 0;

                    for (int i = 0; i < arrayOfStabilizerPosLeft.Length; i++)
                    {
                        positionXLeft += arrayOfStabilizerPosLeft[i].X;
                        positionYLeft += arrayOfStabilizerPosLeft[i].Y;
                        positionZLeft += arrayOfStabilizerPosLeft[i].Z;
                    }

                    positionXLeft = positionXLeft / arrayOfStabilizerPosLeft.Length;
                    positionYLeft = positionYLeft / arrayOfStabilizerPosLeft.Length;
                    positionZLeft = positionZLeft / arrayOfStabilizerPosLeft.Length;

                    stabilizedIntersectionPosLeft = new Vector3((float)positionXLeft, (float)positionYLeft, (float)positionZLeft);

                    //_intersectTouchLeftMatrix = _world_screen_list[0][0]._arrayOfInstances[0].current_pos;
                    _intersectTouchLeftMatrix = somevoxelvirtualdesktop[0].currentWorldMatrix;
                    _intersectTouchLeftMatrix.M41 = stabilizedIntersectionPosLeft.X;
                    _intersectTouchLeftMatrix.M42 = stabilizedIntersectionPosLeft.Y;
                    _intersectTouchLeftMatrix.M43 = stabilizedIntersectionPosLeft.Z;

                    pointOnScreen = new Vector3(intersectPointLeft.X, intersectPointLeft.Y, intersectPointLeft.Z);

                    d = (vert2 - vert0).Length();
                    widthLength = (vert2 - vert0).Length();
                    heightLength = (vert1 - vert0).Length();
                    r = (pointOnScreen - vert0).Length();
                    R = (pointOnScreen - vert2).Length();
                    xcirccirc = ((d * d) - (r * r) + (R * R)) / (2 * d);
                    d1 = xcirccirc;
                    d2 = d - xcirccirc;

                    //r is with d2
                    //R is with d1
                    //a2 + b2 = c2

                    b = (float)Math.Sqrt((r * r) - (d2 * d2));
                    currentPosWidth = widthLength - d1; // 
                    currentPosHeight = heightLength - b;
                    percentXLeft = currentPosWidth / widthLength;
                    percentYLeft = currentPosHeight / heightLength;
                    percentXLeft *= sccs.scgraphics.scdirectx.D3D.SurfaceWidth;
                    percentYLeft *= sccs.scgraphics.scdirectx.D3D.SurfaceHeight;



                    */













                    //HMD POINTER
                    /*somematroxer2 = _world_screen_list[0][0]._arrayOfInstances[0].current_pos;
                    var screenNormaler = sc_maths._getDirection(Vector3.ForwardRH, _testQuater);
                    var planor = new Plane(new Vector3(_world_screen_list[0][0]._arrayOfInstances[0].current_pos.M41, _world_screen_list[0][0]._arrayOfInstances[0].current_pos.M42, _world_screen_list[0][0]._arrayOfInstances[0].current_pos.M43), screenNormaler);
                    var centerPosOculusRift = new Vector3(_hmdPoser.X, _hmdPoser.Y, _hmdPoser.Z) + sccs.scgraphics.scupdate.OFFSETPOS;
                    Matrix oculusRifter;
                    Matrix.RotationQuaternion(ref _hmdRoter, out oculusRifter);
                    oculusRifter = oculusRifter * OriginRot * RotatingMatrix * RotatingMatrixForPelvis;
                    Quaternion some_oculus_quat;
                    Quaternion.RotationMatrix(ref oculusRifter, out some_oculus_quat);
                    var raydirhmd = sc_maths._getDirection(Vector3.ForwardRH, some_oculus_quat);
                    raydirhmd.Normalize();
                    var someRayer = new Ray(centerPosOculusRift, raydirhmd);
                    Vector3 intersectPointHMD;
                    var intersecterHMD = someRayer.Intersects(ref planor, out intersectPointHMD);
                    somematroxer2.M41 = intersectPointHMD.X;
                    somematroxer2.M42 = intersectPointHMD.Y;
                    somematroxer2.M43 = intersectPointHMD.Z;
                    //CIRCLE CIRCLE INTERSECTION //http://mathworld.wolfram.com/Circle-CircleIntersection.html
                    pointOnScreen = new Vector3(intersectPointHMD.X, intersectPointHMD.Y, intersectPointHMD.Z);
                    d = (vert2 - vert0).Length();
                    widthLength = (vert2 - vert0).Length();
                    heightLength = (vert1 - vert0).Length();
                    r = (pointOnScreen - vert0).Length();
                    R = (pointOnScreen - vert2).Length();
                    xcirccirc = ((d * d) - (r * r) + (R * R)) / (2 * d);
                    d1 = xcirccirc;
                    d2 = d - xcirccirc;
                    //r is with d2
                    //R is with d1
                    //a2 + b2 = c2
                    b = (float)Math.Sqrt((r * r) - (d2 * d2));
                    currentPosWidth = widthLength - d1; // 
                    currentPosHeight = heightLength - b;
                    var percentXRift = currentPosWidth / widthLength;
                    var percentYRift = currentPosHeight / heightLength;
                    percentXRift *= sccs.scgraphics.scdirectx.D3D.SurfaceWidth;
                    percentYRift *= sccs.scgraphics.scdirectx.D3D.SurfaceHeight;
                    var realOculusRiftCursorPosX = percentXRift;
                    var realOculusRiftCursorPosY = percentYRift;
                    */







                    /*

                    if (realOculusRiftCursorPosX >= 0 && realOculusRiftCursorPosX <= sccs.scgraphics.scdirectx.D3D.SurfaceWidth && realOculusRiftCursorPosY >= 0 && realOculusRiftCursorPosY <= sccs.scgraphics.scdirectx.D3D.SurfaceHeight)
                    {
                        _oculusR_Cursor_matrix = somematroxer2;

                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][5] = _intersectTouchRightMatrix;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][6] = _intersectTouchLeftMatrix;
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][7] = _oculusR_Cursor_matrix;


                        _out_of_bounds_oculus_rift = 0;
                    }
                    else
                    {
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][5] = worldmatrixinstancesvoxelsforcalculationsonly[0][0][0];
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][6] = worldmatrixinstancesvoxelsforcalculationsonly[0][0][0];
                        worldmatrixinstancesvoxelsforcalculationsonly[0][0][7] = worldmatrixinstancesvoxelsforcalculationsonly[0][0][0];

                        _out_of_bounds_oculus_rift = 1;
                    }*/

                    /*if (percentXRight >= 0 && percentXRight < sccs.scgraphics.scdirectx.D3D.SurfaceWidth && percentYRight >= 0 && percentYRight < sccs.scgraphics.scdirectx.D3D.SurfaceHeight)
                    {
                        _MicrosoftWindowsMouseRight(percentXRight, percentYRight, thumbStickRight, percentXLeft, percentYLeft, thumbStickLeft, percentXRight, percentYRight);
                    }*/



                    float dotres1;
                    //var vert0 = new Vector3(_screenDirMatrix_correct_pos[0][0][0].M41, _screenDirMatrix_correct_pos[0][0][0].M42, _screenDirMatrix_correct_pos[0][0][0].M43);
                    //var vert1 = new Vector3(_screenDirMatrix_correct_pos[0][0][1].M41, _screenDirMatrix_correct_pos[0][0][1].M42, _screenDirMatrix_correct_pos[0][0][1].M43);
                    //var vert2 = new Vector3(_screenDirMatrix_correct_pos[0][0][2].M41, _screenDirMatrix_correct_pos[0][0][2].M42, _screenDirMatrix_correct_pos[0][0][2].M43);
                    //var vert3 = new Vector3(_screenDirMatrix_correct_pos[0][0][3].M41, _screenDirMatrix_correct_pos[0][0][3].M42, _screenDirMatrix_correct_pos[0][0][3].M43);

                    //Vector3 somevec0 = (vert2 - vert0);
                    //Vector3 somevec1 = (vert1 - vert0);
                    //sc_maths.Dot(somevec0.X, somevec0.Y, somevec0.X, somevec0.Y);
                    //float dotres0;
                    //Vector3.Dot(ref somevec0, ref rayDirRighter, out dotres0);
                    //Vector3 somecr;
                    //somevec0.Normalize();
                    //somevec1.Normalize();

                    //Vector3.Cross(ref somevec0, ref somevec1, out somecr);
                    //somecr.Normalize();





                    //var someotherval = raydirhmd * -1;
                    //intersectPointHMD.Normalize();

                    //Vector3.Dot(ref screenNormalRight, ref raydirhmd, out dotres0);

                    /*var screenposition = new Vector3(_world_screen_list[0][0]._arrayOfInstances[0].current_pos.M41, _world_screen_list[0][0]._arrayOfInstances[0].current_pos.M42, _world_screen_list[0][0]._arrayOfInstances[0].current_pos.M43);
                    var pointforward = screenposition + (-screenNormalForward);
                    var dirforward = pointforward - pointOnScreen;
                    dirforward.Normalize();

                    //var screennormalfinvert = -screenNormalForward;
                    Vector3.Dot(ref dirforward, ref raydirhmd, out dotres1);
                    //Console.WriteLine(" " + " " + dotres1);

                    //Matrix somematrix = Matrix.Identity;
                    //somematrix.M41 = pointforward.X;
                    ///somematrix.M42 = pointforward.Y;
                    //somematrix.M43 = pointforward.Z;

                    //worldmatrixinstancesvoxelsforcalculationsonly[0][0][7] = somematrix;


                    if (dotres1 < -0.80)
                    {
                        _MicrosoftWindowsMouseRight(percentXRight, percentYRight, thumbStickRight, percentXLeft, percentYLeft, thumbStickLeft, percentXRight, percentYRight);
                    }
                    else
                    {

                    }

                    _oculus_touch_controls(percentXRight, percentYRight, thumbStickRight, percentXLeft, percentYLeft, thumbStickLeft, percentXRight, percentYRight);

                    */




                    //DISCARDED TO REINSERT
                    //DISCARDED TO REINSERT
                    //DISCARDED TO REINSERT
                    /*lastHasUsedHandTriggerLeft = hasUsedHandTriggerLeft;
                    lastbuttonPressedOculusTouchRight = buttonPressedOculusTouchRight;
                    lastbuttonPressedOculusTouchLeft = buttonPressedOculusTouchLeft;

                    if (createikrig == 1)
                    {
                        final_hand_pos_right_locked = ikarmvoxel[3]._player_rght_hnd[0][0]._arrayOfInstances[0].current_pos;
                        final_hand_pos_left_locked = ikarmvoxel[0]._player_rght_hnd[0][0]._arrayOfInstances[0].current_pos;
                        _last_final_hand_pos_right = new Vector3(ikarmvoxel[3]._player_rght_hnd[0][0]._arrayOfInstances[0].current_pos.M41, ikarmvoxel[3]._player_rght_hnd[0][0]._arrayOfInstances[0].current_pos.M42, ikarmvoxel[3]._player_rght_hnd[0][0]._arrayOfInstances[0].current_pos.M43);
                        _last_frame_handPos = new Vector3(ikarmvoxel[3]._player_rght_hnd[0][0]._arrayOfInstances[0].current_pos.M41, ikarmvoxel[3]._player_rght_hnd[0][0]._arrayOfInstances[0].current_pos.M42, ikarmvoxel[3]._player_rght_hnd[0][0]._arrayOfInstances[0].current_pos.M43);
                        ///DISCARDED TO REINSERT
                        //DISCARDED TO REINSERT
                        //DISCARDED TO REINSERT
                    }*/

                    lastmousevirtualx = mousex;
                    lastmousevirtualy = mousey;
                }
            }
        }













        //scmessageobjectjitter[][] _sc_jitter_tasks, Matrix viewMatrix, Matrix projectionMatrix, Vector3 OFFSETPOS, Matrix originRot, Matrix rotatingMatrix, Matrix hmdrotMatrix, Matrix hmd_matrix, Matrix rotatingMatrixForPelvis, Matrix _rightTouchMatrix, Matrix _leftTouchMatrix, Posef handPoseRight, Posef handPoseLeft, Matrix oriProjectionMatrix, Matrix extramatrix



        int divxadd = 0;
        int divyadd = 0;

        float someemptybytes = 00000000.0f;
        int pixelsize = 2;
        int somemindexy = 0;
        int somemindexx = 0;

        int somepixelsize = 4;
        int somepixelval = 4;
        int bytePoser = 0;

        float somemultiplier = 0; // -25 // -100
        int someresw = 0;//
        int someresh = 0;//
        int someindexmx = 1;
        int someindexmy = 1;

        int totalsize;


        int swtchy = 0;
        int swtchx = 0;
        int swtchz = 0;

        int xx = 0;
        int yy = 0;
        int zz = 0;

        float a;
        float b;
        float g;
        float r;
        float total;
        float somenoise = 1.0f;//
        int somenoisevalue = 0;

        int addmulsub = 0;//0 add // 1mul // 2sub


        int hasgot0 = 1;
        int hasgot1 = 0;
        int hasgot2 = 0;
        int hasgot3 = 0;
        int hasgot4 = 0;
        int hasgot5 = 0;
        int hasgot6 = 0;
        int hasgot7 = 0;
        int hasgot8 = 0;
        int hasgot9 = 0;
        int hasgot10 = 0;
        int hasgot11 = 0;


        float noisehasgot0;
        float noisehasgot1;
        float noisehasgot2;
        float noisehasgot3;
        float noisehasgot4;
        float noisehasgot5;
        float noisehasgot6;
        float noisehasgot7;
        float noisehasgot8;
        float noisehasgot9;
        float noisehasgot10;
        float noisehasgot11;

        public int hasgotswtc0 = 1;
        public int hasgotswtc1 = 0;
        public int hasgotswtc2 = 0;
        public int hasgotswtc3 = 0;
        public int hasgotswtc4 = 0;
        public int hasgotswtc5 = 0;
        public int hasgotswtc6 = 0;
        public int hasgotswtc7 = 0;
        public int hasgotswtc8 = 0;
        public int hasgotswtc9 = 0;
        public int hasgotswtc10 = 0;
        public int hasgotswtc11 = 0;





        //public int hasfinishedloop = 0;
        //scmessageobjectjitter[][] _sc_jitter_tasks
        // scmessageobjectjitter[][] 
        public scmessageobjectjitter[][] scwritetobuffer(scmessageobjectjitter[][] _sc_jitter_tasks, out int hasfinishedloop) //, out int hasfinishedloop
        {
            hasfinishedloop = 0;
            //hasfinishedloop = 0;
            //sc_menu_scroller = 2;

            //resetvoxelladdercounter = 1;
            //VIRTUAL DESKTOP VOXEL MESH BREAKING BUFFER MAP RESET
            //VIRTUAL DESKTOP VOXEL MESH BREAKING BUFFER MAP RESET
            //VIRTUAL DESKTOP VOXEL MESH BREAKING BUFFER MAP RESET
            /*
            for (int xxxx = 0; xxxx < somevoxelvirtualdesktopw; xxxx++)
            {
                for (int yyyy = 0; yyyy < somevoxelvirtualdesktoph; yyyy++)
                {
                    for (int zzzz = 0; zzzz < somevoxelvirtualdesktopd; zzzz++)
                    {
                        var somevoxelvirtualdesktopindex = xxxx + somevoxelvirtualdesktopw * (yyyy + somevoxelvirtualdesktoph * zzzz);

                        for (int x = 0; x < somevoxelvirtualdesktopglobals.numberOfObjectInWidth; x++)
                        {
                            for (int y = 0; y < somevoxelvirtualdesktopglobals.numberOfObjectInHeight; y++)
                            {
                                for (int z = 0; z < somevoxelvirtualdesktopglobals.numberOfObjectInDepth; z++)
                                {
                                    int c = x + somevoxelvirtualdesktopglobals.numberOfObjectInWidth * (y + somevoxelvirtualdesktopglobals.numberOfObjectInHeight * z);

                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].switchForRender == 1)
                                    {

                                    }
                                    else
                                    {
                                        for (int xx = 0; xx < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth; xx++)
                                        {
                                            for (int yy = 0; yy < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight; yy++)
                                            {
                                                for (int zz = 0; zz < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth; zz++)
                                                {
                                                    int cc = xx + somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * (yy + somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * zz);

                                                    //if (sc_menu_scroller == 2 && somechunkplayerspatiallocationresetcounter < somevoxelvirtualdesktopw * somevoxelvirtualdesktoph * somevoxelvirtualdesktopd * somevoxelvirtualdesktopglobals.numberOfObjectInWidth * somevoxelvirtualdesktopglobals.numberOfObjectInHeight * somevoxelvirtualdesktopglobals.numberOfObjectInDepth * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth && resetvoxelladdercounter == 1)

                                                    if (sc_menu_scroller == 2 && resetvoxelladdercounter == 1)
                                                    {
                                                        //Program.MessageBox((IntPtr)0, "menu option 3" , "sccs", 0);
                                                        //Program.MessageBox((IntPtr)0, "menu option 2", "sccs", 0);

                                                        int voxelchunkinvertoption = -1; // Program.usetypeofvoxel;

                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].somechunk[cc].resetmap(out m11, out m12, out m13, out m14, out m21, out m22, out m23, out m24, out m31, out m32, out m33, out m34, out m41, out m42, out m43, out m44, -1, voxelchunkinvertoption);
                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].somechunk[cc].setnewmap(out m11, out m12, out m13, out m14, out m21, out m22, out m23, out m24, out m31, out m32, out m33, out m34, out m41, out m42, out m43, out m44, -1, voxelchunkinvertoption); //

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].somechunk[cc].resetmap(out m11, out m12, out m13, out m14, out m21, out m22, out m23, out m24, out m31, out m32, out m33, out m34, out m41, out m42, out m43, out m44, -1, voxelchunkinvertoption
                                                        , out m11b, out m12b, out m13b, out m14b, out m21b, out m22b, out m23b, out m24b, out m31b, out m32b, out m33b, out m34b, out m41b, out m42b, out m43b, out m44b,
                                                    out m11c, out m12c, out m13c, out m14c, out m21c, out m22c, out m23c, out m24c, out m31c, out m32c, out m33c, out m34c, out m41c, out m42c, out m43c, out m44c,
                                                    out m11d, out m12d, out m13d, out m14d, out m21d, out m22d, out m23d, out m24d, out m31d, out m32d, out m33d, out m34d, out m41d, out m42d, out m43d, out m44d
);




                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M11 = (float)m11;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M12 = (float)m12;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M13 = (float)m13;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M14 = (float)m14;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M21 = (float)m21;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M22 = (float)m22;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M23 = (float)m23;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M24 = (float)m24;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M31 = (float)m31;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M32 = (float)m32;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M33 = (float)m33;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M34 = (float)m34;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M41 = (float)m41;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M42 = (float)m42;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M43 = (float)m43;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M44 = (float)m44;





                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M11 = (float)m11b;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M12 = (float)m12b;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M13 = (float)m13b;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M14 = (float)m14b;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M21 = (float)m21b;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M22 = (float)m22b;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M23 = (float)m23b;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M24 = (float)m24b;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M31 = (float)m31b;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M32 = (float)m32b;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M33 = (float)m33b;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M34 = (float)m34b;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M41 = (float)m41b;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M42 = (float)m42b;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M43 = (float)m43b;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M44 = (float)m44b;






                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M11 = (float)m11c;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M12 = (float)m12c;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M13 = (float)m13c;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M14 = (float)m14c;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M21 = (float)m21c;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M22 = (float)m22c;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M23 = (float)m23c;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M24 = (float)m24c;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M31 = (float)m31c;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M32 = (float)m32c;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M33 = (float)m33c;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M34 = (float)m34c;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M41 = (float)m41c;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M42 = (float)m42c;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M43 = (float)m43c;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M44 = (float)m44c;





                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M11 = (float)m11d;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M12 = (float)m12d;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M13 = (float)m13d;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M14 = (float)m14d;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M21 = (float)m21d;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M22 = (float)m22d;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M23 = (float)m23d;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M24 = (float)m24d;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M31 = (float)m31d;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M32 = (float)m32d;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M33 = (float)m33d;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M34 = (float)m34d;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M41 = (float)m41d;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M42 = (float)m42d;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M43 = (float)m43d;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M44 = (float)m44d;
                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].copytobuffer = 1;


                                                    }
                                                }
                                            }
                                        }





                                    }
                                }
                            }
                        }
                    }
                }
            }
            somechunkplayerspatiallocationresetcounter++;



            for (int xxxx = 0; xxxx < somevoxelvirtualdesktopw; xxxx++)
            {
                for (int yyyy = 0; yyyy < somevoxelvirtualdesktoph; yyyy++)
                {
                    for (int zzzz = 0; zzzz < somevoxelvirtualdesktopd; zzzz++)
                    {
                        var somevoxelvirtualdesktopindex = xxxx + somevoxelvirtualdesktopw * (yyyy + somevoxelvirtualdesktoph * zzzz);

                        for (int x = 0; x < somevoxelvirtualdesktopglobals.numberOfObjectInWidth; x++)
                        {
                            for (int y = 0; y < somevoxelvirtualdesktopglobals.numberOfObjectInHeight; y++)
                            {
                                for (int z = 0; z < somevoxelvirtualdesktopglobals.numberOfObjectInDepth; z++)
                                {
                                    int c = x + somevoxelvirtualdesktopglobals.numberOfObjectInWidth * (y + somevoxelvirtualdesktopglobals.numberOfObjectInHeight * z);

                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].switchForRender == 1)
                                    {

                                    }
                                    else
                                    {
                                        for (int xx = 0; xx < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth; xx++)
                                        {
                                            for (int yy = 0; yy < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight; yy++)
                                            {
                                                for (int zz = 0; zz < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth; zz++)
                                                {
                                                    int cc = xx + somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * (yy + somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * zz);

                                                    //if (sc_menu_scroller == 2 && somechunkplayerspatiallocationresetcounter >= somevoxelvirtualdesktopw * somevoxelvirtualdesktoph * somevoxelvirtualdesktopd * somevoxelvirtualdesktopglobals.numberOfObjectInWidth * somevoxelvirtualdesktopglobals.numberOfObjectInHeight * somevoxelvirtualdesktopglobals.numberOfObjectInDepth * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth && resetvoxelladdercounter == 2)

                                                    if (sc_menu_scroller == 2 && resetvoxelladdercounter == 1)
                                                    {
                                                        //Program.MessageBox((IntPtr)0, "menu option 2 again" , "sccs", 0);

                                                        int voxelchunkinvertoption = Program.usetypeofvoxel;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].copytobuffer = 1;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].switchForRender = 1;
                                                        somechunkplayerspatiallocationresetcounter = 0;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            resetvoxelladdercounter = 1;*/
            //VIRTUAL DESKTOP VOXEL MESH BREAKING BUFFER MAP RESET
            //VIRTUAL DESKTOP VOXEL MESH BREAKING BUFFER MAP RESET
            //VIRTUAL DESKTOP VOXEL MESH BREAKING BUFFER MAP RESET


            if (somevoxelvirtualdesktopglobals != null)
            {


                for (int xxxx = 0; xxxx < somevoxelvirtualdesktopw; xxxx++)
                {
                    for (int yyyy = 0; yyyy < somevoxelvirtualdesktoph; yyyy++)
                    {
                        for (int zzzz = 0; zzzz < somevoxelvirtualdesktopd; zzzz++)
                        {
                            var somevoxelvirtualdesktopindex = xxxx + somevoxelvirtualdesktopw * (yyyy + somevoxelvirtualdesktoph * zzzz);

                            for (int x = 0; x < somevoxelvirtualdesktopglobals.numberOfObjectInWidth; x++)
                            {
                                for (int y = 0; y < somevoxelvirtualdesktopglobals.numberOfObjectInHeight; y++)
                                {
                                    for (int z = 0; z < somevoxelvirtualdesktopglobals.numberOfObjectInDepth; z++)
                                    {
                                        int c = x + somevoxelvirtualdesktopglobals.numberOfObjectInWidth * (y + somevoxelvirtualdesktopglobals.numberOfObjectInHeight * z);

                                        if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].switchForRender == 1)
                                        {
                                            for (int xx = 0; xx < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth; xx++)
                                            {
                                                for (int yy = 0; yy < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight; yy++)
                                                {
                                                    for (int zz = 0; zz < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth; zz++)
                                                    {
                                                        int cc = xx + somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * (yy + somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * zz);
                                                        //TO READD
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M11;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M12 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M12;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M13 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M13;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M14 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M14;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M21 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M21;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M22 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M22;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M23 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M23;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M24 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M24;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M31 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M31;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M32 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M32;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M33 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M33;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M34 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M34;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M41 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M41;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M42 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M42;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M43 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M43;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M44 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M44;




                                                        //TO READD
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M11 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M11;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M12 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M12;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M13 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M13;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M14 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M14;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M21 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M21;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M22 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M22;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M23 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M23;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M24 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M24;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M31 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M31;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M32 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M32;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M33 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M33;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M34 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M34;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M41 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M41;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M42 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M42;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M43 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M43;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M44 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M44;






                                                        //TO READD
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M11 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M11;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M12 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M12;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M13 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M13;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M14 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M14;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M21 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M21;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M22 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M22;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M23 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M23;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M24 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M24;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M31 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M31;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M32 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M32;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M33 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M33;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M34 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M34;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M41 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M41;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M42 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M42;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M43 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M43;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M44 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M44;




                                                        //TO READD
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M11 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M11;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M12 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M12;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M13 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M13;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M14 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M14;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M21 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M21;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M22 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M22;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M23 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M23;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M24 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M24;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M31 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M31;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M32 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M32;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M33 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M33;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M34 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M34;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M41 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M41;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M42 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M42;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M43 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M43;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M44 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M44;

                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            for (int xx = 0; xx < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth; xx++)
                                            {
                                                for (int yy = 0; yy < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight; yy++)
                                                {
                                                    for (int zz = 0; zz < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth; zz++)
                                                    {
                                                        int cc = xx + somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * (yy + somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * zz);
                                                        //TO READD
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M11;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M12 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M12;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M13 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M13;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M14 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M14;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M21 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M21;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M22 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M22;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M23 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M23;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M24 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M24;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M31 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M31;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M32 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M32;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M33 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M33;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M34 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M34;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M41 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M41;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M42 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M42;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M43 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M43;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M44 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M44;




                                                        //TO READD
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M11 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M11;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M12 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M12;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M13 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M13;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M14 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M14;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M21 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M21;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M22 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M22;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M23 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M23;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M24 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M24;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M31 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M31;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M32 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M32;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M33 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M33;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M34 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M34;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M41 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M41;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M42 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M42;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M43 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M43;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M44 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M44;






                                                        //TO READD
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M11 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M11;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M12 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M12;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M13 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M13;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M14 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M14;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M21 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M21;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M22 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M22;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M23 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M23;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M24 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M24;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M31 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M31;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M32 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M32;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M33 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M33;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M34 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M34;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M41 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M41;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M42 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M42;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M43 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M43;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M44 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M44;




                                                        //TO READD
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M11 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M11;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M12 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M12;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M13 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M13;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M14 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M14;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M21 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M21;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M22 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M22;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M23 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M23;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M24 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M24;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M31 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M31;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M32 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M32;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M33 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M33;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M34 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M34;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M41 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M41;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M42 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M42;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M43 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M43;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M44 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M44;

                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

            }
            hasfinishedloop = 1;

            //VOXEL VIRTUAL DESKTOP
            //VOXEL VIRTUAL DESKTOP
            //VOXEL VIRTUAL DESKTOP
            return _sc_jitter_tasks;
        }



        public scmessageobjectjitter[][] sccswriteheightmapstoarraybuffers(scmessageobjectjitter[][] scjittertasks)
        {



            if (somevoxelvirtualdesktopglobals != null)
            {


                if (activatevrheightmapfeature == 1)
                {

                    int dirtyareasfound = 0;



                    //Console.WriteLine("heightmaps: " + framecounterheightmaps);
                    framecounterheightmaps++;
                    //sccs.scgraphics.scupdate.screencaptureframe.frameByteArray;
                    var somebytearray = _sc_jitter_tasks[0][0].frameByteArray;

                    divxadd = 0;
                    divyadd = 0;

                    //var pixw = (resw / somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth) * pixnum; // 384 pixels per instance in width // 32 pixels per chunk
                    //var pixh = (resh / somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight) * pixnum; // 432 pixels per instance in height // 32 pixels per chunk

                    //divx = pixw;
                    //divy = pixh;

                    //var source_rect = new System.Drawing.Rectangle(0, 0, pixw, pixh);

                    //int wid = pixw / pixnum; //96 pixels per byte
                    //int hgt = pixh / pixnum; //108 pixels per byte

                    //int num_rows = pixnum;// pixnum;
                    //int num_cols = pixnum;// pixnum;

                    //int xrowpix = 0;
                    //int ycolpix = 0;


                    //VOXEL VIRTUAL DESKTOP
                    //VOXEL VIRTUAL DESKTOP
                    //VOXEL VIRTUAL DESKTOP
                    try
                    {


                        for (int xxx = 0; xxx < somevoxelvirtualdesktopw; xxx++)
                        {
                            for (int yyy = 0; yyy < somevoxelvirtualdesktoph; yyy++)
                            {
                                for (int zzz = 0; zzz < somevoxelvirtualdesktopd; zzz++)
                                {
                                    //somechunkmesh
                                    var somevoxelvirtualdesktopindex = xxx + somevoxelvirtualdesktopw * (yyy + somevoxelvirtualdesktoph * zzz);


                                    if (somevoxelvirtualdesktop != null && Program.exitedprogram != 1)
                                    {
                                        if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex] != null)
                                        {
                                            if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh != null)
                                            {

                                                for (int x = 0; x < somevoxelvirtualdesktopglobals.numberOfObjectInWidth; x++)
                                                {
                                                    for (int y = 0; y < somevoxelvirtualdesktopglobals.numberOfObjectInHeight; y++)
                                                    {
                                                        for (int z = 0; z < somevoxelvirtualdesktopglobals.numberOfObjectInDepth; z++)
                                                        {
                                                            int c = x + somevoxelvirtualdesktopglobals.numberOfObjectInWidth * (y + somevoxelvirtualdesktopglobals.numberOfObjectInHeight * z);


                                                            if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c] != null)
                                                            {
                                                                if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].arrayofzeromeshinstances != null)
                                                                {

                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 0;
                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 0;
                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 0;
                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 0;



                                                                    /*for (int xx = 0; xx < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth; xx++)
                                                                    {
                                                                        for (int yy = 0; yy < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight; yy++)
                                                                        {
                                                                            for (int zz = 0; zz < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth; zz++)
                                                                            {
                                                                                int cc = xx + somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * (yy + somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * zz);


                                                                                if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].arrayofzeromeshinstances[cc] != null)
                                                                                {



                                                                                    Matrix worldMatrixChunkDroneInstance = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].arrayofzeromeshinstances[cc].current_pos;

                                                                                    Matrix worldMatrixmain = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].worldmatofobj;


                                                                                    Quaternion _testQuator;



                                                                                    //RASTERTEK BILLBOARDING EXAMPLE
                                                                                    // Calculate the rotation that needs to be applied to the billboard model to face the current camera position using the arc tangent function.
                                                                                   // double angle = Math.Atan2(modelPosition.X - cameraPosition.X, modelPosition.Z - cameraPosition.Z) * (180.0f / Math.PI);
                                                                                    // Convert rotation into radians.
                                                                                    //float rotation = (float)angle * 0.0174532925f;
                                                                                    // Setup the rotation the billboard at the origin using the world matrix.
                                                                                    //Matrix.RotationY(rotation, out worldMatrix);
                                                                                    // Setup the translation matrix from the billboard model.
                                                                                    //Matrix translationMatrix = Matrix.Translation(modelPosition.X, modelPosition.Y, modelPosition.Z);
                                                                                    // Finally combine the rotation and translation matrices to create the final world matrix for the billboard model.
                                                                                    //Matrix.Multiply(ref worldMatrix, ref translationMatrix, out worldMatrix);


                                                                                    /*
                                                                                    Matrix worldMatrix;
                                                                                    //RASTERTEK BILLBOARDING EXAMPLE
                                                                                    // Calculate the rotation that needs to be applied to the billboard model to face the current camera position using the arc tangent function.
                                                                                    double angle = Math.Atan2(worldMatrixChunkDroneInstance.M41 - sccs.scgraphics.scupdate.viewPosition.X, worldMatrixChunkDroneInstance.M43 - sccs.scgraphics.scupdate.viewPosition.Z) * (180.0f / Math.PI);
                                                                                    // Convert rotation into radians.
                                                                                    float rotation = (float)angle * 0.0174532925f;
                                                                                    // Setup the rotation the billboard at the origin using the world matrix.
                                                                                    Matrix.RotationY(rotation, out worldMatrix);
                                                                                    // Setup the translation matrix from the billboard model.
                                                                                    Matrix translationMatrix = Matrix.Translation(worldMatrixChunkDroneInstance.M41, worldMatrixChunkDroneInstance.M42, worldMatrixChunkDroneInstance.M43);
                                                                                    // Finally combine the rotation and translation matrices to create the final world matrix for the billboard model.
                                                                                    Matrix.Multiply(ref worldMatrix, ref translationMatrix, out worldMatrix);

                                                                                    //worldMatrixChunkDroneInstance = worldMatrix;
                                                                                    //worldMatrixChunkDroneInstance = worldMatrixChunkDroneInstance * somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].worldmatofobj;

                                                                                    //TOREADD
                                                                                    //TOREADD
                                                                                    //TOREADD
                                                                                    Quaternion.RotationMatrix(ref worldMatrixChunkDroneInstance, out _testQuator);
                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataFORWARD != null)
                                                                                    {
                                                                                        var dirInstanceForward = sc_maths._newgetdirforward(_testQuator);
                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataFORWARD[cc].instancePos.X = dirInstanceForward.X;
                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataFORWARD[cc].instancePos.Y = dirInstanceForward.Y;
                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataFORWARD[cc].instancePos.Z = dirInstanceForward.Z;
                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataFORWARD[cc].instancePos.W = 1;
                                                                                    }
                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataRIGHT != null)
                                                                                    {
                                                                                        //Quaternion.RotationMatrix(ref tempmat0, out quat_buffers);
                                                                                        var dirInstanceRight = -sc_maths._newgetdirleft(_testQuator);
                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataRIGHT[cc].instancePos.X = dirInstanceRight.X;
                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataRIGHT[cc].instancePos.Y = dirInstanceRight.Y;
                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataRIGHT[cc].instancePos.Z = dirInstanceRight.Z;
                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataRIGHT[cc].instancePos.W = 1;
                                                                                    }
                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataUP != null)
                                                                                    {
                                                                                        //Quaternion.RotationMatrix(ref tempmat0, out quat_buffers);    
                                                                                        var dirInstanceUp = sc_maths._newgetdirup(_testQuator);
                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataUP[cc].instancePos.X = dirInstanceUp.X;
                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataUP[cc].instancePos.Y = dirInstanceUp.Y;
                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataUP[cc].instancePos.Z = dirInstanceUp.Z;
                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataUP[cc].instancePos.W = 1;
                                                                                    }
                                                                                    //TOREADD
                                                                                    //TOREADD
                                                                                    //TOREADD
                                                                                }

                                                                            }
                                                                        }
                                                                    }*/

                                                                    //if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].copytobuffer == 1)
                                                                    {


                                                                        /*
                                                                        float staticPlaneSize = somevoxelvirtualdesktopglobals.planeSize;
                                                                        float planeSize0 = somevoxelvirtualdesktopglobals.planeSize;
                                                                        float alternateStaticPlaneSize = 0;

                                                                        if (staticPlaneSize == 1)
                                                                        {
                                                                            staticPlaneSize = planeSize0 * 0.1f;
                                                                            alternateStaticPlaneSize = planeSize0 * 0.1f;
                                                                        }
                                                                        else if (staticPlaneSize == 0.1f)
                                                                        {
                                                                            staticPlaneSize = planeSize0;
                                                                            alternateStaticPlaneSize = planeSize0 * 10;
                                                                        }
                                                                        else if (staticPlaneSize == 0.01f)
                                                                        {
                                                                            staticPlaneSize = planeSize0;
                                                                            alternateStaticPlaneSize = planeSize0 * 1000;
                                                                        }


                                                                        for (int xx = 0; xx < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth; xx++)
                                                                        {
                                                                            //Program.MessageBox((IntPtr)0, "" + noiseXZ, "sccs", 0);

                                                                            for (int yy = 0; yy < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight; yy++)
                                                                            {
                                                                                for (int zz = 0; zz < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth; zz++)
                                                                                {

                                                                                    float seed = (float)sc_maths.getSomeRandNum(3420, 9999999); //3420;

                                                                                    int cc = xx + somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * (yy + somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * zz);

                                                                                    var somecountermax = (float)Math.Abs((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.W - (float)Math.Floor(somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.W)) * 10); // 1000

                                                                                    float noiseXZ = 100;
                                                                                    float noiseYZ = 100;
                                                                                    float noiseXY = 100;

                                                                                    float detailScale1 = 7;
                                                                                    float heightScale1 = 5;

                                                                                    fastNoise = new FastNoise();

                                                                                    noiseXZ *= (fastNoise.GetNoise((x * planeSize0 + somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.X + seed) / detailScale1, (z * planeSize0 + somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.Z + seed) / detailScale1) * heightScale1);
                                                                                    float size0 = (1 / planeSize0) * somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.Y;
                                                                                    noiseXZ -= size0;

                                                                                    //Program.MessageBox((IntPtr)0, "c:" + somecountermax, "sccs error", 0);
                                                                                    noiseYZ *= (fastNoise.GetNoise((y * planeSize0 + somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.Y + seed) / detailScale1, (z * planeSize0 + somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.Z + seed) / detailScale1) * heightScale1);
                                                                                    float size1 = (1 / planeSize0) * somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.X;
                                                                                    noiseYZ -= size1;


                                                                                    noiseXY *= (fastNoise.GetNoise((x * planeSize0 + somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.X + seed) / detailScale1, (y * planeSize0 + somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.Y + seed) / detailScale1) * heightScale1);
                                                                                    float size2 = (1 / planeSize0) * somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.Z;
                                                                                    noiseXY -= size2;

                                                                                    //TOREADD FOR NOISE TEST ON COLOR

                                                                                    //noiseXZ *= fastNoise.GetNoise((((x * staticPlaneSize) + (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.X * alternateStaticPlaneSize) + seed) / _detailScale) * _HeightScale, (((y * staticPlaneSize) + (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.Y * alternateStaticPlaneSize) + seed) / _detailScale) * _HeightScale, (((z * staticPlaneSize) + (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.Z * alternateStaticPlaneSize) + seed) / _detailScale) * _HeightScale);

                                                                                    float someclampednoisexz = sc_maths.ClampValue(0.55f + (1 * noiseXZ), 0.35f, 0.75f);
                                                                                    float someclampednoiseyz = sc_maths.ClampValue(0.55f + (1 * noiseYZ), 0.35f, 0.75f);
                                                                                    float someclampednoisexy = sc_maths.ClampValue(0.55f + (1 * noiseXY), 0.35f, 0.75f);

                                                                                    //Program.MessageBox((IntPtr)0, "someclampednoisexz:" + someclampednoisexz + "/someclampednoiseyz:" + someclampednoiseyz + "/someclampednoisexy:" + someclampednoisexy, "sccs", 0);
                                                                                    //Program.MessageBox((IntPtr)0, "noiseXZ:" + noiseXZ + "/noiseYZ:" + noiseYZ + "/noiseXY:" + noiseXY, "sccs", 0);

                                                                                    //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.X =Math.Abs(0.15f + noiseXZ);// someclampednoisexz;
                                                                                    //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.Y = Math.Abs(0.25f + noiseYZ);// someclampednoiseyz;
                                                                                    //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.Z = Math.Abs(0.15f + noiseXY);// someclampednoisexy;

                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.X = 0.35f + Math.Abs(someclampednoisexz);
                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.Y = 0.35f + Math.Abs(someclampednoiseyz);
                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.Z = 0.35f + Math.Abs(someclampednoisexy);

                                                                                    //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.W = 1.0f;

                                                                                    //this can be swapped with heightmaps values with some modifications here and there to bring bytes within a range of 0 to 255 rgba values or from within a range of 0.0f to 1.0f values.
                                                                                    if (Math.Truncate(somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.W) >= somecountermax)
                                                                                    {

                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.W = 0 + somecountermax * 0.001f;
                                                                                    }
                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.W += 1f;

                                                                                    //TOREADD FOR NOISE TEST ON COLOR

                                                                                    //this can be swapped with heightmaps values with some modifications here and there to bring bytes within a range of 0 to 255 rgba values or from within a range of 0.0f to 1.0f values.
                                                                                }
                                                                            }
                                                                        }*/



                                                                        swtchy = 0;
                                                                        swtchx = 0;
                                                                        swtchz = 0;

                                                                        xx = 0;
                                                                        yy = 0;
                                                                        zz = 0;

                                                                        //int xi = 0;
                                                                        //int yi = 0;
                                                                        //int zi = 0;

                                                                        totalsize = somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth;
                                                                        //int t = 0;

                                                                        for (int t = 0; t < totalsize;)
                                                                        {

                                                                            if (t < totalsize)
                                                                            {
                                                                                //zi = (depth - 1) - zi;

                                                                                //var indexx = xx + (somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth) * (yy + (somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight) * zz);
                                                                                int cc = xx + somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * (yy + somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * zz);

                                                                                if (cc < totalsize)
                                                                                {
                                                                                    if (!float.IsNaN(somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M41))
                                                                                    {


                                                                                        //Matrix worldMatrixChunkDroneInstance = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].arrayofzeromeshinstances[cc].current_pos;
                                                                                        //Quaternion _testQuator;

                                                                                        //int maxval = somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth - 1;

                                                                                        //var normz = sc_maths.LimitInclusiveInt(zz, 0, maxval);//(somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth - 1) - 
                                                                                        //Program.MessageBox((IntPtr)0, normz + "", "sccs message", 0);
                                                                                        //var somebyteindex0 = 0;// (0 * wid) + 0;

                                                                                        //var bpix = 0;// _sc_jitter_tasks[0][0].frameByteArray[0 + somebyteindex0];
                                                                                        //var gpix = 1;// _sc_jitter_tasks[0][0].frameByteArray[1 + somebyteindex0];
                                                                                        //var rpix = 2;// _sc_jitter_tasks[0][0].frameByteArray[2 + somebyteindex0];
                                                                                        //var apix = 3;// _sc_jitter_tasks[0][0].frameByteArray[3 + somebyteindex0];



                                                                                        //float somefullbytes = 0;// _sc_jitter_tasks[0][0].frameByteArray[rpix + somebyteindex0];// 11111111.0f;
                                                                                        someemptybytes = 00000000.0f;

                                                                                        //HEIGHTMAPS START ADDED 31ST OCTOBER 2021 WIP
                                                                                        //HEIGHTMAPS START ADDED 31ST OCTOBER 2021 WIP
                                                                                        //HEIGHTMAPS START ADDED 31ST OCTOBER 2021 WIP
                                                                                        //var somepixelsize = 4;
                                                                                        //var someoffset = c;
                                                                                        //var somevalpix = sc_maths.LimitInclusiveInt(_sc_jitter_tasks[0][0].frameByteArray[3 + somebyteindex0], 0, 9);

                                                                                        //Program.MessageBox((IntPtr)0, somevalpix + "", "sccs message", 0);


                                                                                        /*
                                                                                        float seed = (float)sc_maths.getSomeRandNum(3420, 4820); //3420;

                                                                                        float staticPlaneSize = somevoxelvirtualdesktopglobals.planeSize;
                                                                                        float planeSize0 = somevoxelvirtualdesktopglobals.planeSize;
                                                                                        float alternateStaticPlaneSize = 0;

                                                                                        if (staticPlaneSize == 1)
                                                                                        {
                                                                                            staticPlaneSize = planeSize0 * 0.1f;
                                                                                            alternateStaticPlaneSize = planeSize0 * 0.1f;
                                                                                        }
                                                                                        else if (staticPlaneSize == 0.1f)
                                                                                        {
                                                                                            staticPlaneSize = planeSize0;
                                                                                            alternateStaticPlaneSize = planeSize0 * 10;
                                                                                        }
                                                                                        else if (staticPlaneSize == 0.01f)
                                                                                        {
                                                                                            staticPlaneSize = planeSize0;
                                                                                            alternateStaticPlaneSize = planeSize0 * 1000;
                                                                                        }
                                                                                        //var somecountermax = (float)Math.Abs((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].heightmapmatrix[cc].heightmapmat.M14 - (float)Math.Floor(somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.W)) * 10); // 1000
                                                                                        var somecountermax = 1;


                                                                                        float noiseXZ = 100;
                                                                                        float noiseYZ = 100;
                                                                                        float noiseXY = 100;

                                                                                        float detailScale1 = 20; // 7
                                                                                        float heightScale1 = 10; // 5

                                                                                        //fastNoise = new FastNoise();

                                                                                        noiseXZ *= (fastNoise.GetNoise((x * planeSize0 + somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].heightmapmatrix[cc].heightmapmat.M11 + seed) / detailScale1, (z * planeSize0 + somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].heightmapmatrix[cc].heightmapmat.M13 + seed) / detailScale1) * heightScale1);
                                                                                        float size0 = (1 / planeSize0) * somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].heightmapmatrix[cc].heightmapmat.M12;
                                                                                        noiseXZ -= size0;

                                                                                        //Program.MessageBox((IntPtr)0, "c:" + somecountermax, "sccs error", 0);
                                                                                        noiseYZ *= (fastNoise.GetNoise((y * planeSize0 + somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].heightmapmatrix[cc].heightmapmat.M12 + seed) / detailScale1, (z * planeSize0 + somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].heightmapmatrix[cc].heightmapmat.M13 + seed) / detailScale1) * heightScale1);
                                                                                        float size1 = (1 / planeSize0) * somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].heightmapmatrix[cc].heightmapmat.M11;
                                                                                        noiseYZ -= size1;


                                                                                        noiseXY *= (fastNoise.GetNoise((x * planeSize0 + somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].heightmapmatrix[cc].heightmapmat.M11 + seed) / detailScale1, (y * planeSize0 + somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].heightmapmatrix[cc].heightmapmat.M12 + seed) / detailScale1) * heightScale1);
                                                                                        float size2 = (1 / planeSize0) * somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].heightmapmatrix[cc].heightmapmat.M13;
                                                                                        noiseXY -= size2;
                                                                                        */
                                                                                        //TOREADD FOR NOISE TEST ON COLOR

                                                                                        //noiseXZ *= fastNoise.GetNoise((((x * staticPlaneSize) + (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.X * alternateStaticPlaneSize) + seed) / _detailScale) * _HeightScale, (((y * staticPlaneSize) + (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.Y * alternateStaticPlaneSize) + seed) / _detailScale) * _HeightScale, (((z * staticPlaneSize) + (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].colorsNFaces[cc].colorsNFaces.Z * alternateStaticPlaneSize) + seed) / _detailScale) * _HeightScale);

                                                                                        //float someclampednoisexz = 1;// sc_maths.ClampValue(0.55f + (1 * noiseXZ), 0.35f, 0.75f);
                                                                                        //float someclampednoiseyz = 1;// sc_maths.ClampValue(0.55f + (1 * noiseYZ), 0.35f, 0.75f);
                                                                                        //float someclampednoisexy = 1;// sc_maths.ClampValue(0.55f + (1 * noiseXY), 0.35f, 0.75f);





                                                                                        /*
                                                                                        if (divxadd >= 1920)
                                                                                        {
                                                                                            divxadd = 0;
                                                                                        }

                                                                                        if (divyadd >= 1080)
                                                                                        {
                                                                                            divyadd = 0;
                                                                                        }*/



                                                                                        var somepixelvaly = 1;


                                                                                        //divxadd = xrowpix;
                                                                                        //divyadd = ycolpix;








                                                                                        //var somebytearrayindex = (((somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight - 1) - yy) * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth) + xx;








                                                                                        //use 8 if 240 * 135 and 4*4*1
                                                                                        //use 4 if 480 * 270 and 4*4*1

                                                                                        //use 8 if 240 * 135 and 8*8*1





                                                                                        int xpluszero = 0;
                                                                                        int xplusone = 1;
                                                                                        int xplustwo = 2;
                                                                                        int xplusthree = 3;
                                                                                        int xplusfour = 4;
                                                                                        int xplusfive = 5;
                                                                                        int xplussix = 6;
                                                                                        int xplusseven = 7;

                                                                                        int ypluszero = 0;
                                                                                        int yplusone = 1;
                                                                                        int yplustwo = 2;
                                                                                        int yplusthree = 3;
                                                                                        int yplusfour = 4;
                                                                                        int yplusfive = 5;
                                                                                        int yplussix = 6;
                                                                                        int yplusseven = 7;


                                                                                        somepixelsize = 4;
                                                                                        somepixelval = 4;
                                                                                        bytePoser = 0;



                                                                                        //ORIGINAL
                                                                                        somemultiplier = somevoxelvirtualdesktopglobals.planeSize * sccsvvdhd.Form1.someform.heightmapvalue * 10.0f; // -25 // -100 // - 1000.0f
                                                                                        //ORIGINAL


                                                                                        //somemultiplier = (float)(Math.Round(somevoxelvirtualdesktopglobals.planeSize * sccsvvdhd.Form1.someform.heightmapvalue * 10.0f * 100000.0f) / 100000.0f); // -25 // -100 // - 1000.0f




                                                                                        //Console.WriteLine("somemultiplier:" + somemultiplier);






                                                                                        someresw = 0;//
                                                                                        someresh = 0;//
                                                                                        someindexmx = 1;
                                                                                        someindexmy = 1;

                                                                                        if (somevoxelvirtualdesktopglobals.tinyChunkWidth == 4 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth == 240 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight == 135)
                                                                                        {
                                                                                            someresw = 1920;//
                                                                                            someresh = 1080;//
                                                                                            divxadd = xx * 8;
                                                                                            divyadd = yy * 8;
                                                                                            if (Program._useOculusRift == 0)
                                                                                            {
                                                                                                divxadd = (1920 - divxadd);
                                                                                            }
                                                                                        }
                                                                                        else if (somevoxelvirtualdesktopglobals.tinyChunkWidth == 8 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth == 128 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight == 72 && somevoxelvirtualdesktopw == 1 && somevoxelvirtualdesktoph == 1)
                                                                                        {
                                                                                            someresw = 1920;//
                                                                                            someresh = 1080;//



                                                                                            /*if (Program._useOculusRift == 1)
                                                                                            {
                                                                                                divxadd = (1920 - divxadd);
                                                                                            }*/

                                                                                            somepixelsize = 4;
                                                                                            somepixelval = 4;

                                                                                            divxadd = (xx * 15);
                                                                                            divyadd = yy * 15;




                                                                                            if (Program._useOculusRift == 1)
                                                                                            {
                                                                                                xpluszero = 8 - 1 - 0;
                                                                                                xplusone = 8 - 1 - 1;
                                                                                                xplustwo = 8 - 1 - 2;
                                                                                                xplusthree = 8 - 1 - 3;
                                                                                                xplusfour = 8 - 1 - 4;
                                                                                                xplusfive = 8 - 1 - 5;
                                                                                                xplussix = 8 - 1 - 6;
                                                                                                xplusseven = 8 - 1 - 7;

                                                                                                divxadd = (1920 - (divxadd));
                                                                                                //divxadd = xx;
                                                                                                //divxadd = (1920 - ((divxadd + 8) - divxadd));
                                                                                            }

                                                                                            else if (Program._useOculusRift == 0)
                                                                                            {

                                                                                                xpluszero = 0;
                                                                                                xplusone = 2;
                                                                                                xplustwo = 4;
                                                                                                xplusthree = 6;
                                                                                                xplusfour = 8;
                                                                                                xplusfive = 10;
                                                                                                xplussix = 12;
                                                                                                xplusseven = 14;


                                                                                                ypluszero = 0;
                                                                                                yplusone = 2;
                                                                                                yplustwo = 4;
                                                                                                yplusthree = 6;
                                                                                                yplusfour = 8;
                                                                                                yplusfive = 10;
                                                                                                yplussix = 12;
                                                                                                yplusseven = 14;



                                                                                                /*xpluszero = 8 - 1 - 0;
                                                                                                xplusone = 8 - 1 - 1;
                                                                                                xplustwo = 8 - 1 - 2;
                                                                                                xplusthree = 8 - 1 - 3;
                                                                                                xplusfour = 8 - 1 - 4;
                                                                                                xplusfive = 8 - 1 - 5;
                                                                                                xplussix = 8 - 1 - 6;
                                                                                                xplusseven = 8 - 1 - 7;*/

                                                                                                /*ypluszero = 8 - 1 - 0;
                                                                                                yplusone = 8 - 1 - 1;
                                                                                                yplustwo = 8 - 1 - 2;
                                                                                                yplusthree = 8 - 1 - 3;
                                                                                                yplusfour = 8 - 1 - 4;
                                                                                                yplusfive = 8 - 1 - 5;
                                                                                                yplussix = 8 - 1 - 6;
                                                                                                yplusseven = 8 - 1 - 7;*/
                                                                                                //divxadd = (1920 - (divxadd));
                                                                                                //divxadd = xx;
                                                                                                //divxadd = ((1920 / 2) - divxadd);







                                                                                            }
                                                                                        }
                                                                                        else if (somevoxelvirtualdesktopglobals.tinyChunkWidth == 16 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth == 128 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight == 72 && somevoxelvirtualdesktopw == 1 && somevoxelvirtualdesktoph == 1)
                                                                                        {
                                                                                            someresw = 1920;//
                                                                                            someresh = 1080;//



                                                                                            /*if (Program._useOculusRift == 1)
                                                                                            {
                                                                                                divxadd = (1920 - divxadd);
                                                                                            }*/

                                                                                            somepixelsize = 4;
                                                                                            somepixelval = 4;

                                                                                            divxadd = (xx * 15);
                                                                                            divyadd = yy * 15;




                                                                                            if (Program._useOculusRift == 1)
                                                                                            {
                                                                                                xpluszero = 8 - 1 - 0;
                                                                                                xplusone = 8 - 1 - 1;
                                                                                                xplustwo = 8 - 1 - 2;
                                                                                                xplusthree = 8 - 1 - 3;
                                                                                                xplusfour = 8 - 1 - 4;
                                                                                                xplusfive = 8 - 1 - 5;
                                                                                                xplussix = 8 - 1 - 6;
                                                                                                xplusseven = 8 - 1 - 7;

                                                                                                divxadd = (1920 - (divxadd));
                                                                                                //divxadd = xx;
                                                                                                //divxadd = (1920 - ((divxadd + 8) - divxadd));
                                                                                            }

                                                                                            else if (Program._useOculusRift == 0)
                                                                                            {
                                                                                                //divxadd = (1920 - (divxadd));
                                                                                                //divxadd = xx;
                                                                                                //divxadd = ((1920 / 2) - divxadd);
                                                                                            }
                                                                                        }
                                                                                        else if (somevoxelvirtualdesktopglobals.tinyChunkWidth == 8 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth == 128 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight == 72 && somevoxelvirtualdesktopw == 2 && somevoxelvirtualdesktoph == 2)
                                                                                        {
                                                                                            somemindexx = xxx;
                                                                                            if (somemindexx == 0)
                                                                                            {
                                                                                                somemindexx = 1;
                                                                                            }
                                                                                            else if (somemindexx == 1)
                                                                                            {
                                                                                                somemindexx = 2;
                                                                                            }

                                                                                            somemindexy = yyy;
                                                                                            if (somemindexy == 0)
                                                                                            {
                                                                                                somemindexy = 1;
                                                                                            }
                                                                                            else if (somemindexy == 1)
                                                                                            {
                                                                                                somemindexy = 2;
                                                                                            }


                                                                                            someresw = (1920 / 2);
                                                                                            someresh = (1080 / 2);

                                                                                            pixelsize = 8;


                                                                                            if (xxx == 0 && yyy == 0)
                                                                                            {
                                                                                                someresw = someresw * somemindexx;
                                                                                                someresh = someresh * somemindexy;

                                                                                                someresw = 1920 / somemindexx;
                                                                                                someresh = 1080 / somemindexy;

                                                                                                divxadd = xx * pixelsize;
                                                                                                divyadd = yy * pixelsize;
                                                                                                if (Program._useOculusRift == 0)
                                                                                                {
                                                                                                    divxadd = (1920 - divxadd);
                                                                                                }
                                                                                            }
                                                                                            else if (xxx == 0 && yyy == 1)
                                                                                            {
                                                                                                someresw = someresw * somemindexx;
                                                                                                someresh = someresh * somemindexy;

                                                                                                someresw = 1920 / somemindexx;
                                                                                                someresh = 1080 / somemindexy;

                                                                                                divxadd = xx * pixelsize;
                                                                                                divyadd = yy * pixelsize;
                                                                                                if (Program._useOculusRift == 0)
                                                                                                {
                                                                                                    divxadd = (1920 - divxadd);
                                                                                                }
                                                                                            }
                                                                                            else if (xxx == 1 && yyy == 0)
                                                                                            {
                                                                                                somemindexy = 2;
                                                                                                someresw = someresw * somemindexx;
                                                                                                someresh = someresh * somemindexy;
                                                                                                //someresh = 1080 - someresh;
                                                                                                divxadd = xx * pixelsize;
                                                                                                divyadd = yy * pixelsize;
                                                                                                //divxadd = (1920 - divxadd);
                                                                                                //divyadd = (1080 - divyadd);
                                                                                                //divyadd = 1080 - divyadd;
                                                                                                /*if (Program._useOculusRift == 0)
                                                                                                {
                                                                                                    divxadd = (1920 - divxadd);
                                                                                                }*/
                                                                                                divxadd = ((1920 / 2) - divxadd);
                                                                                            }
                                                                                            else if (xxx == 1 && yyy == 1)
                                                                                            {
                                                                                                somemindexy = 1;
                                                                                                someresw = someresw * somemindexx;
                                                                                                someresh = someresh * somemindexy;
                                                                                                //someresh = 1080 - someresh;
                                                                                                divxadd = xx * pixelsize;
                                                                                                divyadd = yy * pixelsize;
                                                                                                //divxadd = (1920 - divxadd);

                                                                                                divxadd = ((1920 / 2) - divxadd);

                                                                                                //divyadd = 1080 - divyadd;
                                                                                                //divyadd = (1080 - divyadd);
                                                                                                /*if (Program._useOculusRift == 0)
                                                                                                {
                                                                                                    divxadd = (1920 - divxadd);
                                                                                                }*/
                                                                                            }
                                                                                        }
                                                                                        else if (somevoxelvirtualdesktopglobals.tinyChunkWidth == 4 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth == 480 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight == 270)
                                                                                        {
                                                                                            someresw = 1920;//
                                                                                            someresh = 1080;//
                                                                                            divxadd = xx * 4;
                                                                                            divyadd = yy * 4;
                                                                                            if (Program._useOculusRift == 0)
                                                                                            {
                                                                                                divxadd = (1920 - divxadd);
                                                                                            }
                                                                                        }
                                                                                        else if (somevoxelvirtualdesktopglobals.tinyChunkWidth == 8 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth == 240 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight == 135 && somevoxelvirtualdesktopw == 1 && somevoxelvirtualdesktoph == 1)
                                                                                        {
                                                                                            someresw = 1920;//
                                                                                            someresh = 1080;//



                                                                                            /*if (Program._useOculusRift == 1)
                                                                                            {
                                                                                                divxadd = (1920 - divxadd);
                                                                                            }*/
                                                                                            divxadd = (xx * 8);
                                                                                            divyadd = yy * 8;




                                                                                            if (Program._useOculusRift == 1)
                                                                                            {
                                                                                                xpluszero = 8 - 1 - 0;
                                                                                                xplusone = 8 - 1 - 1;
                                                                                                xplustwo = 8 - 1 - 2;
                                                                                                xplusthree = 8 - 1 - 3;
                                                                                                xplusfour = 8 - 1 - 4;
                                                                                                xplusfive = 8 - 1 - 5;
                                                                                                xplussix = 8 - 1 - 6;
                                                                                                xplusseven = 8 - 1 - 7;

                                                                                                divxadd = (1920 - (divxadd));
                                                                                                //divxadd = xx;
                                                                                                //divxadd = (1920 - ((divxadd + 8) - divxadd));
                                                                                            }

                                                                                            else if (Program._useOculusRift == 0)
                                                                                            {
                                                                                                //divxadd = (1920 - (divxadd));
                                                                                                //divxadd = xx;
                                                                                                //divxadd = ((1920 / 2) - divxadd);
                                                                                            }

                                                                                        }
                                                                                        else if (somevoxelvirtualdesktopglobals.tinyChunkWidth == 8 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth == 240 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight == 135 && somevoxelvirtualdesktopw == 2 && somevoxelvirtualdesktoph == 2)
                                                                                        {
                                                                                            somemindexx = xxx;
                                                                                            if (somemindexx == 0)
                                                                                            {
                                                                                                somemindexx = 1;
                                                                                            }
                                                                                            else if (somemindexx == 1)
                                                                                            {
                                                                                                somemindexx = 2;
                                                                                            }

                                                                                            somemindexy = yyy;
                                                                                            if (somemindexy == 0)
                                                                                            {
                                                                                                somemindexy = 1;
                                                                                            }
                                                                                            else if (somemindexy == 1)
                                                                                            {
                                                                                                somemindexy = 2;
                                                                                            }


                                                                                            someresw = (1920 / 2);
                                                                                            someresh = (1080 / 2);

                                                                                            pixelsize = 4;


                                                                                            if (xxx == 0 && yyy == 0)
                                                                                            {



                                                                                                if (Program._useOculusRift == 1)
                                                                                                {
                                                                                                    someresw = someresw * somemindexx;
                                                                                                    someresh = someresh * somemindexy;

                                                                                                    someresw = 1920 / somemindexx;
                                                                                                    someresh = 1080 / somemindexy;

                                                                                                    divxadd = xx * pixelsize;
                                                                                                    divyadd = yy * pixelsize;


                                                                                                    /*xpluszero = 8 - 1 - 0;
                                                                                                    xplusone = 8 - 1 - 1;
                                                                                                    xplustwo = 8 - 1 - 2;
                                                                                                    xplusthree = 8 - 1 - 3;
                                                                                                    xplusfour = 8 - 1 - 4;
                                                                                                    xplusfive = 8 - 1 - 5;
                                                                                                    xplussix = 8 - 1 - 6;
                                                                                                    xplusseven = 8 - 1 - 7;*/

                                                                                                    //divxadd = (1920 - divxadd);
                                                                                                }
                                                                                                else if (Program._useOculusRift == 0)
                                                                                                {


                                                                                                    someresw = someresw * somemindexx;
                                                                                                    someresh = someresh * somemindexy;

                                                                                                    someresw = 1920 / somemindexx;
                                                                                                    someresh = 1080 / somemindexy;

                                                                                                    divxadd = xx * pixelsize;
                                                                                                    divyadd = yy * pixelsize;

                                                                                                    //divxadd = (1920 - divxadd);
                                                                                                }
                                                                                                /*if (Program._useOculusRift == 0)
                                                                                                {
                                                                                                    divxadd = ((1920 / 2) - divxadd);
                                                                                                }*/
                                                                                            }
                                                                                            else if (xxx == 0 && yyy == 1)
                                                                                            {



                                                                                                if (Program._useOculusRift == 1)
                                                                                                {
                                                                                                    someresw = someresw * somemindexx;
                                                                                                    someresh = someresh * somemindexy;

                                                                                                    someresw = 1920 / somemindexx;
                                                                                                    someresh = 1080 / somemindexy;

                                                                                                    divxadd = xx * pixelsize;
                                                                                                    divyadd = yy * pixelsize;

                                                                                                    /*xpluszero = 8 - 1 - 0;
                                                                                                    xplusone = 8 - 1 - 1;
                                                                                                    xplustwo = 8 - 1 - 2;
                                                                                                    xplusthree = 8 - 1 - 3;
                                                                                                    xplusfour = 8 - 1 - 4;
                                                                                                    xplusfive = 8 - 1 - 5;
                                                                                                    xplussix = 8 - 1 - 6;
                                                                                                    xplusseven = 8 - 1 - 7;*/
                                                                                                    //divxadd = (1920 - divxadd);
                                                                                                }
                                                                                                else if (Program._useOculusRift == 0)
                                                                                                {

                                                                                                    someresw = someresw * somemindexx;
                                                                                                    someresh = someresh * somemindexy;

                                                                                                    someresw = 1920 / somemindexx;
                                                                                                    someresh = 1080 / somemindexy;

                                                                                                    divxadd = xx * pixelsize;
                                                                                                    divyadd = yy * pixelsize;

                                                                                                    // divxadd = (1920 - divxadd);
                                                                                                }
                                                                                                /*if (Program._useOculusRift == 0)
                                                                                                {
                                                                                                    divxadd = ((1920 / 2) - divxadd);
                                                                                                }*/
                                                                                            }
                                                                                            else if (xxx == 1 && yyy == 0)
                                                                                            {
                                                                                                //divxadd = (1920 - divxadd);
                                                                                                //divyadd = (1080 - divyadd);
                                                                                                //divyadd = 1080 - divyadd;
                                                                                                /*if (Program._useOculusRift == 0)
                                                                                                {
                                                                                                    divxadd = (1920 - divxadd);
                                                                                                }*/

                                                                                                if (Program._useOculusRift == 1)
                                                                                                {
                                                                                                    somemindexy = 2;
                                                                                                    someresw = someresw * somemindexx;
                                                                                                    someresh = someresh * somemindexy;
                                                                                                    //someresh = 1080 - someresh;
                                                                                                    divxadd = xx * pixelsize;
                                                                                                    divyadd = yy * pixelsize;
                                                                                                    /*xpluszero = 8 - 1 - 0;
                                                                                                    xplusone = 8 - 1 - 1;
                                                                                                    xplustwo = 8 - 1 - 2;
                                                                                                    xplusthree = 8 - 1 - 3;
                                                                                                    xplusfour = 8 - 1 - 4;
                                                                                                    xplusfive = 8 - 1 - 5;
                                                                                                    xplussix = 8 - 1 - 6;
                                                                                                    xplusseven = 8 - 1 - 7;
                                                                                                    divxadd = ((1920 / 2) - divxadd);*/
                                                                                                }
                                                                                                else if (Program._useOculusRift == 0)
                                                                                                {
                                                                                                    /*xpluszero = 8 - 1 - 0;
                                                                                                    xplusone = 8 - 1 - 1;
                                                                                                    xplustwo = 8 - 1 - 2;
                                                                                                    xplusthree = 8 - 1 - 3;
                                                                                                    xplusfour = 8 - 1 - 4;
                                                                                                    xplusfive = 8 - 1 - 5;
                                                                                                    xplussix = 8 - 1 - 6;
                                                                                                    xplusseven = 8 - 1 - 7;

                                                                                                    ypluszero = 8 - 1 - 0;
                                                                                                    yplusone = 8 - 1 - 1;
                                                                                                    yplustwo = 8 - 1 - 2;
                                                                                                    yplusthree = 8 - 1 - 3;
                                                                                                    yplusfour = 8 - 1 - 4;
                                                                                                    yplusfive = 8 - 1 - 5;
                                                                                                    yplussix = 8 - 1 - 6;
                                                                                                    yplusseven = 8 - 1 - 7;*/
                                                                                                    somemindexy = 2;
                                                                                                    someresw = someresw * somemindexx;
                                                                                                    someresh = someresh * somemindexy;
                                                                                                    //someresh = 1080 - someresh;
                                                                                                    divxadd = xx * pixelsize;
                                                                                                    divyadd = yy * pixelsize;

                                                                                                    divxadd = ((1920 / 2) - divxadd);
                                                                                                    divxadd = (1920 - divxadd);
                                                                                                }
                                                                                            }
                                                                                            else if (xxx == 1 && yyy == 1)
                                                                                            {




                                                                                                if (Program._useOculusRift == 1)
                                                                                                {
                                                                                                    somemindexy = 1;
                                                                                                    someresw = someresw * somemindexx;
                                                                                                    someresh = someresh * somemindexy;
                                                                                                    //someresh = 1080 - someresh;
                                                                                                    divxadd = xx * pixelsize;
                                                                                                    divyadd = yy * pixelsize;
                                                                                                    //divxadd = (1920 - divxadd);

                                                                                                    /*xpluszero = 8 - 1 - 0;
                                                                                                    xplusone = 8 - 1 - 1;
                                                                                                    xplustwo = 8 - 1 - 2;
                                                                                                    xplusthree = 8 - 1 - 3;
                                                                                                    xplusfour = 8 - 1 - 4;
                                                                                                    xplusfive = 8 - 1 - 5;
                                                                                                    xplussix = 8 - 1 - 6;
                                                                                                    xplusseven = 8 - 1 - 7;
                                                                                                    divxadd = ((1920 / 2) - divxadd);*/
                                                                                                }
                                                                                                else if (Program._useOculusRift == 0)
                                                                                                {
                                                                                                    /*xpluszero = 8 - 1 - 0;
                                                                                                    xplusone = 8 - 1 - 1;
                                                                                                    xplustwo = 8 - 1 - 2;
                                                                                                    xplusthree = 8 - 1 - 3;
                                                                                                    xplusfour = 8 - 1 - 4;
                                                                                                    xplusfive = 8 - 1 - 5;
                                                                                                    xplussix = 8 - 1 - 6;
                                                                                                    xplusseven = 8 - 1 - 7;

                                                                                                    ypluszero = 8 - 1 - 0;
                                                                                                    yplusone = 8 - 1 - 1;
                                                                                                    yplustwo = 8 - 1 - 2;
                                                                                                    yplusthree = 8 - 1 - 3;
                                                                                                    yplusfour = 8 - 1 - 4;
                                                                                                    yplusfive = 8 - 1 - 5;
                                                                                                    yplussix = 8 - 1 - 6;
                                                                                                    yplusseven = 8 - 1 - 7;*/
                                                                                                    somemindexy = 1;
                                                                                                    someresw = someresw * somemindexx;
                                                                                                    someresh = someresh * somemindexy;
                                                                                                    //someresh = 1080 - someresh;
                                                                                                    divxadd = xx * pixelsize;
                                                                                                    divyadd = yy * pixelsize;
                                                                                                    //divxadd = (1920 - divxadd);

                                                                                                    //
                                                                                                    divxadd = ((1920 / 2) - divxadd);
                                                                                                    divxadd = (1920 - divxadd);
                                                                                                }
                                                                                                //divyadd = 1080 - divyadd;
                                                                                                //divyadd = (1080 - divyadd);
                                                                                                /*if (Program._useOculusRift == 0)
                                                                                                {
                                                                                                    divxadd = (1920 - divxadd);
                                                                                                }*/
                                                                                            }
                                                                                        }
                                                                                        else if (somevoxelvirtualdesktopglobals.tinyChunkWidth == 8 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth == 480 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight == 270 && somevoxelvirtualdesktopw == 1 && somevoxelvirtualdesktoph == 1)
                                                                                        {
                                                                                            someresw = 1920;//
                                                                                            someresh = 1080;//
                                                                                            divxadd = xx * 4;
                                                                                            divyadd = yy * 4;
                                                                                            if (Program._useOculusRift == 0)
                                                                                            {
                                                                                                divxadd = (1920 - divxadd);
                                                                                            }
                                                                                        }
                                                                                        else if (somevoxelvirtualdesktopglobals.tinyChunkWidth == 8 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth == 480 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight == 270 && somevoxelvirtualdesktopw == 2 && somevoxelvirtualdesktoph == 2)
                                                                                        {
                                                                                            somemindexx = xxx;
                                                                                            if (somemindexx == 0)
                                                                                            {
                                                                                                somemindexx = 1;
                                                                                            }
                                                                                            else if (somemindexx == 1)
                                                                                            {
                                                                                                somemindexx = 2;
                                                                                            }

                                                                                            somemindexy = yyy;
                                                                                            if (somemindexy == 0)
                                                                                            {
                                                                                                somemindexy = 1;
                                                                                            }
                                                                                            else if (somemindexy == 1)
                                                                                            {
                                                                                                somemindexy = 2;
                                                                                            }


                                                                                            someresw = (1920 / 2);
                                                                                            someresh = (1080 / 2);

                                                                                            pixelsize = 2;


                                                                                            if (xxx == 0 && yyy == 0)
                                                                                            {
                                                                                                someresw = someresw * somemindexx;
                                                                                                someresh = someresh * somemindexy;

                                                                                                someresw = 1920 / somemindexx;
                                                                                                someresh = 1080 / somemindexy;

                                                                                                divxadd = xx * pixelsize;
                                                                                                divyadd = yy * pixelsize;
                                                                                                if (Program._useOculusRift == 0)
                                                                                                {
                                                                                                    divxadd = (1920 - divxadd);
                                                                                                }
                                                                                            }
                                                                                            else if (xxx == 0 && yyy == 1)
                                                                                            {
                                                                                                someresw = someresw * somemindexx;
                                                                                                someresh = someresh * somemindexy;

                                                                                                someresw = 1920 / somemindexx;
                                                                                                someresh = 1080 / somemindexy;

                                                                                                divxadd = xx * pixelsize;
                                                                                                divyadd = yy * pixelsize;
                                                                                                if (Program._useOculusRift == 0)
                                                                                                {
                                                                                                    divxadd = (1920 - divxadd);
                                                                                                }
                                                                                            }
                                                                                            else if (xxx == 1 && yyy == 0)
                                                                                            {
                                                                                                somemindexy = 2;
                                                                                                someresw = someresw * somemindexx;
                                                                                                someresh = someresh * somemindexy;
                                                                                                //someresh = 1080 - someresh;
                                                                                                divxadd = xx * pixelsize;
                                                                                                divyadd = yy * pixelsize;
                                                                                                //divxadd = (1920 - divxadd);
                                                                                                //divyadd = (1080 - divyadd);
                                                                                                //divyadd = 1080 - divyadd;
                                                                                                /*if (Program._useOculusRift == 0)
                                                                                                {
                                                                                                    divxadd = (1920 - divxadd);
                                                                                                }*/
                                                                                                divxadd = ((1920 / 2) - divxadd);
                                                                                            }
                                                                                            else if (xxx == 1 && yyy == 1)
                                                                                            {
                                                                                                somemindexy = 1;
                                                                                                someresw = someresw * somemindexx;
                                                                                                someresh = someresh * somemindexy;
                                                                                                //someresh = 1080 - someresh;
                                                                                                divxadd = xx * pixelsize;
                                                                                                divyadd = yy * pixelsize;
                                                                                                //divxadd = (1920 - divxadd);

                                                                                                divxadd = ((1920 / 2) - divxadd);

                                                                                                //divyadd = 1080 - divyadd;
                                                                                                //divyadd = (1080 - divyadd);
                                                                                                /*if (Program._useOculusRift == 0)
                                                                                                {
                                                                                                    divxadd = (1920 - divxadd);
                                                                                                }*/
                                                                                            }


                                                                                        }
                                                                                        else if (somevoxelvirtualdesktopglobals.tinyChunkWidth == 16 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth == 120 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight == 72 && somevoxelvirtualdesktopw == 1 && somevoxelvirtualdesktoph == 1)
                                                                                        {
                                                                                            someresw = 1920;//
                                                                                            someresh = 1080;//



                                                                                            /*if (Program._useOculusRift == 1)
                                                                                            {
                                                                                                divxadd = (1920 - divxadd);
                                                                                            }*/

                                                                                            somepixelsize = 4;
                                                                                            somepixelval = 4;

                                                                                            divxadd = (xx * 16);
                                                                                            divyadd = yy * 15;

                                                                                            if (Program._useOculusRift == 1)
                                                                                            {
                                                                                                xpluszero = 8 - 1 - 0;
                                                                                                xplusone = 8 - 1 - 1;
                                                                                                xplustwo = 8 - 1 - 2;
                                                                                                xplusthree = 8 - 1 - 3;
                                                                                                xplusfour = 8 - 1 - 4;
                                                                                                xplusfive = 8 - 1 - 5;
                                                                                                xplussix = 8 - 1 - 6;
                                                                                                xplusseven = 8 - 1 - 7;

                                                                                                divxadd = (1920 - (divxadd));
                                                                                                //divxadd = xx;
                                                                                                //divxadd = (1920 - ((divxadd + 8) - divxadd));
                                                                                            }

                                                                                            else if (Program._useOculusRift == 0)
                                                                                            {
                                                                                                /*xpluszero = 16 - 1 - 0;
                                                                                                xplusone = 16 - 1 - 2;
                                                                                                xplustwo = 16 - 1 - 4;
                                                                                                xplusthree = 16 - 1 - 6;
                                                                                                xplusfour = 16 - 1 - 8;
                                                                                                xplusfive = 16 - 1 - 10;
                                                                                                xplussix = 16 - 1 - 12;
                                                                                                xplusseven = 16 - 1 - 14;

                                                                                                ypluszero = 16 - 1 - 0;
                                                                                                yplusone = 16 - 1 - 2;
                                                                                                yplustwo = 16 - 1 - 4;
                                                                                                yplusthree = 16 - 1 - 6;
                                                                                                yplusfour = 16 - 1 - 8;
                                                                                                yplusfive = 16 - 1 - 10;
                                                                                                yplussix = 16 - 1 - 12;
                                                                                                yplusseven = 16 - 1 - 14;*/

                                                                                                //divxadd = (1920 - (divxadd));
                                                                                                //divxadd = xx;
                                                                                                //divxadd = ((1920 / 2) - divxadd);
                                                                                            }

                                                                                        }
                                                                                        else if (somevoxelvirtualdesktopglobals.tinyChunkWidth == 8 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth == 120 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight == 68 && somevoxelvirtualdesktopw == 1 && somevoxelvirtualdesktoph == 1)
                                                                                        {
                                                                                            someresw = 1920;//
                                                                                            someresh = 1080;//



                                                                                            /*if (Program._useOculusRift == 1)
                                                                                            {
                                                                                                divxadd = (1920 - divxadd);
                                                                                            }*/

                                                                                            somepixelsize = 4;
                                                                                            somepixelval = 4;

                                                                                            divxadd = (xx * 16);
                                                                                            divyadd = yy * 16;




                                                                                            if (Program._useOculusRift == 1)
                                                                                            {
                                                                                                xpluszero = 8 - 1 - 0;
                                                                                                xplusone = 8 - 1 - 1;
                                                                                                xplustwo = 8 - 1 - 2;
                                                                                                xplusthree = 8 - 1 - 3;
                                                                                                xplusfour = 8 - 1 - 4;
                                                                                                xplusfive = 8 - 1 - 5;
                                                                                                xplussix = 8 - 1 - 6;
                                                                                                xplusseven = 8 - 1 - 7;

                                                                                                divxadd = (1920 - (divxadd));
                                                                                                //divxadd = xx;
                                                                                                //divxadd = (1920 - ((divxadd + 8) - divxadd));
                                                                                            }

                                                                                            else if (Program._useOculusRift == 0)
                                                                                            {
                                                                                                //divxadd = (1920 - (divxadd));
                                                                                                //divxadd = xx;
                                                                                                //divxadd = ((1920 / 2) - divxadd);
                                                                                            }

                                                                                        }
                                                                                        else if (somevoxelvirtualdesktopglobals.tinyChunkWidth == 16 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth == 60 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight == 36 && somevoxelvirtualdesktopw == 1 && somevoxelvirtualdesktoph == 1)
                                                                                        {
                                                                                            someresw = 1920;//
                                                                                            someresh = 1080;//



                                                                                            /*if (Program._useOculusRift == 1)
                                                                                            {
                                                                                                divxadd = (1920 - divxadd);
                                                                                            }*/

                                                                                            somepixelsize = 4;
                                                                                            somepixelval = 4;

                                                                                            divxadd = (xx * 16);
                                                                                            divyadd = yy * 16;




                                                                                            if (Program._useOculusRift == 1)
                                                                                            {
                                                                                                xpluszero = 8 - 1 - 0;
                                                                                                xplusone = 8 - 1 - 1;
                                                                                                xplustwo = 8 - 1 - 2;
                                                                                                xplusthree = 8 - 1 - 3;
                                                                                                xplusfour = 8 - 1 - 4;
                                                                                                xplusfive = 8 - 1 - 5;
                                                                                                xplussix = 8 - 1 - 6;
                                                                                                xplusseven = 8 - 1 - 7;

                                                                                                divxadd = (1920 - (divxadd));
                                                                                                //divxadd = xx;
                                                                                                //divxadd = (1920 - ((divxadd + 8) - divxadd));
                                                                                            }

                                                                                            else if (Program._useOculusRift == 0)
                                                                                            {
                                                                                                //divxadd = (1920 - (divxadd));
                                                                                                //divxadd = xx;
                                                                                                //divxadd = ((1920 / 2) - divxadd);
                                                                                            }

                                                                                        }
                                                                                        else if (somevoxelvirtualdesktopglobals.tinyChunkWidth == 8 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth == 64 && somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight == 36 && somevoxelvirtualdesktopw == 2 && somevoxelvirtualdesktoph == 2)
                                                                                        {
                                                                                            someresw = 1920;//
                                                                                            someresh = 1080;//



                                                                                            /*if (Program._useOculusRift == 1)
                                                                                            {
                                                                                                divxadd = (1920 - divxadd);
                                                                                            }*/

                                                                                            somepixelsize = 4;
                                                                                            somepixelval = 4;

                                                                                            divxadd = (xx * 15);
                                                                                            divyadd = yy * 15;




                                                                                            if (Program._useOculusRift == 1)
                                                                                            {
                                                                                                xpluszero = 8 - 1 - 0;
                                                                                                xplusone = 8 - 1 - 1;
                                                                                                xplustwo = 8 - 1 - 2;
                                                                                                xplusthree = 8 - 1 - 3;
                                                                                                xplusfour = 8 - 1 - 4;
                                                                                                xplusfive = 8 - 1 - 5;
                                                                                                xplussix = 8 - 1 - 6;
                                                                                                xplusseven = 8 - 1 - 7;

                                                                                                divxadd = (1920 - (divxadd));
                                                                                                //divxadd = xx;
                                                                                                //divxadd = (1920 - ((divxadd + 8) - divxadd));
                                                                                            }

                                                                                            else if (Program._useOculusRift == 0)
                                                                                            {

                                                                                                xpluszero = 0;
                                                                                                xplusone = 2;
                                                                                                xplustwo = 4;
                                                                                                xplusthree = 6;
                                                                                                xplusfour = 8;
                                                                                                xplusfive = 10;
                                                                                                xplussix = 12;
                                                                                                xplusseven = 14;


                                                                                                ypluszero = 0;
                                                                                                yplusone = 2;
                                                                                                yplustwo = 4;
                                                                                                yplusthree = 6;
                                                                                                yplusfour = 8;
                                                                                                yplusfive = 10;
                                                                                                yplussix = 12;
                                                                                                yplusseven = 14;



                                                                                                /*xpluszero = 8 - 1 - 0;
                                                                                                xplusone = 8 - 1 - 1;
                                                                                                xplustwo = 8 - 1 - 2;
                                                                                                xplusthree = 8 - 1 - 3;
                                                                                                xplusfour = 8 - 1 - 4;
                                                                                                xplusfive = 8 - 1 - 5;
                                                                                                xplussix = 8 - 1 - 6;
                                                                                                xplusseven = 8 - 1 - 7;*/

                                                                                                /*ypluszero = 8 - 1 - 0;
                                                                                                yplusone = 8 - 1 - 1;
                                                                                                yplustwo = 8 - 1 - 2;
                                                                                                yplusthree = 8 - 1 - 3;
                                                                                                yplusfour = 8 - 1 - 4;
                                                                                                yplusfive = 8 - 1 - 5;
                                                                                                yplussix = 8 - 1 - 6;
                                                                                                yplusseven = 8 - 1 - 7;*/
                                                                                                //divxadd = (1920 - (divxadd));
                                                                                                //divxadd = xx;
                                                                                                //divxadd = ((1920 / 2) - divxadd);







                                                                                            }
                                                                                        }






                                                                                        /*
                                                                                        for (int yyyy = divyadd; yyyy < divyadd + divy; yyyy++)
                                                                                        {
                                                                                            for (int xxxx = divxadd; xxxx < divxadd + divx; xxxx++)
                                                                                            {
                                                                                                var bytePoserer = ((yyyy * 1920) + xxxx) * 4;

                                                                                                if (bytePoserer <= 1920 * 1080 * 4)
                                                                                                {
                                                                                                    _sc_jitter_tasks[0][0].frameByteArray[bytePoserer + 0] = 255;
                                                                                                    _sc_jitter_tasks[0][0].frameByteArray[bytePoserer + 1] = 0;
                                                                                                    _sc_jitter_tasks[0][0].frameByteArray[bytePoserer + 2] = 0;
                                                                                                    _sc_jitter_tasks[0][0].frameByteArray[bytePoserer + 3] = 255;
                                                                                                }
                                                                                            }
                                                                                        }*/




                                                                                        /*if (sccsvvdhd.Form1.someform.hasgot0 == 0 &&
                                                                                            sccsvvdhd.Form1.someform.hasgot1 == 0 &&
                                                                                            sccsvvdhd.Form1.someform.hasgot2 == 0 &&
                                                                                            sccsvvdhd.Form1.someform.hasgot3 == 0 &&
                                                                                            sccsvvdhd.Form1.someform.hasgot4 == 0 &&
                                                                                            sccsvvdhd.Form1.someform.hasgot5 == 0 &&
                                                                                            sccsvvdhd.Form1.someform.hasgot6 == 0 &&
                                                                                            sccsvvdhd.Form1.someform.hasgot7 == 0 &&
                                                                                            sccsvvdhd.Form1.someform.hasgot8 == 0 &&
                                                                                            sccsvvdhd.Form1.someform.hasgot9 == 0 &&
                                                                                            sccsvvdhd.Form1.someform.hasgot10 == 0 &&
                                                                                            sccsvvdhd.Form1.someform.hasgot11 == 0)
                                                                                        {
                                                                                            somenoise = 1.0f;
                                                                                        }*/
                                                                                        somenoise = 1.0f;



                                                                                        float someseed = (float)sc_maths.getSomeRandNum(3420, 9999);

                                                                                        float someothernoisex = SimplexNoise.Noise.Generate(xx * someseed);// //somesimplex = new SimplexNoise();
                                                                                        float someothernoisey = SimplexNoise.Noise.Generate(yy * someseed);//
                                                                                        float someothernoisez = SimplexNoise.Noise.Generate(zz * someseed);//






                                                                                        if (sccsvvdhd.Form1.someform.hasgotswtc0 == 1)
                                                                                        {
                                                                                            if (sccsvvdhd.Form1.someform.hasgot0 == 1)
                                                                                            {
                                                                                                noisehasgot0 = somefastnoise.GetCellular(someothernoisex, someothernoisey, someothernoisez);
                                                                                                if (addmulsub == 0)
                                                                                                {
                                                                                                    somenoise += noisehasgot0;
                                                                                                }
                                                                                                else if (addmulsub == 1)
                                                                                                {
                                                                                                    somenoise *= (1.0f + noisehasgot0);
                                                                                                }
                                                                                                else if (addmulsub == 2)
                                                                                                {
                                                                                                    somenoise -= noisehasgot0;
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                //noisehasgot1 = somenoise;
                                                                                            }

                                                                                            if (sccsvvdhd.Form1.currentform.swtccheckbox8 == 1)
                                                                                            {

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                sccsvvdhd.Form1.someform.hasgotswtc0 = 0;
                                                                                            }


                                                                                        }

                                                                                        if (sccsvvdhd.Form1.someform.hasgotswtc1 == 1)
                                                                                        {
                                                                                            if (sccsvvdhd.Form1.someform.hasgot1 == 1)
                                                                                            {
                                                                                                noisehasgot1 = somefastnoise.GetCellular(someothernoisex, someothernoisey, someothernoisez);
                                                                                                if (addmulsub == 0)
                                                                                                {
                                                                                                    somenoise += noisehasgot1;
                                                                                                }
                                                                                                else if (addmulsub == 1)
                                                                                                {
                                                                                                    somenoise *= (1.0f + noisehasgot1);
                                                                                                }
                                                                                                else if (addmulsub == 2)
                                                                                                {
                                                                                                    somenoise -= noisehasgot1;
                                                                                                }
                                                                                                //sccsvvdhd.Form1.someform.hasgot1 = 0;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                //noisehasgot1 = somenoise;
                                                                                            }

                                                                                            if (sccsvvdhd.Form1.currentform.swtccheckbox8 == 1)
                                                                                            {

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                sccsvvdhd.Form1.someform.hasgotswtc1 = 0;
                                                                                            }
                                                                                        }

                                                                                        if (sccsvvdhd.Form1.someform.hasgotswtc2 == 1)
                                                                                        {


                                                                                            if (sccsvvdhd.Form1.someform.hasgot2 == 1)
                                                                                            {
                                                                                                noisehasgot2 = somefastnoise.GetCubic(someothernoisex, someothernoisey, someothernoisez);
                                                                                                if (addmulsub == 0)
                                                                                                {
                                                                                                    somenoise += noisehasgot2;
                                                                                                }
                                                                                                else if (addmulsub == 1)
                                                                                                {
                                                                                                    somenoise *= (1.0f + noisehasgot2);
                                                                                                }
                                                                                                else if (addmulsub == 2)
                                                                                                {
                                                                                                    somenoise -= noisehasgot2;
                                                                                                }
                                                                                            }

                                                                                            if (sccsvvdhd.Form1.currentform.swtccheckbox8 == 1)
                                                                                            {

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                sccsvvdhd.Form1.someform.hasgotswtc2 = 0;
                                                                                            }
                                                                                        }
                                                                                        if (sccsvvdhd.Form1.someform.hasgotswtc3 == 1)
                                                                                        {
                                                                                            if (sccsvvdhd.Form1.someform.hasgot3 == 1)
                                                                                            {
                                                                                                noisehasgot3 = somefastnoise.GetCubicFractal(someothernoisex, someothernoisey, someothernoisez);
                                                                                                if (addmulsub == 0)
                                                                                                {
                                                                                                    somenoise += noisehasgot3;
                                                                                                }
                                                                                                else if (addmulsub == 1)
                                                                                                {
                                                                                                    somenoise *= (1.0f + noisehasgot3);
                                                                                                }
                                                                                                else if (addmulsub == 2)
                                                                                                {
                                                                                                    somenoise -= noisehasgot3;
                                                                                                }
                                                                                            }

                                                                                            if (sccsvvdhd.Form1.currentform.swtccheckbox8 == 1)
                                                                                            {

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                sccsvvdhd.Form1.someform.hasgotswtc3 = 0;
                                                                                            }
                                                                                        }
                                                                                        if (sccsvvdhd.Form1.someform.hasgotswtc4 == 1)
                                                                                        {
                                                                                            if (sccsvvdhd.Form1.someform.hasgot4 == 1)
                                                                                            {
                                                                                                noisehasgot4 = somefastnoise.GetNoise(someothernoisex, someothernoisey, someothernoisez);
                                                                                                if (addmulsub == 0)
                                                                                                {
                                                                                                    somenoise += noisehasgot4;
                                                                                                }
                                                                                                else if (addmulsub == 1)
                                                                                                {
                                                                                                    somenoise *= (1.0f + noisehasgot4);
                                                                                                }
                                                                                                else if (addmulsub == 2)
                                                                                                {
                                                                                                    somenoise -= noisehasgot4;
                                                                                                }
                                                                                            }

                                                                                            if (sccsvvdhd.Form1.currentform.swtccheckbox8 == 1)
                                                                                            {

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                sccsvvdhd.Form1.someform.hasgotswtc4 = 0;
                                                                                            }
                                                                                        }
                                                                                        if (sccsvvdhd.Form1.someform.hasgotswtc5 == 1)
                                                                                        {
                                                                                            if (sccsvvdhd.Form1.someform.hasgot5 == 1)
                                                                                            {
                                                                                                noisehasgot5 = somefastnoise.GetPerlin(someothernoisex, someothernoisey, someothernoisez);
                                                                                                if (addmulsub == 0)
                                                                                                {
                                                                                                    somenoise += noisehasgot5;
                                                                                                }
                                                                                                else if (addmulsub == 1)
                                                                                                {
                                                                                                    somenoise *= (1.0f + noisehasgot5);
                                                                                                }
                                                                                                else if (addmulsub == 2)
                                                                                                {
                                                                                                    somenoise -= noisehasgot5;
                                                                                                }
                                                                                            }

                                                                                            if (sccsvvdhd.Form1.currentform.swtccheckbox8 == 1)
                                                                                            {

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                sccsvvdhd.Form1.someform.hasgotswtc5 = 0;
                                                                                            }
                                                                                        }

                                                                                        //SOMETHING IS WRONG WITH THE SIMPLEX NOISE... I LOSE 3/4 OF THE SCREENCAPTURE.
                                                                                        /*if (sccsvvdhd.Form1.someform.hasgotswtc6 == 1)
                                                                                        {
                                                                                            if (sccsvvdhd.Form1.someform.hasgot6 == 1)
                                                                                            {
                                                                                                somefastnoise = null;
                                                                                                somefastnoise = new FastNoise();
                                                                                                noisehasgot6 = somefastnoise.GetSimplex(someothernoisex, someothernoisey, someothernoisez);
                                                                                                if (addmulsub == 0)
                                                                                                {
                                                                                                    somenoise += noisehasgot6;
                                                                                                }
                                                                                                else if (addmulsub == 1)
                                                                                                {
                                                                                                    somenoise *= (1.0f + noisehasgot6);
                                                                                                }
                                                                                                else if (addmulsub == 2)
                                                                                                {
                                                                                                    somenoise -= noisehasgot6;
                                                                                                }
                                                                                            }

                                                                                            //sccsvvdhd.Form1.someform.hasgotswtc6 = 0;
                                                                                        }*/
                                                                                        if (sccsvvdhd.Form1.someform.hasgotswtc7 == 1)
                                                                                        {
                                                                                            if (sccsvvdhd.Form1.someform.hasgot7 == 1)
                                                                                            {
                                                                                                noisehasgot7 = somefastnoise.GetSimplexFractal(someothernoisex, someothernoisey, someothernoisez);
                                                                                                if (addmulsub == 0)
                                                                                                {
                                                                                                    somenoise += noisehasgot7;
                                                                                                }
                                                                                                else if (addmulsub == 1)
                                                                                                {
                                                                                                    somenoise *= (1.0f + noisehasgot7);
                                                                                                }
                                                                                                else if (addmulsub == 2)
                                                                                                {
                                                                                                    somenoise -= noisehasgot7;
                                                                                                }
                                                                                            }


                                                                                            if (sccsvvdhd.Form1.currentform.swtccheckbox8 == 1)
                                                                                            {

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                sccsvvdhd.Form1.someform.hasgotswtc7 = 0;
                                                                                            }
                                                                                        }
                                                                                        if (sccsvvdhd.Form1.someform.hasgotswtc8 == 1)
                                                                                        {
                                                                                            if (sccsvvdhd.Form1.someform.hasgot8 == 1)
                                                                                            {
                                                                                                noisehasgot8 = somefastnoise.GetValue(someothernoisex, someothernoisey, someothernoisez);
                                                                                                if (addmulsub == 0)
                                                                                                {
                                                                                                    somenoise += noisehasgot8;
                                                                                                }
                                                                                                else if (addmulsub == 1)
                                                                                                {
                                                                                                    somenoise *= (1.0f + noisehasgot8);
                                                                                                }
                                                                                                else if (addmulsub == 2)
                                                                                                {
                                                                                                    somenoise -= noisehasgot8;
                                                                                                }
                                                                                            }


                                                                                            if (sccsvvdhd.Form1.currentform.swtccheckbox8 == 1)
                                                                                            {

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                sccsvvdhd.Form1.someform.hasgotswtc8 = 0;
                                                                                            }
                                                                                        }
                                                                                        if (sccsvvdhd.Form1.someform.hasgotswtc9 == 1)
                                                                                        {
                                                                                            if (sccsvvdhd.Form1.someform.hasgot9 == 1)
                                                                                            {
                                                                                                noisehasgot9 = somefastnoise.GetValueFractal(someothernoisex, someothernoisey, someothernoisez);
                                                                                                if (addmulsub == 0)
                                                                                                {
                                                                                                    somenoise += noisehasgot9;
                                                                                                }
                                                                                                else if (addmulsub == 1)
                                                                                                {
                                                                                                    somenoise *= (1.0f + noisehasgot9);
                                                                                                }
                                                                                                else if (addmulsub == 2)
                                                                                                {
                                                                                                    somenoise -= noisehasgot9;
                                                                                                }
                                                                                            }


                                                                                            if (sccsvvdhd.Form1.currentform.swtccheckbox8 == 1)
                                                                                            {

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                sccsvvdhd.Form1.someform.hasgotswtc9 = 0;
                                                                                            }
                                                                                        }
                                                                                        if (sccsvvdhd.Form1.someform.hasgotswtc10 == 1)
                                                                                        {
                                                                                            if (sccsvvdhd.Form1.someform.hasgot10 == 1)
                                                                                            {
                                                                                                noisehasgot10 = somefastnoise.GetWhiteNoise(someothernoisex, someothernoisey, someothernoisez);
                                                                                                if (addmulsub == 0)
                                                                                                {
                                                                                                    somenoise += noisehasgot10;
                                                                                                }
                                                                                                else if (addmulsub == 1)
                                                                                                {
                                                                                                    somenoise *= (1.0f + noisehasgot10);
                                                                                                }
                                                                                                else if (addmulsub == 2)
                                                                                                {
                                                                                                    somenoise -= noisehasgot10;
                                                                                                }
                                                                                            }


                                                                                            if (sccsvvdhd.Form1.currentform.swtccheckbox8 == 1)
                                                                                            {

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                sccsvvdhd.Form1.someform.hasgotswtc10 = 0;
                                                                                            }
                                                                                        }
                                                                                        if (sccsvvdhd.Form1.someform.hasgotswtc11 == 1)
                                                                                        {
                                                                                            if (sccsvvdhd.Form1.someform.hasgot11 == 1)
                                                                                            {
                                                                                                noisehasgot11 = somefastnoise.GetWhiteNoiseInt((int)someothernoisex, (int)someothernoisey, (int)someothernoisez);
                                                                                                if (addmulsub == 0)
                                                                                                {
                                                                                                    somenoise += noisehasgot11;
                                                                                                }
                                                                                                else if (addmulsub == 1)
                                                                                                {
                                                                                                    somenoise *= (1.0f + noisehasgot11);
                                                                                                }
                                                                                                else if (addmulsub == 2)
                                                                                                {
                                                                                                    somenoise -= noisehasgot11;
                                                                                                }
                                                                                            }


                                                                                            if (sccsvvdhd.Form1.currentform.swtccheckbox8 == 1)
                                                                                            {

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                sccsvvdhd.Form1.someform.hasgotswtc11 = 0;
                                                                                            }
                                                                                        }

                                                                                        if (sccsvvdhd.Form1.currentform.swtccheckbox8 == 0)
                                                                                        {
                                                                                            //CANCELS THE NOISE. UNDER DEVELOPMENT.
                                                                                            //somenoise = 1.0f;
                                                                                            //CANCELS THE NOISE. UNDER DEVELOPMENT.
                                                                                        }



                                                                                        //LET THE USER NOTICE THAT THE PERLIN OPTION THEY ACTIVATED DOESN'T WORK SO DON'T MAKE ANY CHANGES TO THE VOXEL RGB HEIGHTMAP PERLIN VALUE.
                                                                                        //LET THE USER NOTICE THAT THE PERLIN OPTION THEY ACTIVATED DOESN'T WORK SO DON'T MAKE ANY CHANGES TO THE VOXEL RGB HEIGHTMAP PERLIN VALUE.
                                                                                        string perlincheck = "" + somenoise.ToString();

                                                                                        if (float.IsNaN(somenoise))
                                                                                        {
                                                                                            somenoise = 1.0f;
                                                                                        }
                                                                                        //LET THE USER NOTICE THAT THE PERLIN OPTION THEY ACTIVATED DOESN'T WORK SO DON'T MAKE ANY CHANGES TO THE VOXEL RGB HEIGHTMAP PERLIN VALUE.
                                                                                        //LET THE USER NOTICE THAT THE PERLIN OPTION THEY ACTIVATED DOESN'T WORK SO DON'T MAKE ANY CHANGES TO THE VOXEL RGB HEIGHTMAP PERLIN VALUE.



                                                                                        /*
                                                                                        if (perlincheck)
                                                                                        {

                                                                                        }/*

                                                                                        /*
                                                                                        if (int.)
                                                                                        {

                                                                                        }
                                                                                        */
                                                                                        //Console.WriteLine("" + perlincheck);






                                                                                        //var somenoise = 1.0f;// somefastnoise.GetCellular(xx,yy,zz);



                                                                                        //Console.WriteLine("" + somevoxelvirtualdesktopindex);




                                                                                        //divxadd *= (xxx * somevoxelvirtualdesktopw);
                                                                                        //divyadd *= (yyy * somevoxelvirtualdesktoph);

                                                                                        if (somebytearray != null && somebytearray.Length > 0 && Program.exitedprogram == -1)
                                                                                        {



                                                                                            if (somevoxelvirtualdesktopglobals.tinyChunkWidth == 4) // || somevoxelvirtualdesktopglobals.tinyChunkWidth == 8 // || somevoxelvirtualdesktopglobals.tinyChunkWidth ==16
                                                                                            {


                                                                                                //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser), "scmsg",0); // 8294400
                                                                                                //bytePoser = (rpix + bytePoser);
                                                                                                bytePoser = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xpluszero * someindexmx))) * somepixelsize;
                                                                                                //bytePoser += 0;
                                                                                                //bytePoser += 1;
                                                                                                //bytePoser += 2;
                                                                                                //bytePoser += 3;

                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3.0f;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 = someemptybytes;
                                                                                                }



                                                                                                bytePoser = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xplusone * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3.0f;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M12 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M12 = someemptybytes;
                                                                                                }


                                                                                                bytePoser = ((((someresh) - (divyadd + (yplustwo * someindexmy))) * (someresw)) + (divxadd + (xplustwo * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3.0f;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M13 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {


                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M13 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = ((((someresh) - (divyadd + (yplusthree * someindexmy))) * (someresw)) + (divxadd + (xplusthree * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3.0f;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M14 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M14 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xpluszero * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3.0f;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M21 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M21 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xplusone * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3.0f;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M22 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M22 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = ((((someresh) - (divyadd + (yplustwo * someindexmy))) * (someresw)) + (divxadd + (xplustwo * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3.0f;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M23 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M23 = someemptybytes;
                                                                                                }


                                                                                                bytePoser = ((((someresh) - (divyadd + (yplusthree * someindexmy))) * (someresw)) + (divxadd + (xplusthree * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3.0f;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M24 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M24 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xpluszero * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3.0f;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M31 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M31 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xplusone * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3.0f;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M32 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M32 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = ((((someresh) - (divyadd + (yplustwo * someindexmy))) * (someresw)) + (divxadd + (xplustwo * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3.0f;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M33 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M33 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = ((((someresh) - (divyadd + (yplusthree * someindexmy))) * (someresw)) + (divxadd + (xplusthree * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3.0f;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M34 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M34 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xpluszero * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3.0f;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M41 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M41 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xplusone * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3.0f;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M42 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M42 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = ((((someresh) - (divyadd + (yplustwo * someindexmy))) * (someresw)) + (divxadd + (xplustwo * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3.0f;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M43 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M43 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = ((((someresh) - (divyadd + (yplusthree * someindexmy))) * (someresw)) + (divxadd + (xplusthree * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3.0f;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M44 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M44 = someemptybytes;
                                                                                                }










                                                                                            }
                                                                                            else if (somevoxelvirtualdesktopglobals.tinyChunkWidth == -1)
                                                                                            {




                                                                                                //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * 4) + somebyteindex0), "scmsg",0); // 8294400
                                                                                                bytePoser = (((1080 - (divyadd + 0)) * 1920) + (divxadd + (0))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M11 = somebytearray[bytePoser] * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * 4) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M11 = someemptybytes;
                                                                                                }



                                                                                                bytePoser = (((1080 - (divyadd + 0)) * 1920) + (divxadd + (1))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M12 = somebytearray[bytePoser] * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M12 = someemptybytes;
                                                                                                }


                                                                                                bytePoser = (((1080 - (divyadd + 0)) * 1920) + (divxadd + (2))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M13 = somebytearray[bytePoser] * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M13 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = (((1080 - (divyadd + 0)) * 1920) + (divxadd + (3))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M14 = somebytearray[bytePoser] * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M14 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = (((1080 - (divyadd + 0)) * 1920) + (divxadd + (4))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M21 = somebytearray[bytePoser] * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M21 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = (((1080 - (divyadd + 0)) * 1920) + (divxadd + (5))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M22 = somebytearray[bytePoser] * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M22 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = (((1080 - (divyadd + 0)) * 1920) + (divxadd + (6))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M23 = somebytearray[bytePoser] * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M23 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = (((1080 - (divyadd + 1)) * 1920) + (divxadd + (7))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M24 = somebytearray[bytePoser] * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M24 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = (((1080 - (divyadd + 1)) * 1920) + (divxadd + (0))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M31 = somebytearray[bytePoser] * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M31 = someemptybytes;
                                                                                                }


                                                                                                bytePoser = (((1080 - (divyadd + 1)) * 1920) + (divxadd + (1))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M32 = somebytearray[bytePoser] * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M32 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = (((1080 - (divyadd + 1)) * 1920) + (divxadd + (2))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M33 = somebytearray[bytePoser] * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M33 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = (((1080 - (divyadd + 1)) * 1920) + (divxadd + (3))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M34 = somebytearray[bytePoser] * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M34 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = (((1080 - (divyadd + 1)) * 1920) + (divxadd + (4))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M41 = somebytearray[bytePoser] * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M41 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = (((1080 - (divyadd + 1)) * 1920) + (divxadd + (5))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M42 = somebytearray[bytePoser] * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M42 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = (((1080 - (divyadd + 3)) * 1920) + (divxadd + (6))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M43 = somebytearray[bytePoser] * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M43 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = (((1080 - (divyadd + 3)) * 1920) + (divxadd + (7))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M44 = somebytearray[bytePoser] * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix[cc].heightmapmat.M44 = someemptybytes;
                                                                                                }
                                                                                            }





                                                                                            else if (somevoxelvirtualdesktopglobals.tinyChunkWidth == 8 || somevoxelvirtualdesktopglobals.tinyChunkWidth == 16)
                                                                                            {








                                                                                                ///8x8x1
                                                                                                ///8x8x1
                                                                                                ///8x8x1
                                                                                                ///8x8x1
                                                                                                ///8x8x1
                                                                                                ///8x8x1
                                                                                                ///8x8x1
                                                                                                ///8x8x1
                                                                                                ///8x8x1
                                                                                                ///8x8x1
                                                                                                ///8x8x1
                                                                                                ///8x8x1
                                                                                                ///8x8x1
                                                                                                ///8x8x1
                                                                                                ///8x8x1
                                                                                                ///8x8x1















                                                                                                //(float)Math.Round(total)
                                                                                                float multiplierforheightmapdirtyarea = 1.0f; //10000000.0f

                                                                                                //float heightmapncolormul = 100000.0f;



                                                                                                float comparepixeldirtyornot = 0;// 

                                                                                                //float heightmapvalue = (float)Math.Round(sccsvvdhd.Form1.someform.heightmapvalue * 0.1f) * 10;

                                                                                                //float thevaluetoprint = (float)(Math.Round(heightmapvalue * total * heightmapncolormul) / heightmapncolormul);
                                                                                                //float thevaluecomparepixeldityornot = (float)(Math.Round(heightmapvalue * total * heightmapncolormul) / heightmapncolormul);




                                                                                                /*
                                                                                                if (sccsvvdhd.Form1.someform.checkdirtypixeloptionvalue == 0)
                                                                                                {
                                                                                                    heightmapvalue = (float)Math.Round(sccsvvdhd.Form1.someform.heightmapvalue * 0.01f) * 100;// sccsvvdhd.Form1.someform.heightmapvalue;
                                                                                                }
                                                                                                else if (sccsvvdhd.Form1.someform.checkdirtypixeloptionvalue == 1)
                                                                                                {
                                                                                                    heightmapvalue = sccsvvdhd.Form1.someform.heightmapvalue;// (float)Math.Round(sccsvvdhd.Form1.someform.heightmapvalue * 0.01f) * 100;
                                                                                                    //thevaluecomparepixeldityornot = heightmapvalue;
                                                                                                    multiplierforheightmapdirtyarea = 0.1f;
                                                                                                    //heightmapncolormul = 1.0f;
                                                                                                }*/




                                                                                                int swtcforaretheredirtyareas = sccsvvdhd.Form1.someform.checkdirtyrgbchunkoptionvalue;


                                                                                                //Console.WriteLine(swtcforaretheredirtyareas);



                                                                                                //(float)(Math.Round(total * heightmapvalue));



                                                                                                //FIRST SET OF BUFFERS TO FILL START
                                                                                                //FIRST SET OF BUFFERS TO FILL START
                                                                                                //FIRST SET OF BUFFERS TO FILL START


                                                                                                float minrgbdiffdecimal = 0.1f;
                                                                                                float maxrgbdiffdecimal = 10.0f;


                                                                                                float pixelminvaluedifferencetobedirty = 0.0f; // 0.00001f not even 20 regions affected. // 1000.0f


                                                                                                if (sccsvvdhd.Form1.currentform.sccsvvdhdresolutionvalue == 0)
                                                                                                {
                                                                                                    //pixelminvaluedifferencetobedirty = 955.0f * ((sccsvvdhd.Form1.someform.precisiondirtyareaslidervalue) * 0.123454321f * 0.95f); //* 0.05f
                                                                                                }
                                                                                                else if (sccsvvdhd.Form1.currentform.sccsvvdhdresolutionvalue == 1)
                                                                                                {
                                                                                                    //pixelminvaluedifferencetobedirty = 755.0f * ((sccsvvdhd.Form1.someform.precisiondirtyareaslidervalue) * 0.0923454321f * 0.95f); //* 0.05f
                                                                                                }
                                                                                                else if (sccsvvdhd.Form1.currentform.sccsvvdhdresolutionvalue == 2)
                                                                                                {
                                                                                                    //pixelminvaluedifferencetobedirty = 955.0f * ((sccsvvdhd.Form1.someform.precisiondirtyareaslidervalue) * 0.0923454321f * 0.95f); //* 0.05f
                                                                                                }

                                                                                                //Console.WriteLine("pixelminvaluedifferencetobedirty:" + pixelminvaluedifferencetobedirty);




                                                                                                int[] arrayofbytes = new int[64];

                                                                                                float[] arrayofheightmapvalue = new float[64];






                                                                                                //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser), "scmsg",0); // 8294400
                                                                                                arrayofbytes[0] = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xpluszero * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[1] = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xplusone * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[2] = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xplustwo * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[3] = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xplusthree * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[4] = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xplusfour * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[5] = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xplusfive * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[6] = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xplussix * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[7] = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xplusseven * someindexmx))) * somepixelsize;

                                                                                                arrayofbytes[8] = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xpluszero * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[9] = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xplusone * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[10] = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xplustwo * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[11] = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xplusthree * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[12] = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xplusfour * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[13] = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xplusfive * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[14] = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xplussix * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[15] = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xplusseven * someindexmx))) * somepixelsize;


                                                                                                arrayofbytes[16] = ((((someresh) - (divyadd + (yplustwo * someindexmy))) * (someresw)) + (divxadd + (xpluszero * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[17] = ((((someresh) - (divyadd + (yplustwo * someindexmy))) * (someresw)) + (divxadd + (xplusone * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[18] = ((((someresh) - (divyadd + (yplustwo * someindexmy))) * (someresw)) + (divxadd + (xplustwo * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[19] = ((((someresh) - (divyadd + (yplustwo * someindexmy))) * (someresw)) + (divxadd + (xplusthree * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[20] = ((((someresh) - (divyadd + (yplustwo * someindexmy))) * (someresw)) + (divxadd + (xplusfour * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[21] = ((((someresh) - (divyadd + (yplustwo * someindexmy))) * (someresw)) + (divxadd + (xplusfive * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[22] = ((((someresh) - (divyadd + (yplustwo * someindexmy))) * (someresw)) + (divxadd + (xplussix * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[23] = ((((someresh) - (divyadd + (yplustwo * someindexmy))) * (someresw)) + (divxadd + (xplusseven * someindexmx))) * somepixelsize;

                                                                                                arrayofbytes[24] = ((((someresh) - (divyadd + (yplusthree * someindexmy))) * (someresw)) + (divxadd + (xpluszero * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[25] = ((((someresh) - (divyadd + (yplusthree * someindexmy))) * (someresw)) + (divxadd + (xplusone * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[26] = ((((someresh) - (divyadd + (yplusthree * someindexmy))) * (someresw)) + (divxadd + (xplustwo * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[27] = ((((someresh) - (divyadd + (yplusthree * someindexmy))) * (someresw)) + (divxadd + (xplusthree * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[28] = ((((someresh) - (divyadd + (yplusthree * someindexmy))) * (someresw)) + (divxadd + (xplusfour * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[29] = ((((someresh) - (divyadd + (yplusthree * someindexmy))) * (someresw)) + (divxadd + (xplusfive * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[30] = ((((someresh) - (divyadd + (yplusthree * someindexmy))) * (someresw)) + (divxadd + (xplussix * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[31] = ((((someresh) - (divyadd + (yplusthree * someindexmy))) * (someresw)) + (divxadd + (xplusseven * someindexmx))) * somepixelsize;



                                                                                                arrayofbytes[32] = ((((someresh) - (divyadd + (yplusfour * someindexmy))) * (someresw)) + (divxadd + (xpluszero * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[33] = ((((someresh) - (divyadd + (yplusfour * someindexmy))) * (someresw)) + (divxadd + (xplusone * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[34] = ((((someresh) - (divyadd + (yplusfour * someindexmy))) * (someresw)) + (divxadd + (xplustwo * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[35] = ((((someresh) - (divyadd + (yplusfour * someindexmy))) * (someresw)) + (divxadd + (xplusthree * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[36] = ((((someresh) - (divyadd + (yplusfour * someindexmy))) * (someresw)) + (divxadd + (xplusfour * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[37] = ((((someresh) - (divyadd + (yplusfour * someindexmy))) * (someresw)) + (divxadd + (xplusfive * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[38] = ((((someresh) - (divyadd + (yplusfour * someindexmy))) * (someresw)) + (divxadd + (xplussix * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[39] = ((((someresh) - (divyadd + (yplusfour * someindexmy))) * (someresw)) + (divxadd + (xplusseven * someindexmx))) * somepixelsize;

                                                                                                arrayofbytes[40] = ((((someresh) - (divyadd + (yplusfive * someindexmy))) * (someresw)) + (divxadd + (xpluszero * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[41] = ((((someresh) - (divyadd + (yplusfive * someindexmy))) * (someresw)) + (divxadd + (xplusone * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[42] = ((((someresh) - (divyadd + (yplusfive * someindexmy))) * (someresw)) + (divxadd + (xplustwo * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[43] = ((((someresh) - (divyadd + (yplusfive * someindexmy))) * (someresw)) + (divxadd + (xplusthree * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[44] = ((((someresh) - (divyadd + (yplusfive * someindexmy))) * (someresw)) + (divxadd + (xplusfour * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[45] = ((((someresh) - (divyadd + (yplusfive * someindexmy))) * (someresw)) + (divxadd + (xplusfive * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[46] = ((((someresh) - (divyadd + (yplusfive * someindexmy))) * (someresw)) + (divxadd + (xplussix * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[47] = ((((someresh) - (divyadd + (yplusfive * someindexmy))) * (someresw)) + (divxadd + (xplusseven * someindexmx))) * somepixelsize;


                                                                                                arrayofbytes[48] = ((((someresh) - (divyadd + (yplussix * someindexmy))) * (someresw)) + (divxadd + (xpluszero * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[49] = ((((someresh) - (divyadd + (yplussix * someindexmy))) * (someresw)) + (divxadd + (xplusone * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[50] = ((((someresh) - (divyadd + (yplussix * someindexmy))) * (someresw)) + (divxadd + (xplustwo * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[51] = ((((someresh) - (divyadd + (yplussix * someindexmy))) * (someresw)) + (divxadd + (xplusthree * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[52] = ((((someresh) - (divyadd + (yplussix * someindexmy))) * (someresw)) + (divxadd + (xplusfour * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[53] = ((((someresh) - (divyadd + (yplussix * someindexmy))) * (someresw)) + (divxadd + (xplusfive * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[54] = ((((someresh) - (divyadd + (yplussix * someindexmy))) * (someresw)) + (divxadd + (xplussix * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[55] = ((((someresh) - (divyadd + (yplussix * someindexmy))) * (someresw)) + (divxadd + (xplusseven * someindexmx))) * somepixelsize;

                                                                                                arrayofbytes[56] = ((((someresh) - (divyadd + (yplusseven * someindexmy))) * (someresw)) + (divxadd + (xpluszero * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[57] = ((((someresh) - (divyadd + (yplusseven * someindexmy))) * (someresw)) + (divxadd + (xplusone * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[58] = ((((someresh) - (divyadd + (yplusseven * someindexmy))) * (someresw)) + (divxadd + (xplustwo * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[59] = ((((someresh) - (divyadd + (yplusseven * someindexmy))) * (someresw)) + (divxadd + (xplusthree * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[60] = ((((someresh) - (divyadd + (yplusseven * someindexmy))) * (someresw)) + (divxadd + (xplusfour * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[61] = ((((someresh) - (divyadd + (yplusseven * someindexmy))) * (someresw)) + (divxadd + (xplusfive * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[62] = ((((someresh) - (divyadd + (yplusseven * someindexmy))) * (someresw)) + (divxadd + (xplussix * someindexmx))) * somepixelsize;
                                                                                                arrayofbytes[63] = ((((someresh) - (divyadd + (yplusseven * someindexmy))) * (someresw)) + (divxadd + (xplusseven * someindexmx))) * somepixelsize;



                                                                                                int lastvalueoffourcounter = 0;
                                                                                                int lastvalueoffourcounterforbuffers = 0;
                                                                                                int lastvaltestofeight = 0;





                                                                                                for (int bi = 0; bi < arrayofbytes.Length; bi++)
                                                                                                {


                                                                                                    if (arrayofbytes[bi] > 0 && arrayofbytes[bi] < somebytearray.Length)
                                                                                                    {





                                                                                                        var colorb = somebytearray[arrayofbytes[bi] + 0];
                                                                                                        var colorg = somebytearray[arrayofbytes[bi] + 1];
                                                                                                        var colorr = somebytearray[arrayofbytes[bi] + 2];
                                                                                                        var colora = somebytearray[arrayofbytes[bi] + 3];

                                                                                                        total = (colorb + colorg + colorr) / 3.0f;

                                                                                                        float roundedvalue = (float)(Math.Round(total * somenoise * somemultiplier * multiplierforheightmapdirtyarea) / multiplierforheightmapdirtyarea);

                                                                                                        if (sccsvvdhd.Form1.someform.checkdirtyrgbchunkoptionvalue == 0)
                                                                                                        {
                                                                                                            comparepixeldirtyornot = (total * somemultiplier);
                                                                                                        }
                                                                                                        else if (sccsvvdhd.Form1.someform.checkdirtyrgbchunkoptionvalue == 1)
                                                                                                        {
                                                                                                            comparepixeldirtyornot = (float)(total * somemultiplier);//(Math.Round( (float)(Math.Round(total * minrgbdiffdecimal) *maxrgbdiffdecimal)* heightmapvalue * multiplierforheightmapdirtyarea) / 10.0f);
                                                                                                        }


                                                                                                        float ratiosliderheightmaponehundred0 = (somemultiplier * 100.0f) / sccsvvdhd.Form1.someform.heightmapvaluemax;



                                                                                                        var thevalueofheightmap = total * somenoise * somemultiplier;





                                                                                                        arrayofheightmapvalue[bi] = thevalueofheightmap;



                                                                                                        //MORE HEIGHTMAP PRECISION
                                                                                                        //arrayofheightmapvalue[bi] = (float)(Math.Round(arrayofheightmapvalue[bi] * 0.01f) * 100.0f);


                                                                                                        //less HEIGHTMAP PRECISION
                                                                                                        arrayofheightmapvalue[bi] = (float)(Math.Round(arrayofheightmapvalue[bi] * 10.0f) / 10.0f);



                                                                                                        //ALTERNATE WAY TO DECIPHER WHICH MENU WE ARE IN. MADE BY STEVE CHASSÉ
                                                                                                        //ALTERNATE WAY TO DECIPHER WHICH MENU WE ARE IN. MADE BY STEVE CHASSÉ
                                                                                                        //ALTERNATE WAY TO DECIPHER WHICH MENU WE ARE IN. MADE BY STEVE CHASSÉ
                                                                                                        /*
                                                                                                        var valtestofeight = bi % 8;
                                                                                                        var valtestoffour = bi % 4;

                                                                                                        //Console.WriteLine(valtestoffour);

                                                                                                        if (valtestofeight != lastvaltestofeight)
                                                                                                        {
                                                                                                            lastvalueoffourcounter = 0;
                                                                                                            lastvalueoffourcounterforbuffers = 0;
                                                                                                        }



                                                                                                        int maxnumbereight = 64;
                                                                                                        int mulofeighti = 8;
                                                                                                        int fractionsofeight = 0;

                                                                                                        for (int adder = 0; adder < maxnumbereight; adder++)
                                                                                                        {
                                                                                                            if (mulofeighti >= (mulofeighti - 1))
                                                                                                            {
                                                                                                                fractionsofeight++;
                                                                                                                mulofeighti = 0;
                                                                                                            }


                                                                                                            mulofeighti++;
                                                                                                        }

                                                                                                        int maxnumberfour = 64;
                                                                                                        int remainsfour = 0;
                                                                                                        int muloffouri = 4;
                                                                                                        int fractionsoffour = 0;

                                                                                                        for (int adder = 0; adder < maxnumberfour; adder++)
                                                                                                        {
                                                                                                            if (muloffouri >= (muloffouri - 1))
                                                                                                            {
                                                                                                                fractionsoffour++;
                                                                                                                muloffouri = 0;
                                                                                                            }


                                                                                                            muloffouri++;
                                                                                                        }                                                                                              

                                                                                                        //from 0 to 7 after that
                                                                                                        if (valtestofeight == 0)
                                                                                                        {
                                                                                                            if (lastvalueoffourcounter >= 3)
                                                                                                            {
                                                                                                                lastvalueoffourcounterforbuffers++;
                                                                                                                lastvalueoffourcounter = 0;
                                                                                                            }
                                                                                                            lastvalueoffourcounter++;

                                                                                                            if (lastvalueoffourcounterforbuffers == 0)
                                                                                                            {
                                                                                                                if (lastvalueoffourcounter == 0)
                                                                                                                {

                                                                                                                }
                                                                                                                else if (lastvalueoffourcounter == 1)
                                                                                                                {

                                                                                                                }
                                                                                                                else if (lastvalueoffourcounter == 2)
                                                                                                                {

                                                                                                                }
                                                                                                                else if (lastvalueoffourcounter == 3)
                                                                                                                {

                                                                                                                }
                                                                                                            }
                                                                                                            else if (lastvalueoffourcounterforbuffers == 1)
                                                                                                            {
                                                                                                                if (lastvalueoffourcounter == 0)
                                                                                                                {

                                                                                                                }
                                                                                                                else if (lastvalueoffourcounter == 1)
                                                                                                                {

                                                                                                                }
                                                                                                                else if (lastvalueoffourcounter == 2)
                                                                                                                {

                                                                                                                }
                                                                                                                else if (lastvalueoffourcounter == 3)
                                                                                                                {

                                                                                                                }
                                                                                                            }
                                                                                                        }

                                                                                                        lastvaltestofeight = valtestofeight;*/

                                                                                                        //ALTERNATE WAY TO DECIPHER WHICH MENU WE ARE IN. MADE BY STEVE CHASSÉ
                                                                                                        //ALTERNATE WAY TO DECIPHER WHICH MENU WE ARE IN. MADE BY STEVE CHASSÉ
                                                                                                        //ALTERNATE WAY TO DECIPHER WHICH MENU WE ARE IN. MADE BY STEVE CHASSÉ
























                                                                                                        //Console.WriteLine(arrayofheightmapvalue[bi]);
                                                                                                        //IF THE HEIGHTMAP VALUE ISN'T EQUAL TO THE LAST FRAME'S HEIGHTMAP COLOR VALUE WITH A MARGIN. INDICATE THAT THE BUFFER REGION IS DIRTY.
                                                                                                        //IF THE HEIGHTMAP VALUE ISN'T EQUAL TO THE LAST FRAME'S HEIGHTMAP COLOR VALUE WITH A MARGIN. INDICATE THAT THE BUFFER REGION IS DIRTY.
                                                                                                        //IF THE HEIGHTMAP VALUE ISN'T EQUAL TO THE LAST FRAME'S HEIGHTMAP COLOR VALUE WITH A MARGIN. INDICATE THAT THE BUFFER REGION IS DIRTY.



                                                                                                        if (sccsvvdhd.Form1.currentform.checkdirtyrgbchunkoptionvalue == 1)
                                                                                                        {

                                                                                                            ///var pixelminvaluedifferencetobedirty = ((sccsvvdhd.Form1.someform.precisiondirtyareaslidervalue) * 0.0923454321f * 0.95f); //* 0.05f
                                                                                                            float percentage = 0.0f;
                                                                                                            float precisionmultipliermin = 1.0f;
                                                                                                            float precisionmultipliermax = 1.0f;
                                                                                                            float pixelcolordifference = (sccsvvdhd.Form1.someform.precisiondirtyrgbchunklidervalue);// * 0.123454321f * 955.5f;

                                                                                                            /*if (sccsvvdhd.Form1.currentform.sccsvvdhdresolutionvalue == 0)
                                                                                                            {
                                                                                                                var ratio = sccsvvdhd.Form1.someform.precisiondirtyrgbchunklidervaluemax / sccsvvdhd.Form1.someform.precisiondirtyrgbchunklidervalue;
                                                                                                                
                                                                                                                percentage = ratio;
                                                                                                                percentage *= 100;
                                                                                                                percentage /= 20;



                                                                                                                pixelcolordifference *= percentage * sccsvvdhd.Form1.someform.precisiondirtyrgbchunklidervaluemax;// (sccsvvdhd.Form1.someform.precisiondirtyareaslidervalue) * 0.123454321f * (percentage * 0.1f);



                                                                                                                //pixelcolordifference = (sccsvvdhd.Form1.someform.precisiondirtyareaslidervalue) * 0.123454321f * 955.5f;
                                                                                                            }
                                                                                                            else if (sccsvvdhd.Form1.currentform.sccsvvdhdresolutionvalue == 1)
                                                                                                            {

                                                                                                                if (sccsvvdhd.Form1.currentform.sccsvvdhdresolutionvalue == 0)
                                                                                                                {
                                                                                                                    var ratio = sccsvvdhd.Form1.someform.precisiondirtyrgbchunklidervaluemax / sccsvvdhd.Form1.someform.precisiondirtyrgbchunklidervalue;

                                                                                                                    percentage = ratio;
                                                                                                                    percentage *= 100;
                                                                                                                    percentage /= 20;

                                                                                                                    pixelcolordifference *= percentage * sccsvvdhd.Form1.someform.precisiondirtyrgbchunklidervaluemax;// (sccsvvdhd.Form1.someform.precisiondirtyareaslidervalue) * 0.123454321f * (percentage * 0.1f);

                                                                                                                }
                                                                                                                else if (sccsvvdhd.Form1.currentform.sccsvvdhdresolutionvalue == 1)
                                                                                                                {
                                                                                                                    var ratio = sccsvvdhd.Form1.someform.precisiondirtyrgbchunklidervaluemax / sccsvvdhd.Form1.someform.precisiondirtyrgbchunklidervalue;

                                                                                                                    percentage = ratio;
                                                                                                                    percentage *= 100;
                                                                                                                    percentage /= 20;

                                                                                                                    pixelcolordifference *= (percentage * sccsvvdhd.Form1.someform.precisiondirtyrgbchunklidervaluemax);// (sccsvvdhd.Form1.someform.precisiondirtyareaslidervalue) * 0.123454321f * (percentage * 0.1f);

                                                                                                                }
                                                                                                            }*/

                                                                                                            //pixelcolordifference *= 0.1f;
                                                                                                            //Console.WriteLine(pixelcolordifference);

                                                                                                            /*var ratio = (255 * 3) / total;    //TOTAL IS (R+G+B / 3)                                                                                               
                                                                                                            percentage = ratio;
                                                                                                            percentage *= 100;
                                                                                                            percentage /= (255 * 3);*/




                                                                                                            //THE LAW OF THREE
                                                                                                            var ratiorgbonehundred = (total * 100.0f) / (255 * 3);

                                                                                                            //Console.WriteLine(percentage);


                                                                                                            float theheightmapsliderval = sccsvvdhd.Form1.someform.heightmapvalue;


                                                                                                            /*if (theheightmapsliderval == 0)
                                                                                                            {
                                                                                                                theheightmapsliderval = 0.000001f;//
                                                                                                            }*/


                                                                                                            //THE LAW OF THREE
                                                                                                            float ratiosliderheightmaponehundred = (theheightmapsliderval * 100.0f) / sccsvvdhd.Form1.someform.heightmapvaluemax;
                                                                                                            float mergedratio = (ratiorgbonehundred + ratiosliderheightmaponehundred) / 2;
                                                                                                            //pixelcolordifference = ((float)Math.Abs(mergedratio) * 125.0f);

                                                                                                            //Console.WriteLine(ratiosliderheightmaponehundred);


                                                                                                            float heightmapsslider = sccsvvdhd.Form1.someform.precisiondirtyrgbchunklidervalue;

                                                                                                            ratiosliderheightmaponehundred = (float)Math.Abs(ratiosliderheightmaponehundred);




                                                                                                            //IF THE HEIGHTMAP SLIDER VALUE IS SMALLER THAN 100 (CAN BE MORE PRECISE), THAN REDUCE THE MULTIPLIER EVEN MORE
                                                                                                            if (heightmapsslider < 100)
                                                                                                            {
                                                                                                                heightmapsslider *= 0.001f;
                                                                                                            }


                                                                                                            //pixelcolordifference = ((0.12345678987654321f * sccsvvdhd.Form1.someform.precisiondirtyrgbchunklidervalue) * 2.0f) + (ratiosliderheightmaponehundred * 10.0f);
                                                                                                            //pixelcolordifference = ((0.031415926535897932f * sccsvvdhd.Form1.someform.precisiondirtyrgbchunklidervalue) * 2.0f) + (ratiosliderheightmaponehundred * 10.0f);
                                                                                                            pixelcolordifference = ((0.0131415926535897932f * heightmapsslider)) + (ratiosliderheightmaponehundred * 10.0f);





                                                                                                            //Console.WriteLine(pixelcolordifference);








                                                                                                            //pixelcolordifference *= ratiosliderheightmaponehundred * sccsvvdhd.Form1.someform.precisiondirtyrgbchunklidervaluemax;//


                                                                                                            //float ratioheightmap = (float)Math.Abs(theheightmapsliderval / 2500.0f);
                                                                                                            //ratioheightmap *= 100;
                                                                                                            ///ratioheightmap /= 2500;

                                                                                                            //Console.WriteLine("mergedratio:" + mergedratio);

                                                                                                            //pixelcolordifference *= 0.007654321f;
                                                                                                            //pixelcolordifference *= 0.000012345654321f;
                                                                                                            //pixelcolordifference = percentage * 955.0f;

                                                                                                            //pixelcolordifference = percentage * 50.0f;


                                                                                                            //RESULTS
                                                                                                            //pixelcolordifference = percentage * 50.0f;

                                                                                                            //FAILS
                                                                                                            //100.12345678987654321f

                                                                                                            float thevaltoprint = (float)Math.Abs(somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M11 - somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M11);


                                                                                                            if (pixelcolordifference != 0)
                                                                                                            {
                                                                                                                //Console.WriteLine("pixelcolordifference:" + pixelcolordifference + "/thevaltoprint:" + thevaltoprint);

                                                                                                            }
                                                                                                            //Console.WriteLine(pixelcolordifference);


                                                                                                            //Console.WriteLine("pixelcolordifference:" + pixelcolordifference + "/thevaltoprint:"  + thevaltoprint);


                                                                                                            //Console.WriteLine("pixelcolordifference:" + pixelcolordifference);//
                                                                                                            //Console.WriteLine("pixelcolordifference:" + pixelcolordifference + "/arrayofheightmapvalue:" + arrayofheightmapvalue[bi] + "/slider:" + sccsvvdhd.Form1.someform.precisiondirtyrgbchunklidervalue);






                                                                                                            //IF THE HEIGHTMAP VALUE ISN'T EQUAL TO THE LAST FRAME'S HEIGHTMAP COLOR VALUE WITH A MARGIN. INDICATE THAT THE BUFFER REGION IS DIRTY.
                                                                                                            //IF THE HEIGHTMAP VALUE ISN'T EQUAL TO THE LAST FRAME'S HEIGHTMAP COLOR VALUE WITH A MARGIN. INDICATE THAT THE BUFFER REGION IS DIRTY.
                                                                                                            //IF THE HEIGHTMAP VALUE ISN'T EQUAL TO THE LAST FRAME'S HEIGHTMAP COLOR VALUE WITH A MARGIN. INDICATE THAT THE BUFFER REGION IS DIRTY.
                                                                                                            /*
                                                                                                            switch (bi)
                                                                                                            {


                                                                                                                //START OF BUFFER A
                                                                                                                //START OF BUFFER A
                                                                                                                //START OF BUFFER A

                                                                                                                case 0:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M11 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M11)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M11 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }


                                                                                                                    break;
                                                                                                                case 1:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M12 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M12)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M12 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 2:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M13 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M13)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M13 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 3:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M14 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M14)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M14 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 4:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M21 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M21)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M21 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 5:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M22 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M22)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M22 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 6:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M23 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M23)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M23 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 7:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M24 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M24)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M24 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;











                                                                                                                case 8:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M31 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M31)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M31 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 9:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M32 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M32)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M32 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 10:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M33 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M33)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M33 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 11:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M34 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M34)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M34 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 12:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M41 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M41)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M41 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 13:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M42 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M42)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M42 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 14:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M43 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M43)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M43 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 15:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M44 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M44)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M44 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;

                                                                                                                //END OF BUFFER A
                                                                                                                //END OF BUFFER A
                                                                                                                //END OF BUFFER A














                                                                                                                //START OF BUFFER B
                                                                                                                //START OF BUFFER B
                                                                                                                //START OF BUFFER B


                                                                                                                case 16:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M11 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M11)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M11 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 17:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M12 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M12)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M12 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 18:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M13 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M13)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M13 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 19:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M14 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M14)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M14 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 20:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M21 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M21)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M21 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 21:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M22 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M22)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M22 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 22:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M23 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M23)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M23 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 23:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M24 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M24)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M24 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;











                                                                                                                case 24:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M31 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M31)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M31 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 25:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M32 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M32)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M32 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 26:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M33 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M33)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M33 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 27:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M34 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M34)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M34 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 28:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M41 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M41)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M41 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 29:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M42 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M42)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M42 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 30:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M43 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M43)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M43 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 31:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M44 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M44)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M44 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;



                                                                                                                //END OF BUFFER B
                                                                                                                //END OF BUFFER B
                                                                                                                //END OF BUFFER B













                                                                                                                //START OF BUFFER C
                                                                                                                //START OF BUFFER C
                                                                                                                //START OF BUFFER C


                                                                                                                case 32:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M11 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M11)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M11 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 33:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M12 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M12)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M12 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 34:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M13 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M13)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M13 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 35:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M14 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M14)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M14 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 36:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M21 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M21)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M21 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 37:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M22 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M22)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M22 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 38:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M23 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M23)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M23 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 39:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M24 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M24)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M24 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;











                                                                                                                case 40:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M31 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M31)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M31 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 41:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M32 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M32)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M32 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 42:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M33 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M33)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M33 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 43:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M34 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M34)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M34 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 44:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M41 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M41)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M41 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 45:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M42 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M42)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M42 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 46:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M43 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M43)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M43 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 47:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M44 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M44)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M44 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;

                                                                                                                //END OF BUFFER C
                                                                                                                //END OF BUFFER C
                                                                                                                //END OF BUFFER C










                                                                                                                //START OF BUFFER D
                                                                                                                //START OF BUFFER D
                                                                                                                //START OF BUFFER D



                                                                                                                case 48:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M11 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M11)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M11 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 49:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M12 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M12)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M12 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 50:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M13 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M13)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M13 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 51:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M14 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M14)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M14 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 52:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M21 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M21)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M21 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 53:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M22 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M22)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M22 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 54:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M23 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M23)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M23 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 55:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M24 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M24)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M24 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;











                                                                                                                case 56:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M31 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M31)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M31 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 57:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M32 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M32)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M32 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 58:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M33 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M33)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M33 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 59:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M34 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M34)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M34 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 60:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M41 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M41)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M41 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 61:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M42 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M42)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M42 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 62:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M43 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M43)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M43 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 63:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M44 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M44)
                                                                                                                    {

                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M44 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;

                                                                                                                    //END OF BUFFER D
                                                                                                                    //END OF BUFFER D
                                                                                                                    //END OF BUFFER D
                                                                                                            };
                                                                                                            //IF THE HEIGHTMAP VALUE ISN'T EQUAL TO THE LAST FRAME'S HEIGHTMAP VALUE. INDICATE THAT THE BUFFER REGION IS DIRTY.
                                                                                                            //IF THE HEIGHTMAP VALUE ISN'T EQUAL TO THE LAST FRAME'S HEIGHTMAP VALUE. INDICATE THAT THE BUFFER REGION IS DIRTY.
                                                                                                            //IF THE HEIGHTMAP VALUE ISN'T EQUAL TO THE LAST FRAME'S HEIGHTMAP VALUE. INDICATE THAT THE BUFFER REGION IS DIRTY.
                                                                                                            */











                                                                                                            switch (bi)
                                                                                                            {

                                                                                                                //START OF BUFFER A
                                                                                                                //START OF BUFFER A
                                                                                                                //START OF BUFFER A
                                                                                                                case 0:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M11 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M11) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M11 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 1:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M12 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M12) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M12 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 2:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M13 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M13) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M13 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 3:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M14 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M14) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M14 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 4:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M21 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M21) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M21 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 5:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M22 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M22) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M22 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 6:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M23 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M23) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M23 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 7:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M24 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M24) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M24 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 0;
                                                                                                                    }
                                                                                                                    break;






                                                                                                                case 8:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M31 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M31) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M31 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 9:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M32 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M32) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M32 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 10:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M33 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M33) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M33 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 11:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M34 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M34) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M34 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 12:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M41 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M41) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M41 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 13:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M42 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M42) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M42 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 14:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M43 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M43) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M43 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 15:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M44 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M44) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M44 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 0;
                                                                                                                    }
                                                                                                                    break;

                                                                                                                //END OF BUFFER A
                                                                                                                //END OF BUFFER A
                                                                                                                //END OF BUFFER A





                                                                                                                //START OF BUFFER B
                                                                                                                //START OF BUFFER B
                                                                                                                //START OF BUFFER B
                                                                                                                case 16:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M11 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M11) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M11 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        // somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 17:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M12 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M12) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M12 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        // somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 18:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M13 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M13) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M13 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 19:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M14 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M14) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M14 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 20:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M21 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M21) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M21 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 21:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M22 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M22) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M22 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        // somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 22:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M23 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M23) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M23 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        // somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 23:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M24 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M24) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M24 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        // somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 0;
                                                                                                                    }
                                                                                                                    break;






                                                                                                                case 24:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M31 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M31) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M31 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 25:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M32 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M32) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M32 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        // somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 26:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M33 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M33) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M33 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 27:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M34 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M34) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M34 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 28:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M41 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M41) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M41 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 29:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M42 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M42) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M42 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 30:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M43 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M43) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M43 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 31:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M44 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M44) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M44 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 0;
                                                                                                                    }
                                                                                                                    break;

                                                                                                                //END OF BUFFER B
                                                                                                                //END OF BUFFER B
                                                                                                                //END OF BUFFER B






                                                                                                                //START OF BUFFER C
                                                                                                                //START OF BUFFER C
                                                                                                                //START OF BUFFER C
                                                                                                                case 32:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M11 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M11) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M11 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 33:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M12 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M12) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M12 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 34:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M13 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M13) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M13 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 35:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M14 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M14) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M14 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 36:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M21 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M21) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M21 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 37:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M22 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M22) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M22 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 38:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M23 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M23) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M23 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 39:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M24 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M24) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M24 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 0;
                                                                                                                    }
                                                                                                                    break;






                                                                                                                case 40:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M31 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M31) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M31 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 41:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M32 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M32) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M32 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 42:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M33 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M33) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M33 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 43:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M34 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M34) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M34 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 44:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M41 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M41) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M41 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 45:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M42 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M42) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M42 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 46:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M43 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M43) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M43 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 47:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M44 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M44) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M44 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 0;
                                                                                                                    }
                                                                                                                    break;

                                                                                                                //END OF BUFFER C
                                                                                                                //END OF BUFFER C
                                                                                                                //END OF BUFFER C




                                                                                                                //START OF BUFFER D
                                                                                                                //START OF BUFFER D
                                                                                                                //START OF BUFFER D
                                                                                                                case 48:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M11 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M11) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M11 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 49:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M12 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M12) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M12 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 50:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M13 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M13) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M13 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 51:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M14 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M14) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M14 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 52:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M21 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M21) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M21 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 53:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M22 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M22) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M22 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 54:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M23 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M23) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M23 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 55:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M24 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M24) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M24 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 0;
                                                                                                                    }
                                                                                                                    break;






                                                                                                                case 56:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M31 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M31) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M31 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 57:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M32 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M32) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M32 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 58:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M33 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M33) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M33 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 59:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M34 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M34) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M34 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 60:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M41 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M41) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M41 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 61:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M42 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M42) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M42 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 62:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M43 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M43) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M43 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 0;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 63:
                                                                                                                    if ((float)Math.Abs(((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M44 - thevalueofheightmap) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference) //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M44) * precisionmultipliermin) / precisionmultipliermax) > pixelcolordifference)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M44 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 0;
                                                                                                                    }
                                                                                                                    break;

                                                                                                                    //END OF BUFFER D
                                                                                                                    //END OF BUFFER D
                                                                                                                    //END OF BUFFER D



                                                                                                            };
                                                                                                        }
                                                                                                        else if (sccsvvdhd.Form1.currentform.checkdirtyrgbchunkoptionvalue == 0)
                                                                                                        {

                                                                                                            //IF THE HEIGHTMAP VALUE ISN'T EQUAL TO THE LAST FRAME'S HEIGHTMAP COLOR VALUE WITH A MARGIN. INDICATE THAT THE BUFFER REGION IS DIRTY.
                                                                                                            //IF THE HEIGHTMAP VALUE ISN'T EQUAL TO THE LAST FRAME'S HEIGHTMAP COLOR VALUE WITH A MARGIN. INDICATE THAT THE BUFFER REGION IS DIRTY.
                                                                                                            //IF THE HEIGHTMAP VALUE ISN'T EQUAL TO THE LAST FRAME'S HEIGHTMAP COLOR VALUE WITH A MARGIN. INDICATE THAT THE BUFFER REGION IS DIRTY.

                                                                                                            switch (bi)
                                                                                                            {


                                                                                                                //START OF BUFFER A
                                                                                                                //START OF BUFFER A
                                                                                                                //START OF BUFFER A

                                                                                                                case 0:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M11 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M11)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M11 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }


                                                                                                                    break;
                                                                                                                case 1:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M12 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M12)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M12 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 2:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M13 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M13)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M13 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 3:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M14 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M14)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M14 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 4:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M21 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M21)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M21 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 5:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M22 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M22)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M22 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 6:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M23 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M23)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M23 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 7:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M24 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M24)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M24 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;











                                                                                                                case 8:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M31 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M31)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M31 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 9:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M32 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M32)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M32 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 10:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M33 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M33)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M33 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 11:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M34 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M34)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M34 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 12:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M41 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M41)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M41 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 13:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M42 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M42)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M42 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 14:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M43 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M43)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M43 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 15:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M44 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M44)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixa[cc].instancematrix.M44 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;

                                                                                                                //END OF BUFFER A
                                                                                                                //END OF BUFFER A
                                                                                                                //END OF BUFFER A














                                                                                                                //START OF BUFFER B
                                                                                                                //START OF BUFFER B
                                                                                                                //START OF BUFFER B


                                                                                                                case 16:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M11 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M11)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M11 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 17:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M12 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M12)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M12 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 18:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M13 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M13)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M13 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 19:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M14 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M14)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M14 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 20:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M21 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M21)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M21 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 21:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M22 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M22)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M22 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 22:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M23 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M23)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M23 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 23:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M24 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M24)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M24 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;











                                                                                                                case 24:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M31 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M31)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M31 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 25:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M32 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M32)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M32 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 26:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M33 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M33)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M33 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 27:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M34 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M34)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M34 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 28:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M41 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M41)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M41 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 29:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M42 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M42)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M42 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 30:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M43 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M43)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M43 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 31:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M44 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M44)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixb[cc].instancematrix.M44 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;



                                                                                                                //END OF BUFFER B
                                                                                                                //END OF BUFFER B
                                                                                                                //END OF BUFFER B













                                                                                                                //START OF BUFFER C
                                                                                                                //START OF BUFFER C
                                                                                                                //START OF BUFFER C


                                                                                                                case 32:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M11 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M11)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M11 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 33:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M12 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M12)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M12 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 34:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M13 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M13)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M13 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 35:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M14 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M14)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M14 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 36:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M21 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M21)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M21 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 37:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M22 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M22)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M22 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 38:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M23 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M23)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M23 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 39:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M24 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M24)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M24 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;











                                                                                                                case 40:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M31 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M31)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M31 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 41:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M32 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M32)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M32 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 42:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M33 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M33)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M33 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 43:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M34 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M34)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M34 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 44:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M41 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M41)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M41 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 45:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M42 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M42)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M42 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 46:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M43 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M43)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M43 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 47:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M44 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M44)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixc[cc].instancematrix.M44 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;

                                                                                                                //END OF BUFFER C
                                                                                                                //END OF BUFFER C
                                                                                                                //END OF BUFFER C










                                                                                                                //START OF BUFFER D
                                                                                                                //START OF BUFFER D
                                                                                                                //START OF BUFFER D



                                                                                                                case 48:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M11 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M11)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M11 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 49:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M12 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M12)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M12 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 50:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M13 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M13)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M13 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 51:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M14 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M14)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M14 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 52:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M21 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M21)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M21 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 53:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M22 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M22)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M22 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 54:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M23 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M23)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M23 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 55:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M24 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M24)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M24 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;











                                                                                                                case 56:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M31 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M31)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M31 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 57:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M32 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M32)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M32 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 58:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M33 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M33)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M33 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 59:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M34 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M34)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M34 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 60:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M41 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M41)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M41 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 61:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M42 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M42)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M42 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 62:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M43 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M43)
                                                                                                                    {
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M43 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;
                                                                                                                case 63:
                                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M44 != arrayofheightmapvalue[bi])//somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M44)
                                                                                                                    {

                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond = 1;
                                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lastinstancesmatrixd[cc].instancematrix.M44 = arrayofheightmapvalue[bi];//11;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {

                                                                                                                    }
                                                                                                                    break;

                                                                                                                    //END OF BUFFER D
                                                                                                                    //END OF BUFFER D
                                                                                                                    //END OF BUFFER D
                                                                                                            };
                                                                                                            //IF THE HEIGHTMAP VALUE ISN'T EQUAL TO THE LAST FRAME'S HEIGHTMAP VALUE. INDICATE THAT THE BUFFER REGION IS DIRTY.
                                                                                                            //IF THE HEIGHTMAP VALUE ISN'T EQUAL TO THE LAST FRAME'S HEIGHTMAP VALUE. INDICATE THAT THE BUFFER REGION IS DIRTY.
                                                                                                            //IF THE HEIGHTMAP VALUE ISN'T EQUAL TO THE LAST FRAME'S HEIGHTMAP VALUE. INDICATE THAT THE BUFFER REGION IS DIRTY.




                                                                                                        }











                                                                                                        if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona == 1 || somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb == 1 || somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc == 1 || somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond == 1 || initsccsvvdhdheightmaparrays == 0)
                                                                                                        {









                                                                                                            switch (bi)
                                                                                                            {
                                                                                                                case 0:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M11 = arrayofheightmapvalue[bi];//11;

                                                                                                                    break;
                                                                                                                case 1:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M12 = arrayofheightmapvalue[bi];//12;

                                                                                                                    break;
                                                                                                                case 2:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M13 = arrayofheightmapvalue[bi];//13;

                                                                                                                    break;
                                                                                                                case 3:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M14 = arrayofheightmapvalue[bi];//14;

                                                                                                                    break;
                                                                                                                case 4:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M21 = arrayofheightmapvalue[bi];//21;
                                                                                                                    break;
                                                                                                                case 5:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M22 = arrayofheightmapvalue[bi];//22;
                                                                                                                    break;
                                                                                                                case 6:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M23 = arrayofheightmapvalue[bi];//23;
                                                                                                                    break;
                                                                                                                case 7:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M24 = arrayofheightmapvalue[bi];//24;
                                                                                                                    break;
                                                                                                                case 8:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M31 = arrayofheightmapvalue[bi];//31;
                                                                                                                    break;
                                                                                                                case 9:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M32 = arrayofheightmapvalue[bi];//32;
                                                                                                                    break;
                                                                                                                case 10:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M33 = arrayofheightmapvalue[bi];//33;
                                                                                                                    break;
                                                                                                                case 11:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M34 = arrayofheightmapvalue[bi];//34;
                                                                                                                    break;
                                                                                                                case 12:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M41 = arrayofheightmapvalue[bi];//41;
                                                                                                                    break;
                                                                                                                case 13:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M42 = arrayofheightmapvalue[bi];//42;
                                                                                                                    break;
                                                                                                                case 14:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M43 = arrayofheightmapvalue[bi];//43;
                                                                                                                    break;
                                                                                                                case 15:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M44 = arrayofheightmapvalue[bi];//44;
                                                                                                                    break;




                                                                                                                case 16:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M11 = arrayofheightmapvalue[bi];//11b;
                                                                                                                    break;
                                                                                                                case 17:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M12 = arrayofheightmapvalue[bi];//12b;
                                                                                                                    break;
                                                                                                                case 18:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M13 = arrayofheightmapvalue[bi];//13b;
                                                                                                                    break;
                                                                                                                case 19:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M14 = arrayofheightmapvalue[bi];//14b;
                                                                                                                    break;
                                                                                                                case 20:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M21 = arrayofheightmapvalue[bi];//21b;
                                                                                                                    break;
                                                                                                                case 21:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M22 = arrayofheightmapvalue[bi];//22b;
                                                                                                                    break;
                                                                                                                case 22:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M23 = arrayofheightmapvalue[bi];//23b;
                                                                                                                    break;
                                                                                                                case 23:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M24 = arrayofheightmapvalue[bi];//24b;
                                                                                                                    break;
                                                                                                                case 24:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M31 = arrayofheightmapvalue[bi];//31b;
                                                                                                                    break;
                                                                                                                case 25:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M32 = arrayofheightmapvalue[bi];//32b;
                                                                                                                    break;
                                                                                                                case 26:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M33 = arrayofheightmapvalue[bi];//33b;
                                                                                                                    break;
                                                                                                                case 27:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M34 = arrayofheightmapvalue[bi];//34b;
                                                                                                                    break;
                                                                                                                case 28:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M41 = arrayofheightmapvalue[bi];//41b;
                                                                                                                    break;
                                                                                                                case 29:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M42 = arrayofheightmapvalue[bi];//42b;
                                                                                                                    break;
                                                                                                                case 30:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M43 = arrayofheightmapvalue[bi];//43b;
                                                                                                                    break;
                                                                                                                case 31:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M44 = arrayofheightmapvalue[bi];//44b;
                                                                                                                    break;



                                                                                                                case 32:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M11 = arrayofheightmapvalue[bi];//11c;
                                                                                                                    break;
                                                                                                                case 33:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M12 = arrayofheightmapvalue[bi];//12c;
                                                                                                                    break;
                                                                                                                case 34:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M13 = arrayofheightmapvalue[bi];//13c;
                                                                                                                    break;
                                                                                                                case 35:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M14 = arrayofheightmapvalue[bi];//14c;
                                                                                                                    break;
                                                                                                                case 36:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M21 = arrayofheightmapvalue[bi];//21c;
                                                                                                                    break;
                                                                                                                case 37:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M22 = arrayofheightmapvalue[bi];//22c;
                                                                                                                    break;
                                                                                                                case 38:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M23 = arrayofheightmapvalue[bi];//23c;
                                                                                                                    break;
                                                                                                                case 39:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M24 = arrayofheightmapvalue[bi];//24c;
                                                                                                                    break;
                                                                                                                case 40:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M31 = arrayofheightmapvalue[bi];//31c;
                                                                                                                    break;
                                                                                                                case 41:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M32 = arrayofheightmapvalue[bi];//32c;
                                                                                                                    break;
                                                                                                                case 42:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M33 = arrayofheightmapvalue[bi];//33c;
                                                                                                                    break;
                                                                                                                case 43:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M34 = arrayofheightmapvalue[bi];//34c;
                                                                                                                    break;
                                                                                                                case 44:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M41 = arrayofheightmapvalue[bi];//41c;
                                                                                                                    break;
                                                                                                                case 45:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M42 = arrayofheightmapvalue[bi];//42c;
                                                                                                                    break;
                                                                                                                case 46:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M43 = arrayofheightmapvalue[bi];//43c;
                                                                                                                    break;
                                                                                                                case 47:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M44 = arrayofheightmapvalue[bi];//44c;
                                                                                                                    break;




                                                                                                                case 48:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M11 = arrayofheightmapvalue[bi];//11d;
                                                                                                                    break;
                                                                                                                case 49:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M12 = arrayofheightmapvalue[bi];//12d;
                                                                                                                    break;
                                                                                                                case 50:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M13 = arrayofheightmapvalue[bi];//13d;
                                                                                                                    break;
                                                                                                                case 51:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M14 = arrayofheightmapvalue[bi];//14d;
                                                                                                                    break;
                                                                                                                case 52:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M21 = arrayofheightmapvalue[bi];//21d;
                                                                                                                    break;
                                                                                                                case 53:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M22 = arrayofheightmapvalue[bi];//22d;
                                                                                                                    break;
                                                                                                                case 54:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M23 = arrayofheightmapvalue[bi];//23d;
                                                                                                                    break;
                                                                                                                case 55:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M24 = arrayofheightmapvalue[bi];//24d;
                                                                                                                    break;
                                                                                                                case 56:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M31 = arrayofheightmapvalue[bi];//31d;
                                                                                                                    break;
                                                                                                                case 57:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M32 = arrayofheightmapvalue[bi];//32d;
                                                                                                                    break;
                                                                                                                case 58:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M33 = arrayofheightmapvalue[bi];//33d;
                                                                                                                    break;
                                                                                                                case 59:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M34 = arrayofheightmapvalue[bi];//34d;
                                                                                                                    break;
                                                                                                                case 60:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M41 = arrayofheightmapvalue[bi];//41d;
                                                                                                                    break;
                                                                                                                case 61:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M42 = arrayofheightmapvalue[bi];//42d;
                                                                                                                    break;
                                                                                                                case 62:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M43 = arrayofheightmapvalue[bi];//43d;
                                                                                                                    break;
                                                                                                                case 63:
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M44 = arrayofheightmapvalue[bi];//44d;
                                                                                                                    break;
                                                                                                            };

                                                                                                            initsccsvvdhdheightmaparrays = 1;

                                                                                                            dirtyareasfound++;
                                                                                                        }











                                                                                                    }






                                                                                                    /*double selectablevectordouble = 0;
                                                                                                    var currentIndex = b;
                                                                                                    int maxv = somevoxelvirtualdesktopglobals.tinyChunkWidth * somevoxelvirtualdesktopglobals.tinyChunkHeight * somevoxelvirtualdesktopglobals.tinyChunkDepth;

                                                                                                    int somemaxvecdigit = somevoxelvirtualdesktopglobals.tinyChunkWidth;
                                                                                                    int somecountermul = 0;
                                                                                                    int somec = 0;

                                                                                                    //3 

                                                                                                    for (int t = 0; t <= currentIndex; t++) // index == 45 == 11 
                                                                                                    {
                                                                                                        if (somec == somemaxvecdigit)
                                                                                                        {
                                                                                                            somecountermul++;
                                                                                                            somec = 0;
                                                                                                        }
                                                                                                        somec++;
                                                                                                    }*/





















                                                                                                    /*
                                                                                                    //Console.WriteLine("total:" + total);
                                                                                                    if (swtcforaretheredirtyareas == 0)
                                                                                                    {
                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;

                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 = thevalueofheightmap;
                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lastinstancesmatrixa[cc].instancematrix.M11 = thevalueofheightmap;// total * somenoise * somemultiplier;

                                                                                                    }
                                                                                                    else
                                                                                                    {


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 = thevalueofheightmap;

                                                                                                        if (Math.Abs((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 - somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lastinstancesmatrixa[cc].instancematrix.M11)) > pixelminvaluedifferencetobedirty && thevalueofheightmap != 0)
                                                                                                        {
                                                                                                            somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lastinstancesmatrixa[cc].instancematrix.M11 = thevalueofheightmap;// total * somenoise * somemultiplier;

                                                                                                            somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if (thevalueofheightmap == 0 && Math.Abs((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 - somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lastinstancesmatrixa[cc].instancematrix.M11)) != 0)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lastinstancesmatrixa[cc].instancematrix.M11 = thevalueofheightmap;// total * somenoise * somemultiplier;

                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                            }

                                                                                                            if (Math.Abs((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 - somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lastinstancesmatrixa[cc].instancematrix.M11)) == 0)
                                                                                                            {

                                                                                                            }
                                                                                                        }
                                                                                                    }*/
















                                                                                                    //Console.WriteLine(valtest);

                                                                                                }
















                                                                                                /* if (bytePosera00 > 0 && bytePosera00 < somebytearray.Length)
                                                                                                 {

                                                                                                 }
                                                                                                */







                                                                                                /*
                                                                                                //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser), "scmsg",0); // 8294400

                                                                                                int bytePosera00 = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xpluszero * someindexmx))) * somepixelsize; M11
                                                                                                int bytePosera01 = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xplusone * someindexmx))) * somepixelsize; M11
                                                                                                int bytePosera02 = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xplustwo * someindexmx))) * somepixelsize; M11
                                                                                                int bytePosera03 = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xplusthree * someindexmx))) * somepixelsize; M11

                                                                                                int bytePosera04 = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xplusfour * someindexmx))) * somepixelsize; M12
                                                                                                int bytePosera05 = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xplusfive * someindexmx))) * somepixelsize;M12
                                                                                                int bytePosera06 = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xplussix * someindexmx))) * somepixelsize;M12
                                                                                                int bytePosera07 = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xplusseven * someindexmx))) * somepixelsize;M12

                                                                                                int bytePosera10 = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xpluszero * someindexmx))) * somepixelsize;M13
                                                                                                int bytePosera11 = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xplusone * someindexmx))) * somepixelsize;M13
                                                                                                int bytePosera12 = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xplustwo * someindexmx))) * somepixelsize;M13
                                                                                                int bytePosera13 = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xplusthree * someindexmx))) * somepixelsize;M13

                                                                                                int bytePosera14 = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xplusfour * someindexmx))) * somepixelsize;M14
                                                                                                int bytePosera15 = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xplusfive * someindexmx))) * somepixelsize;M14
                                                                                                int bytePosera16 = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xplussix * someindexmx))) * somepixelsize;M14
                                                                                                int bytePosera17 = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xplusseven * someindexmx))) * somepixelsize;M14

                                                                                                int bytePoserb00 = ((((someresh) - (divyadd + (yplustwo * someindexmy))) * (someresw)) + (divxadd + (xpluszero * someindexmx))) * somepixelsize;
                                                                                                int bytePoserb01 = ((((someresh) - (divyadd + (yplustwo * someindexmy))) * (someresw)) + (divxadd + (xplusone * someindexmx))) * somepixelsize;
                                                                                                int bytePoserb02 = ((((someresh) - (divyadd + (yplustwo * someindexmy))) * (someresw)) + (divxadd + (xplustwo * someindexmx))) * somepixelsize;
                                                                                                int bytePoserb03 = ((((someresh) - (divyadd + (yplustwo * someindexmy))) * (someresw)) + (divxadd + (xplusthree * someindexmx))) * somepixelsize;
                                                                                                int bytePoserb04 = ((((someresh) - (divyadd + (yplustwo * someindexmy))) * (someresw)) + (divxadd + (xplusfour * someindexmx))) * somepixelsize;
                                                                                                int bytePoserb05 = ((((someresh) - (divyadd + (yplustwo * someindexmy))) * (someresw)) + (divxadd + (xplusfive * someindexmx))) * somepixelsize;
                                                                                                int bytePoserb06 = ((((someresh) - (divyadd + (yplustwo * someindexmy))) * (someresw)) + (divxadd + (xplussix * someindexmx))) * somepixelsize;
                                                                                                int bytePoserb07 = ((((someresh) - (divyadd + (yplustwo * someindexmy))) * (someresw)) + (divxadd + (xplusseven * someindexmx))) * somepixelsize;

                                                                                                int bytePoserb10 = ((((someresh) - (divyadd + (yplusthree * someindexmy))) * (someresw)) + (divxadd + (xpluszero * someindexmx))) * somepixelsize;
                                                                                                int bytePoserb11 = ((((someresh) - (divyadd + (yplusthree * someindexmy))) * (someresw)) + (divxadd + (xplusone * someindexmx))) * somepixelsize;
                                                                                                int bytePoserb12 = ((((someresh) - (divyadd + (yplusthree * someindexmy))) * (someresw)) + (divxadd + (xplustwo * someindexmx))) * somepixelsize;
                                                                                                int bytePoserb13 = ((((someresh) - (divyadd + (yplusthree * someindexmy))) * (someresw)) + (divxadd + (xplusthree * someindexmx))) * somepixelsize;
                                                                                                int bytePoserb14 = ((((someresh) - (divyadd + (yplusthree * someindexmy))) * (someresw)) + (divxadd + (xplusfour * someindexmx))) * somepixelsize;
                                                                                                int bytePoserb15 = ((((someresh) - (divyadd + (yplusthree * someindexmy))) * (someresw)) + (divxadd + (xplusfive * someindexmx))) * somepixelsize;
                                                                                                int bytePoserb16 = ((((someresh) - (divyadd + (yplusthree * someindexmy))) * (someresw)) + (divxadd + (xplussix * someindexmx))) * somepixelsize;
                                                                                                int bytePoserb17 = ((((someresh) - (divyadd + (yplusthree * someindexmy))) * (someresw)) + (divxadd + (xplusseven * someindexmx))) * somepixelsize;


                                                                                                int bytePoserc00 = ((((someresh) - (divyadd + (yplusfour * someindexmy))) * (someresw)) + (divxadd + (xpluszero * someindexmx))) * somepixelsize;
                                                                                                int bytePoserc01 = ((((someresh) - (divyadd + (yplusfour * someindexmy))) * (someresw)) + (divxadd + (xplusone * someindexmx))) * somepixelsize;
                                                                                                int bytePoserc02 = ((((someresh) - (divyadd + (yplusfour * someindexmy))) * (someresw)) + (divxadd + (xplustwo * someindexmx))) * somepixelsize;
                                                                                                int bytePoserc03 = ((((someresh) - (divyadd + (yplusfour * someindexmy))) * (someresw)) + (divxadd + (xplusthree * someindexmx))) * somepixelsize;
                                                                                                int bytePoserc04 = ((((someresh) - (divyadd + (yplusfour * someindexmy))) * (someresw)) + (divxadd + (xplusfour * someindexmx))) * somepixelsize;
                                                                                                int bytePoserc05 = ((((someresh) - (divyadd + (yplusfour * someindexmy))) * (someresw)) + (divxadd + (xplusfive * someindexmx))) * somepixelsize;
                                                                                                int bytePoserc06 = ((((someresh) - (divyadd + (yplusfour * someindexmy))) * (someresw)) + (divxadd + (xplussix * someindexmx))) * somepixelsize;
                                                                                                int bytePoserc07 = ((((someresh) - (divyadd + (yplusfour * someindexmy))) * (someresw)) + (divxadd + (xplusseven * someindexmx))) * somepixelsize;

                                                                                                int bytePoserc10 = ((((someresh) - (divyadd + (yplusfive * someindexmy))) * (someresw)) + (divxadd + (xpluszero * someindexmx))) * somepixelsize;
                                                                                                int bytePoserc11 = ((((someresh) - (divyadd + (yplusfive * someindexmy))) * (someresw)) + (divxadd + (xplusone * someindexmx))) * somepixelsize;
                                                                                                int bytePoserc12 = ((((someresh) - (divyadd + (yplusfive * someindexmy))) * (someresw)) + (divxadd + (xplustwo * someindexmx))) * somepixelsize;
                                                                                                int bytePoserc13 = ((((someresh) - (divyadd + (yplusfive * someindexmy))) * (someresw)) + (divxadd + (xplusthree * someindexmx))) * somepixelsize;
                                                                                                int bytePoserc14 = ((((someresh) - (divyadd + (yplusfive * someindexmy))) * (someresw)) + (divxadd + (xplusfour * someindexmx))) * somepixelsize;
                                                                                                int bytePoserc15 = ((((someresh) - (divyadd + (yplusfive * someindexmy))) * (someresw)) + (divxadd + (xplusfive * someindexmx))) * somepixelsize;
                                                                                                int bytePoserc16 = ((((someresh) - (divyadd + (yplusfive * someindexmy))) * (someresw)) + (divxadd + (xplussix * someindexmx))) * somepixelsize;
                                                                                                int bytePoserc17 = ((((someresh) - (divyadd + (yplusfive * someindexmy))) * (someresw)) + (divxadd + (xplusseven * someindexmx))) * somepixelsize;


                                                                                                int bytePoserd00 = ((((someresh) - (divyadd + (yplussix * someindexmy))) * (someresw)) + (divxadd + (xpluszero * someindexmx))) * somepixelsize;
                                                                                                int bytePoserd01 = ((((someresh) - (divyadd + (yplussix * someindexmy))) * (someresw)) + (divxadd + (xplusone * someindexmx))) * somepixelsize;
                                                                                                int bytePoserd02 = ((((someresh) - (divyadd + (yplussix * someindexmy))) * (someresw)) + (divxadd + (xplustwo * someindexmx))) * somepixelsize;
                                                                                                int bytePoserd03 = ((((someresh) - (divyadd + (yplussix * someindexmy))) * (someresw)) + (divxadd + (xplusthree * someindexmx))) * somepixelsize;
                                                                                                int bytePoserd04 = ((((someresh) - (divyadd + (yplussix * someindexmy))) * (someresw)) + (divxadd + (xplusfour * someindexmx))) * somepixelsize;
                                                                                                int bytePoserd05 = ((((someresh) - (divyadd + (yplussix * someindexmy))) * (someresw)) + (divxadd + (xplusfive * someindexmx))) * somepixelsize;
                                                                                                int bytePoserd06 = ((((someresh) - (divyadd + (yplussix * someindexmy))) * (someresw)) + (divxadd + (xplussix * someindexmx))) * somepixelsize;
                                                                                                int bytePoserd07 = ((((someresh) - (divyadd + (yplussix * someindexmy))) * (someresw)) + (divxadd + (xplusseven * someindexmx))) * somepixelsize;

                                                                                                int bytePoserd10 = ((((someresh) - (divyadd + (yplusseven * someindexmy))) * (someresw)) + (divxadd + (xpluszero * someindexmx))) * somepixelsize;
                                                                                                int bytePoserd11 = ((((someresh) - (divyadd + (yplusseven * someindexmy))) * (someresw)) + (divxadd + (xplusone * someindexmx))) * somepixelsize;
                                                                                                int bytePoserd12 = ((((someresh) - (divyadd + (yplusseven * someindexmy))) * (someresw)) + (divxadd + (xplustwo * someindexmx))) * somepixelsize;
                                                                                                int bytePoserd13 = ((((someresh) - (divyadd + (yplusseven * someindexmy))) * (someresw)) + (divxadd + (xplusthree * someindexmx))) * somepixelsize;
                                                                                                int bytePoserd14 = ((((someresh) - (divyadd + (yplusseven * someindexmy))) * (someresw)) + (divxadd + (xplusfour * someindexmx))) * somepixelsize;
                                                                                                int bytePoserd15 = ((((someresh) - (divyadd + (yplusseven * someindexmy))) * (someresw)) + (divxadd + (xplusfive * someindexmx))) * somepixelsize;
                                                                                                int bytePoserd16 = ((((someresh) - (divyadd + (yplusseven * someindexmy))) * (someresw)) + (divxadd + (xplussix * someindexmx))) * somepixelsize;
                                                                                                int bytePoserd17 = ((((someresh) - (divyadd + (yplusseven * someindexmy))) * (someresw)) + (divxadd + (xplusseven * someindexmx))) * somepixelsize;
                                                                                                */








                                                                                                /*
                                                                                                if (bytePoser > 0 && bytePoser < somebytearray.Length)
                                                                                                {

                                                                                                }
                                                                                                else
                                                                                                {

                                                                                                    if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 != someemptybytes)
                                                                                                    {
                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 = someemptybytes;
                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lastinstancesmatrixa[cc].instancematrix.M11 = someemptybytes;

                                                                                                    }
                                                                                                }
                                                                                                */






                                                                                                /*
                                                                                                try
                                                                                                {
                                                                                                    b = somebytearray[bytePoser + 0];
                                                                                                    g = somebytearray[bytePoser + 1];
                                                                                                    r = somebytearray[bytePoser + 2];
                                                                                                    a = somebytearray[bytePoser + 3];

                                                                                                    total = (b + g + r) / 3.0f;

                                                                                                    float roundedvalue = (float)(Math.Round(total * somenoise * somemultiplier * multiplierforheightmapdirtyarea) / multiplierforheightmapdirtyarea);


                                                                                                    if (sccsvvdhd.Form1.someform.checkdirtypixeloptionvalue == 0)
                                                                                                    {
                                                                                                        comparepixeldirtyornot = (total * heightmapvalue);
                                                                                                    }
                                                                                                    else if (sccsvvdhd.Form1.someform.checkdirtypixeloptionvalue == 1)
                                                                                                    {
                                                                                                        comparepixeldirtyornot = (float)(total * heightmapvalue);//(Math.Round( (float)(Math.Round(total * minrgbdiffdecimal) *maxrgbdiffdecimal)* heightmapvalue * multiplierforheightmapdirtyarea) / 10.0f);
                                                                                                    }


                                                                                                    //float someoftheval =(float) Math.Abs((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 - somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lastinstancesmatrixa[cc].instancematrix.M11));
                                                                                                    //Console.WriteLine("someoftheval:" + someoftheval);

                                                                                                    var thevalueofheightmap = total * somenoise * somemultiplier;

                                                                                                    //Console.WriteLine("total:" + total);
                                                                                                    if (swtcforaretheredirtyareas == 0)
                                                                                                    {
                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;

                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 = thevalueofheightmap;
                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lastinstancesmatrixa[cc].instancematrix.M11 = thevalueofheightmap;// total * somenoise * somemultiplier;

                                                                                                    }
                                                                                                    else
                                                                                                    {


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 = thevalueofheightmap;

                                                                                                        if (Math.Abs((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 - somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lastinstancesmatrixa[cc].instancematrix.M11)) > pixelminvaluedifferencetobedirty && thevalueofheightmap != 0)
                                                                                                        {
                                                                                                            somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lastinstancesmatrixa[cc].instancematrix.M11 = thevalueofheightmap;// total * somenoise * somemultiplier;

                                                                                                            somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if (thevalueofheightmap == 0 && Math.Abs((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 - somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lastinstancesmatrixa[cc].instancematrix.M11)) != 0)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lastinstancesmatrixa[cc].instancematrix.M11 = thevalueofheightmap;// total * somenoise * somemultiplier;

                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona = 1;
                                                                                                            }

                                                                                                            if (Math.Abs((somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 - somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lastinstancesmatrixa[cc].instancematrix.M11)) == 0)
                                                                                                            {

                                                                                                            }
                                                                                                        }
                                                                                                    }

                                                                                                }
                                                                                                catch (Exception ex)
                                                                                                {
                                                                                                    //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                }*/




                                                                                                //FOURTH SET OF BUFFERS TO FILL END
                                                                                                //FOURTH SET OF BUFFERS TO FILL END
                                                                                                //FOURTH SET OF BUFFERS TO FILL END







                                                                                                if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona == 0)
                                                                                                {

                                                                                                }
                                                                                                else if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiona == 1)
                                                                                                {
                                                                                                    dirtyareasfound++;
                                                                                                }


                                                                                                if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb == 0)
                                                                                                {

                                                                                                }
                                                                                                else if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionb == 1)
                                                                                                {
                                                                                                    dirtyareasfound++;
                                                                                                }

                                                                                                if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc == 0)
                                                                                                {

                                                                                                }
                                                                                                else if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregionc == 1)
                                                                                                {
                                                                                                    dirtyareasfound++;
                                                                                                }


                                                                                                if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond == 0)
                                                                                                {

                                                                                                }
                                                                                                else if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].pixelmovedbufferregiond == 1)
                                                                                                {
                                                                                                    dirtyareasfound++;
                                                                                                }










                                                                                                /*

                                                                                                xxx = somevoxelvirtualdesktopw ;
                                                                                                yyy = somevoxelvirtualdesktoph ;
                                                                                                zzz = somevoxelvirtualdesktopd ;
                                                                                                x = somevoxelvirtualdesktopglobals.numberOfObjectInWidth;
                                                                                                y = somevoxelvirtualdesktopglobals.numberOfObjectInHeight;
                                                                                                z = somevoxelvirtualdesktopglobals.numberOfObjectInDepth;

                                                                                                xx = somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth;
                                                                                                yy = somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight;
                                                                                                zz = somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth;*/
                                                                                            }
                                                                                            else if (somevoxelvirtualdesktopglobals.tinyChunkWidth == -1) //16
                                                                                            {

                                                                                                //new setup
                                                                                                //0.0 => if heightmap value is 5000 
                                                                                                //1000010000.0000100001 => 4 quarters in order to get 16 * 16 = 256 bytes. right now 64 floats available. 
                                                                                                //



                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M12 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M13 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M14 = 0;

                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M21 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M22 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M23 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M24 = 0;


                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M31 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M32 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M33 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M34 = 0;


                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M41 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M42 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M43 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M44 = 0;



                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M11 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M12 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M13 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M14 = 0;

                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M21 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M22 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M23 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M24 = 0;


                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M31 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M32 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M33 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M34 = 0;


                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M41 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M42 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M43 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M44 = 0;



                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M11 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M12 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M13 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M14 = 0;

                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M21 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M22 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M23 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M24 = 0;


                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M31 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M32 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M33 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M34 = 0;


                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M41 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M42 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M43 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M44 = 0;



                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M11 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M12 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M13 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M14 = 0;

                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M21 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M22 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M23 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M24 = 0;


                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M31 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M32 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M33 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M34 = 0;


                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M41 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M42 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M43 = 0;
                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M44 = 0;



                                                                                                for (int ix = 0; ix < 16; ix++)
                                                                                                {
                                                                                                    for (int iy = 0; iy < 16; iy++)
                                                                                                    {
                                                                                                        int index = ((iy * 16) + ix); //0 to 256

                                                                                                        int ixx = ix / 4;
                                                                                                        int iyy = iy / 4;
                                                                                                        int rindex = ((iyy * 4) + ixx) / 4; //(iy * 16) + ix
                                                                                                                                            //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser), "scmsg",0); // 8294400
                                                                                                                                            //bytePoser = (rpix + bytePoser);
                                                                                                        bytePoser = ((((someresh) - (divyadd + (iy * someindexmy))) * (someresw)) + (divxadd + (ix * someindexmx))) * somepixelsize; //xpluszero
                                                                                                                                                                                                                                     //var bytePoser1 = ((((someresh) - (divyadd + (iy * someindexmy))) * (someresw)) + (divxadd + ((ix + 1) * someindexmx))) * somepixelsize; //xpluszero
                                                                                                                                                                                                                                     //var bytePoser2 = ((((someresh) - (divyadd + (iy * someindexmy))) * (someresw)) + (divxadd + ((ix + 2) * someindexmx))) * somepixelsize; //xpluszero
                                                                                                                                                                                                                                     //var bytePoser3 = ((((someresh) - (divyadd + (iy * someindexmy))) * (someresw)) + (divxadd + ((ix + 3) * someindexmx))) * somepixelsize; //xpluszero


                                                                                                        //bytePoser += 0;
                                                                                                        //bytePoser += 1;
                                                                                                        //bytePoser += 2;
                                                                                                        //bytePoser += 3;


                                                                                                        //(0*16) + 0 = 0
                                                                                                        //(0*16) + 1 = 1
                                                                                                        //(0*16) + 2 = 2




                                                                                                        if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                        {
                                                                                                            try
                                                                                                            {
                                                                                                                b = somebytearray[bytePoser + 0];
                                                                                                                g = somebytearray[bytePoser + 1];
                                                                                                                r = somebytearray[bytePoser + 2];
                                                                                                                a = somebytearray[bytePoser + 3];

                                                                                                                total = (float)Math.Round((b + g + r) / 3.0f) * somemultiplier;

                                                                                                                float currentMapData = 0;

                                                                                                                /*if (rindex == 0)
                                                                                                                {
                                                                                                                    float val = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11;
                                                                                                                    total = ((float)Math.Round((b + g + r) / 3.0f) * 1.0f) + val;
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 = total * somenoise * somemultiplier;
                                                                                                                }
                                                                                                                else if (rindex == 1)
                                                                                                                {
                                                                                                                    float val = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11;
                                                                                                                    total = ((float)Math.Round((b + g + r) / 3.0f) * 0.001f) + val;
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 = total * somenoise * somemultiplier;
                                                                                                                }
                                                                                                                else if (rindex == 2)
                                                                                                                {
                                                                                                                    float val = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11;
                                                                                                                    total = ((float)Math.Round((b + g + r) / 3.0f) * 0.00001f) + val;
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 = total * somenoise * somemultiplier;
                                                                                                                }
                                                                                                                else if (rindex == 3)
                                                                                                                {
                                                                                                                    float val = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11;
                                                                                                                    total = ((float)Math.Round((b + g + r) / 3.0f) * 10000f) + val;
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 = total * somenoise * somemultiplier;
                                                                                                                }*/



                                                                                                                if (index == 0)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11;
                                                                                                                }
                                                                                                                else if (index == 1)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M12;
                                                                                                                }
                                                                                                                else if (index == 2)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M13;
                                                                                                                }
                                                                                                                else if (index == 3)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M14;
                                                                                                                }
                                                                                                                else if (index == 4)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M21;
                                                                                                                }
                                                                                                                else if (index == 5)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M22;
                                                                                                                }
                                                                                                                else if (index == 6)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M23;
                                                                                                                }
                                                                                                                else if (index == 7)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M24;
                                                                                                                }
                                                                                                                else if (index == 8)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M31;
                                                                                                                }
                                                                                                                else if (index == 9)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M32;
                                                                                                                }
                                                                                                                else if (index == 10)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M33;
                                                                                                                }
                                                                                                                else if (index == 11)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M34;
                                                                                                                }
                                                                                                                else if (index == 12)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M41;
                                                                                                                }
                                                                                                                else if (index == 13)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M42;
                                                                                                                }
                                                                                                                else if (index == 14)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M43;
                                                                                                                }
                                                                                                                else if (index == 15)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M44;
                                                                                                                }
                                                                                                                else if (index == 16)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M11;
                                                                                                                }
                                                                                                                else if (index == 17)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M12;
                                                                                                                }
                                                                                                                else if (index == 18)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M13;
                                                                                                                }
                                                                                                                else if (index == 19)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M14;
                                                                                                                }
                                                                                                                else if (index == 20)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M21;
                                                                                                                }
                                                                                                                else if (index == 21)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M22;
                                                                                                                }
                                                                                                                else if (index == 22)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M23;
                                                                                                                }
                                                                                                                else if (index == 23)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M24;
                                                                                                                }
                                                                                                                else if (index == 24)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M31;
                                                                                                                }
                                                                                                                else if (index == 25)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M32;
                                                                                                                }
                                                                                                                else if (index == 26)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M33;
                                                                                                                }
                                                                                                                else if (index == 27)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M34;
                                                                                                                }
                                                                                                                else if (index == 28)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M41;
                                                                                                                }
                                                                                                                else if (index == 29)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M42;
                                                                                                                }
                                                                                                                else if (index == 30)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M43;
                                                                                                                }
                                                                                                                else if (index == 31)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M44;
                                                                                                                }
                                                                                                                else if (index == 32)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M11;
                                                                                                                }
                                                                                                                else if (index == 33)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M12;
                                                                                                                }
                                                                                                                else if (index == 34)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M13;
                                                                                                                }
                                                                                                                else if (index == 35)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M14;
                                                                                                                }
                                                                                                                else if (index == 36)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M21;
                                                                                                                }
                                                                                                                else if (index == 37)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M22;
                                                                                                                }
                                                                                                                else if (index == 38)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M23;
                                                                                                                }
                                                                                                                else if (index == 39)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M24;
                                                                                                                }
                                                                                                                else if (index == 40)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M31;
                                                                                                                }
                                                                                                                else if (index == 41)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M32;
                                                                                                                }
                                                                                                                else if (index == 42)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M33;
                                                                                                                }
                                                                                                                else if (index == 43)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M34;
                                                                                                                }
                                                                                                                else if (index == 44)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M41;
                                                                                                                }
                                                                                                                else if (index == 45)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M42;
                                                                                                                }
                                                                                                                else if (index == 46)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M43;
                                                                                                                }
                                                                                                                else if (index == 47)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M44;
                                                                                                                }
                                                                                                                else if (index == 48)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M11;
                                                                                                                }
                                                                                                                else if (index == 49)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M12;
                                                                                                                }
                                                                                                                else if (index == 50)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M13;
                                                                                                                }
                                                                                                                else if (index == 51)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M14;
                                                                                                                }
                                                                                                                else if (index == 52)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M21;
                                                                                                                }
                                                                                                                else if (index == 53)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M22;
                                                                                                                }
                                                                                                                else if (index == 54)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M23;
                                                                                                                }
                                                                                                                else if (index == 55)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M24;
                                                                                                                }
                                                                                                                else if (index == 56)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M31;
                                                                                                                }
                                                                                                                else if (index == 57)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M32;
                                                                                                                }
                                                                                                                else if (index == 58)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M33;
                                                                                                                }
                                                                                                                else if (index == 59)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M34;
                                                                                                                }
                                                                                                                else if (index == 60)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M41;
                                                                                                                }
                                                                                                                else if (index == 61)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M42;
                                                                                                                }
                                                                                                                else if (index == 62)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M43;
                                                                                                                }
                                                                                                                else if (index == 63)
                                                                                                                {
                                                                                                                    currentMapData = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M44;
                                                                                                                }



                                                                                                                if (rindex == 0)
                                                                                                                {
                                                                                                                    total = (total * somenoise * 1.0f) + currentMapData;
                                                                                                                    currentMapData = total; //* somemultiplier
                                                                                                                }
                                                                                                                else if (rindex == 1)
                                                                                                                {
                                                                                                                    total = (total * somenoise * 0.001f) + currentMapData;
                                                                                                                    currentMapData = total;
                                                                                                                }
                                                                                                                else if (rindex == 2)
                                                                                                                {
                                                                                                                    total = (total * somenoise * 0.00001f) + currentMapData;
                                                                                                                    currentMapData = total;
                                                                                                                }
                                                                                                                else if (rindex == 3)
                                                                                                                {
                                                                                                                    total = (total * somenoise * 10000f) + currentMapData;
                                                                                                                    currentMapData = total;
                                                                                                                }



                                                                                                                if (index == 0)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 1)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M12 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 2)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M13 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 3)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M14 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 4)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M21 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 5)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M22 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 6)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M23 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 7)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M24 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 8)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M31 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 9)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M32 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 10)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M33 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 11)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M34 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 12)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M41 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 13)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M42 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 14)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M43 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 15)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M44 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 16)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M11 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 17)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M12 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 18)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M13 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 19)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M14 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 20)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M21 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 21)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M22 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 22)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M23 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 23)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M24 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 24)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M31 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 25)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M32 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 26)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M33 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 27)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M34 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 28)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M41 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 29)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M42 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 30)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M43 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 31)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M44 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 32)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M11 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 33)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M12 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 34)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M13 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 35)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M14 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 36)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M21 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 37)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M22 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 38)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M23 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 39)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M24 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 40)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M31 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 41)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M32 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 42)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M33 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 43)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M34 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 44)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M41 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 45)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M42 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 46)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M43 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 47)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M44 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 48)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M11 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 49)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M12 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 50)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M13 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 51)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M14 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 52)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M21 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 53)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M22 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 54)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M23 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 55)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M24 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 56)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M31 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 57)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M32 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 58)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M33 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 59)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M34 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 60)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M41 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 61)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M42 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 62)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M43 = currentMapData;
                                                                                                                }
                                                                                                                else if (index == 63)
                                                                                                                {
                                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M44 = currentMapData;
                                                                                                                }








                                                                                                            }
                                                                                                            catch (Exception ex)
                                                                                                            {
                                                                                                                //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 = someemptybytes;

                                                                                                            if (index == 0)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 = someemptybytes;

                                                                                                            }
                                                                                                            else if (index == 1)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M12 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 2)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M13 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 3)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M14 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 4)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M21 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 5)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M22 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 6)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M23 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 7)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M24 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 8)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M31 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 9)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M32 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 10)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M33 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 11)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M34 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 12)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M41 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 13)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M42 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 14)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M43 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 15)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M44 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 16)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M11 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 17)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M12 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 18)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M13 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 19)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M14 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 20)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M21 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 21)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M22 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 22)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M23 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 23)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M24 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 24)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M31 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 25)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M32 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 26)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M33 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 27)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M34 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 28)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M41 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 29)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M42 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 30)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M43 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 31)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M44 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 32)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M11 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 33)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M12 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 34)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M13 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 35)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M14 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 36)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M21 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 37)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M22 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 38)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M23 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 39)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M24 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 40)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M31 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 41)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M32 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 42)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M33 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 43)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M34 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 44)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M41 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 45)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M42 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 46)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M43 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 47)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M44 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 48)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M11 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 49)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M12 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 50)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M13 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 51)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M14 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 52)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M21 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 53)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M22 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 54)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M23 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 55)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M24 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 56)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M31 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 57)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M32 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 58)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M33 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 59)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M34 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 60)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M41 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 61)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M42 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 62)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M43 = someemptybytes;
                                                                                                            }
                                                                                                            else if (index == 63)
                                                                                                            {
                                                                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M44 = someemptybytes;
                                                                                                            }


                                                                                                        }

                                                                                                    }
                                                                                                }

                                                                                                /*
                                                                                                //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser), "scmsg",0); // 8294400
                                                                                                //bytePoser = (rpix + bytePoser);
                                                                                                bytePoser = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xpluszero * someindexmx))) * somepixelsize;
                                                                                                //bytePoser += 0;
                                                                                                //bytePoser += 1;
                                                                                                //bytePoser += 2;
                                                                                                //bytePoser += 3;

                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 = someemptybytes;
                                                                                                }



                                                                                                bytePoser = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xplusone * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M12 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M12 = someemptybytes;
                                                                                                }


                                                                                                bytePoser = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xplustwo * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M13 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M13 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xplusthree * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M14 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M14 = someemptybytes;
                                                                                                }
                                                                                                */






                                                                                                /*
                                                                                                bytePoser = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xplusfour * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M21 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M21 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xplusfive * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M22 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M22 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xplussix * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M23 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M23 = someemptybytes;
                                                                                                }


                                                                                                bytePoser = ((((someresh) - (divyadd + (ypluszero * someindexmy))) * (someresw)) + (divxadd + (xplusseven * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M24 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M24 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xpluszero * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M31 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M31 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xplusone * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M32 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M32 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xplustwo * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M33 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M33 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xplusthree * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M34 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M34 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xplusfour * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M41 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M41 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xplusfive * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M42 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M42 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xplussix * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M43 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M43 = someemptybytes;
                                                                                                }

                                                                                                bytePoser = ((((someresh) - (divyadd + (yplusone * someindexmy))) * (someresw)) + (divxadd + (xplusseven * someindexmx))) * somepixelsize;
                                                                                                if (bytePoser >= 0 && bytePoser < somebytearray.Length)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        b = somebytearray[bytePoser + 0];
                                                                                                        g = somebytearray[bytePoser + 1];
                                                                                                        r = somebytearray[bytePoser + 2];
                                                                                                        a = somebytearray[bytePoser + 3];

                                                                                                        total = (b + g + r) / 3;


                                                                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M44 = total * somenoise * somemultiplier;
                                                                                                    }
                                                                                                    catch (Exception ex)
                                                                                                    {
                                                                                                        //Program.MessageBox((IntPtr)0, "" + (rpix + (0 * somepixelval) + bytePoser) + " " + somebytearray.Length + " " + ex.ToString(), "scmsg", 0);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M44 = someemptybytes;
                                                                                                }*/

                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    //t = total;
                                                                                }

                                                                                zz++;
                                                                                if (zz >= (somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth))
                                                                                {
                                                                                    xx++;
                                                                                    zz = 0;
                                                                                    swtchx = 1;
                                                                                }
                                                                                if (xx >= (somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth) && swtchx == 1)
                                                                                {
                                                                                    //faceStart = 0;
                                                                                    yy++;
                                                                                    xx = 0;
                                                                                    swtchx = 0;
                                                                                    swtchy = 1;
                                                                                }
                                                                                if (yy >= (somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight) && swtchy == 1)
                                                                                {
                                                                                    //yy = -ChunkHeight_L;
                                                                                    swtchy = 0;
                                                                                    swtchx = 0;
                                                                                    swtchz = 1;
                                                                                }
                                                                                t++;
                                                                            }

                                                                        }

















                                                                        /*
                                                                        int pixnum = somevoxelvirtualdesktopglobals.tinyChunkWidth;


                                                                        var resw = 1920;
                                                                        var resh = 1080;

                                                                        var pixw = (resw / somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth) * pixnum; // 384 pixels per instance in width // 
                                                                        var pixh = (resh / somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight) * pixnum; // 432 pixels per instance in height

                                                                        //var source_rect = new System.Drawing.Rectangle(0, 0, pixw, pixh);

                                                                        int wid = pixw / pixnum; //96 pixels per byte
                                                                        int hgt = pixh / pixnum; //108 pixels per byte

                                                                        int num_rows = pixnum;
                                                                        int num_cols = pixnum;*/

                                                                        /*for (int xx = 0; xx < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth; xx++)
                                                                        {
                                                                            //source_rect.X = 0;

                                                                            for (int yy = 0; yy < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight; yy++)
                                                                            {
                                                                                //var somebytearrayindex = (((somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight - 1) - yy) * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth) + xx;

                                                                                // var _sc_jitter_tasks[0][0].frameByteArray = sccs.scgraphics.scupdate.screencaptureframe.arrayOfFRACSCREENSPECTRUMBytes[somebytearrayindex];

                                                                                //1920resolutionW / 20 instances = 96 res * 4 = 384 pixels width / xx byte square per instance side => xx pixels per face
                                                                                //1080resolutionH / 10 instances = 108 res * 4 = 432 pixels height / xx byte square per instance side => xx pixels per face                 

                                                                                /*for (int row = 0; row < num_rows; row++)
                                                                                {
                                                                                    source_rect.X = 0;

                                                                                    for (int col = 0; col < num_cols; col++)
                                                                                    {
                                                                                        var mainArrayIndex = (row * num_cols) + col;

                                                                                        var byteindex = (source_rect.X * num_cols) + source_rect.Y;
                                                                                        var testv = _sc_jitter_tasks[0][0].frameByteArray[byteindex];
                                                                                        source_rect.X += wid;
                                                                                        //break;
                                                                                    }
                                                                                    source_rect.Y += hgt;
                                                                                }

                                                                                //var mainArrayIndex = (xx * num_cols) + yy;

                                                                                //var byteindex = (source_rect.X * somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight) + source_rect.Y;
                                                                                //var testv = _sc_jitter_tasks[0][0].frameByteArray[byteindex];
                                                                                //source_rect.X += wid;


                                                                                for (int zz = 0; zz < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth; zz++)
                                                                                {


                                                                                    //TO READD //removed 27 october 27
                                                                                    //source_rect.X += wid;
                                                                                }
                                                                                //ycolpix += num_cols;
                                                                                //divyadd += divy;// 1080/ somevoxelvirtualdesktopglobals.tinyChunkHeight;

                                                                                //ycolpix++;
                                                                            }
                                                                            //xrowpix += num_rows;
                                                                            //divxadd += divx;// 1920 / somevoxelvirtualdesktopglobals.tinyChunkWidth;
                                                                        }*/
                                                                    }
                                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].copytobuffer = 0;
                                                                }


                                                                /*
                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesLocationW = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesLocationW;
                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesLocationH = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesLocationH;

                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_InstancesFORWARD = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataFORWARD;
                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_InstancesRIGHT = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataRIGHT;
                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_InstancesUP = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataUP;

                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].heightmapmatrix;
                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].lightBufferInstChunk;
                                                                somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_Instances = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instances;
                                                                */

                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.ToString());
                    }
                    //VOXEL VIRTUAL DESKTOP
                    //VOXEL VIRTUAL DESKTOP
                    //VOXEL VIRTUAL DESKTOP


                    //debug dirty pixel region
                    //debug dirty pixel region

                    //Console.WriteLine("pixel regions processed:" + dirtyareasfound);

                    //debug dirty pixel region
                    //debug dirty pixel region

                    sccsvvdhd.Form1.currentform.picturebox1regiondirtypixelrgb = dirtyareasfound;


                    /*
                    var _bitmap = new System.Drawing.Bitmap(1920, 1080, 1920 * 4, System.Drawing.Imaging.PixelFormat.Format32bppArgb, Marshal.UnsafeAddrOfPinnedArrayElement(_sc_jitter_tasks[0][0].frameByteArray, 0));
                    _bitmap.Save(@"C:\Users\steve\Desktop\screenrecord\" + bitmapcounter + "_" + rows.ToString("00") + columns.ToString("00") + ".png");
                    bitmapcounter++;


                    activatevrheightmapfeature = 0;*/
                }
                else
                {

                }

            }
            //VOXEL VIRTUAL DESKTOP
            //VOXEL VIRTUAL DESKTOP
            //VOXEL VIRTUAL DESKTOP











            if (somevoxelvirtualdesktopglobals != null)
            {

                float disco_sphere_rot_speed = 0.5f;
                var timeSinceStart = (float)(DateTime.Now - startTime).TotalSeconds;
                Matrix worldmatlightrot = Matrix.Scaling(1.0f) * Matrix.RotationX(timeSinceStart * disco_sphere_rot_speed) * Matrix.RotationY(timeSinceStart * 2 * disco_sphere_rot_speed) * Matrix.RotationZ(timeSinceStart * 3 * disco_sphere_rot_speed);
                //Matrix worldmatlightrot = Matrix.Scaling(1.0f) * Matrix.RotationY(timeSinceStart * 2 * disco_sphere_rot_speed);

                //var dirInstanceRight = sc_maths._newgetdirleft(somedirquat);
                //var dirInstanceUp = sc_maths._newgetdirup(somedirquat);

                var rotcam = worldmatlightrot;//sccs.scgraphics.scupdate.Camera.rotationMatrix; //
                Quaternion lightrotquat;
                Quaternion.RotationMatrix(ref rotcam, out lightrotquat);
                Vector4 dirlight = new Vector4(sc_maths._newgetdirforward(lightrotquat), 1.0f);









                //VOXEL VIRTUAL DESKTOP
                //VOXEL VIRTUAL DESKTOP
                //VOXEL VIRTUAL DESKTOP
                for (int xxx = 0; xxx < somevoxelvirtualdesktopw; xxx++)
                {
                    for (int yyy = 0; yyy < somevoxelvirtualdesktoph; yyy++)
                    {
                        for (int zzz = 0; zzz < somevoxelvirtualdesktopd; zzz++)
                        {
                            //somechunkmesh
                            var somevoxelvirtualdesktopindex = xxx + somevoxelvirtualdesktopw * (yyy + somevoxelvirtualdesktoph * zzz);


                            for (int x = 0; x < somevoxelvirtualdesktopglobals.numberOfObjectInWidth; x++)
                            {
                                for (int y = 0; y < somevoxelvirtualdesktopglobals.numberOfObjectInHeight; y++)
                                {
                                    for (int z = 0; z < somevoxelvirtualdesktopglobals.numberOfObjectInDepth; z++)
                                    {
                                        int c = x + somevoxelvirtualdesktopglobals.numberOfObjectInWidth * (y + somevoxelvirtualdesktopglobals.numberOfObjectInHeight * z);

                                        for (int xx = 0; xx < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth; xx++)
                                        {
                                            for (int yy = 0; yy < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight; yy++)
                                            {
                                                for (int zz = 0; zz < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth; zz++)
                                                {
                                                    int cc = xx + somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * (yy + somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * zz);

                                                    Matrix worldMatrixChunkDroneInstance = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].arrayofzeromeshinstances[cc].current_pos;

                                                    Matrix worldMatrixmain = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].worldmatofobj;

                                                    Matrix resmat;
                                                    Matrix.Multiply(ref worldMatrixmain, ref worldMatrixChunkDroneInstance, out resmat);
                                                    Quaternion _testQuator;


                                                    //worldMatrixChunkDroneInstance = worldMatrixChunkDroneInstance * somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].worldmatofobj;

                                                    //TOREADD
                                                    //TOREADD
                                                    //TOREADD
                                                    Quaternion.RotationMatrix(ref worldMatrixChunkDroneInstance, out _testQuator);

                                                    var dirInstanceForward = sc_maths._newgetdirforward(_testQuator);
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataFORWARD[cc].instancePos.X = dirInstanceForward.X;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataFORWARD[cc].instancePos.Y = dirInstanceForward.Y;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataFORWARD[cc].instancePos.Z = dirInstanceForward.Z;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataFORWARD[cc].instancePos.W = 1;

                                                    //Quaternion.RotationMatrix(ref tempmat0, out quat_buffers);
                                                    var dirInstanceRight = -sc_maths._newgetdirleft(_testQuator);
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataRIGHT[cc].instancePos.X = dirInstanceRight.X;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataRIGHT[cc].instancePos.Y = dirInstanceRight.Y;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataRIGHT[cc].instancePos.Z = dirInstanceRight.Z;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataRIGHT[cc].instancePos.W = 1;

                                                    //Quaternion.RotationMatrix(ref tempmat0, out quat_buffers);    
                                                    var dirInstanceUp = sc_maths._newgetdirup(_testQuator);
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataUP[cc].instancePos.X = dirInstanceUp.X;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataUP[cc].instancePos.Y = dirInstanceUp.Y;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataUP[cc].instancePos.Z = dirInstanceUp.Z;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataUP[cc].instancePos.W = 1;

                                                    //TOREADD
                                                    //TOREADD
                                                    //TOREADD

                                                    /*
                                                    Vector4 cursorpos = new Vector4(worldMatrix_instances_screen_assets[0][0][19].M41, worldMatrix_instances_screen_assets[0][0][19].M42, worldMatrix_instances_screen_assets[0][0][19].M43,1.0f);

                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lightBuffer[0].lightDirection = dirlight;//

                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lightBuffer[0].lightPosition = cursorpos;// new Vector4(0, 1, 0, 1.0f);

                                                    //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lightBuffer[0].lightPosition = cursorpos - new Vector4(dirInstanceForward.X, dirInstanceForward.Y, dirInstanceForward.Z, 1.0f);
                                                    //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer[0].lightDirection = -Vector3.Up;// dirlight;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lightBuffer[0].ambientColor = ambientColor;

                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lightBuffer[0].diffuseColor = diffuseColour;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lightBuffer[0].lightextras = diffuseColour;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lightBuffer[0].lightextras.X = 35;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lightBuffer[0].lightextras.Y = 100;

                                                    //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lightBuffer[0].padding0 = 75;
                                                    //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lightBuffer[0].padding1 = 100;
                                                    //specularPower
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lightBuffer[0].specularcolor = new Vector4(1, 1, 1, 1);

                                                    */





                                                    /*Matrix worldMatrixChunkDroneInstance = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].arrayofzeromeshinstances[cc].current_pos;

                                                    Matrix worldMatrixmain = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].worldmatofobj;

                                                    Matrix resmat;
                                                    Matrix.Multiply(ref worldMatrixmain, ref worldMatrixChunkDroneInstance, out resmat);
                                                    Quaternion _testQuator;
                                                    */

                                                    //worldMatrixChunkDroneInstance = worldMatrixChunkDroneInstance * somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].worldmatofobj;

                                                    //TOREADD
                                                    //TOREADD
                                                    //TOREADD
                                                    /*Quaternion.RotationMatrix(ref worldMatrixChunkDroneInstance, out _testQuator);

                                                    var dirInstanceForward = sc_maths._newgetdirforward(_testQuator);
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataFORWARD[cc].instancePos.X = dirInstanceForward.X;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataFORWARD[cc].instancePos.Y = dirInstanceForward.Y;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataFORWARD[cc].instancePos.Z = dirInstanceForward.Z;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataFORWARD[cc].instancePos.W = 1;

                                                    //Quaternion.RotationMatrix(ref tempmat0, out quat_buffers);
                                                    var dirInstanceRight = -sc_maths._newgetdirleft(_testQuator);
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataRIGHT[cc].instancePos.X = dirInstanceRight.X;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataRIGHT[cc].instancePos.Y = dirInstanceRight.Y;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataRIGHT[cc].instancePos.Z = dirInstanceRight.Z;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataRIGHT[cc].instancePos.W = 1;

                                                    //Quaternion.RotationMatrix(ref tempmat0, out quat_buffers);    
                                                    var dirInstanceUp = sc_maths._newgetdirup(_testQuator);
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataUP[cc].instancePos.X = dirInstanceUp.X;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataUP[cc].instancePos.Y = dirInstanceUp.Y;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataUP[cc].instancePos.Z = dirInstanceUp.Z;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataUP[cc].instancePos.W = 1;
                                                    */
                                                    //TOREADD
                                                    //TOREADD
                                                    //TOREADD




                                                    /*

                                                    Quaternion.RotationMatrix(ref worldMatrixChunkDroneInstance, out _testQuator);

                                                    var dirInstanceForward = sc_maths._newgetdirforward(_testQuator);
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_InstancesFORWARD[cc].instancePos.X = dirInstanceForward.X;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_InstancesFORWARD[cc].instancePos.Y = dirInstanceForward.Y;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_InstancesFORWARD[cc].instancePos.Z = dirInstanceForward.Z;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_InstancesFORWARD[cc].instancePos.W = 1;

                                                    //Quaternion.RotationMatrix(ref tempmat0, out quat_buffers);
                                                    var dirInstanceRight = -sc_maths._newgetdirleft(_testQuator);
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_InstancesRIGHT[cc].instancePos.X = dirInstanceRight.X;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_InstancesRIGHT[cc].instancePos.Y = dirInstanceRight.Y;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_InstancesRIGHT[cc].instancePos.Z = dirInstanceRight.Z;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_InstancesRIGHT[cc].instancePos.W = 1;

                                                    //Quaternion.RotationMatrix(ref tempmat0, out quat_buffers);    
                                                    var dirInstanceUp = sc_maths._newgetdirup(_testQuator);
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_InstancesUP[cc].instancePos.X = dirInstanceUp.X;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_InstancesUP[cc].instancePos.Y = dirInstanceUp.Y;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_InstancesUP[cc].instancePos.Z = dirInstanceUp.Z;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_InstancesUP[cc].instancePos.W = 1;
                                                    */
                                                    /*
                                                    Vector3 currentmainobjectpos = new Vector3(somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].worldmatofobj.M41, somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].worldmatofobj.M42, somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].worldmatofobj.M43);

                                                    float diffmainpostoinstanceposx = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instances[cc].instancePos.X - currentmainobjectpos.X;
                                                    float diffmainpostoinstanceposy = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instances[cc].instancePos.Y - currentmainobjectpos.Y;
                                                    float diffmainpostoinstanceposz = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instances[cc].instancePos.Z - currentmainobjectpos.Z;
                                                    */




                                                    /*Quaternion somedirquat;

                                                    Quaternion.RotationMatrix(ref worldMatrixChunkDroneInstance, out somedirquat);

                                                    var dirInstanceForward = sc_maths._newgetdirforward(somedirquat);
                                                    var dirInstanceRight = -sc_maths._newgetdirleft(somedirquat);
                                                    var dirInstanceUp = sc_maths._newgetdirup(somedirquat);*/

                                                    /*Vector4 somevecx = new Vector4(dirInstanceRight.X, dirInstanceRight.Y, dirInstanceRight.Z, 1.0f);
                                                    Vector4 somevecy = new Vector4(dirInstanceUp.X, dirInstanceUp.Y, dirInstanceUp.Z, 1.0f);
                                                    Vector4 somevecz = new Vector4(dirInstanceForward.X, dirInstanceForward.Y, dirInstanceForward.Z, 1.0f);

                                                    Vector4 someinstancepostest = Vector4.Zero;
                                                    Vector4 somemainpos = new Vector4(worldMatrixmain.M41, worldMatrixmain.M42, worldMatrixmain.M43, 1.0f);

                                                    someinstancepostest = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instances[cc].instancePos + (somevecx);// * (xx * 4 * 4 * 0.01f * 0.5f * 0.5f));
                                                    someinstancepostest = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instances[cc].instancePos + (somevecy);//  * (yy * 4 * 4 * 0.01f * 0.5f * 0.5f));
                                                    someinstancepostest = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instances[cc].instancePos + (somevecz);//  * (zz * 4 * 4 * 0.01f * 0.5f * 0.5f));
                                                    */
                                                    //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instances[cc].instancePos.X += somemainpos.X + someinstancepostest.X;
                                                    //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instances[cc].instancePos.Y += somemainpos.Y + someinstancepostest.Y;
                                                    //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instances[cc].instancePos.Z += somemainpos.Z + someinstancepostest.Z;
                                                    /*
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instances[cc].instancePos.X = someinstancepostest.X;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instances[cc].instancePos.Y = someinstancepostest.Y;
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instances[cc].instancePos.Z = someinstancepostest.Z;
                                                    */


                                                    //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_Instances[cc].instancePos.X = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_Instances[cc].instancePos.X + -(somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_InstancesFORWARD[cc].instancePos.X * diffmainpostoinstanceposx);
                                                    //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_Instances[cc].instancePos.Y = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_Instances[cc].instancePos.Y + -(somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_InstancesFORWARD[cc].instancePos.Y * diffmainpostoinstanceposy);
                                                    //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_Instances[cc].instancePos.Z = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_Instances[cc].instancePos.Z + -(somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_InstancesFORWARD[cc].instancePos.Z * diffmainpostoinstanceposz);

                                                    //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_Instances[cc].instancePos.X = currentmainobjectpos.X + (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instan[cc].instancePos.X + (dirInstanceRight.X * diffmainpostoinstanceposx));
                                                    //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_Instances[cc].instancePos.Y = currentmainobjectpos.Y + (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instances[cc].instancePos.Y + (dirInstanceUp.Y * diffmainpostoinstanceposy));
                                                    //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_Instances[cc].instancePos.Z = currentmainobjectpos.Z + (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instances[cc].instancePos.Z + (dirInstanceForward.Z * diffmainpostoinstanceposz));


                                                    /*Vector4 somevecx = new Vector4(dirInstanceRight.X, dirInstanceRight.Y, dirInstanceRight.Z, 1.0f);
                                                    Vector4 somevecy = new Vector4(dirInstanceUp.X, dirInstanceUp.Y, dirInstanceUp.Z, 1.0f);
                                                    Vector4 somevecz = new Vector4(dirInstanceForward.X, dirInstanceForward.Y, dirInstanceForward.Z, 1.0f);

                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_Instances[cc].instancePos = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_Instances[cc].instancePos + (somevecx * diffmainpostoinstanceposx);
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_Instances[cc].instancePos = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_Instances[cc].instancePos + (somevecy * diffmainpostoinstanceposy);
                                                    somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_Instances[cc].instancePos = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_Instances[cc].instancePos + (somevecz * diffmainpostoinstanceposz);

                                                    */




                                                }
                                            }
                                        }






                                        if (somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].copytobuffer == 1)
                                        {
                                            for (int xx = 0; xx < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth; xx++)
                                            {
                                                for (int yy = 0; yy < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight; yy++)
                                                {
                                                    for (int zz = 0; zz < somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInDepth; zz++)
                                                    {
                                                        int cc = xx + somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInWidth * (yy + somevoxelvirtualdesktopglobals.numberOfInstancesPerObjectInHeight * zz);

                                                        //Matrix worldMatrixChunkDroneInstance = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].arrayofzeromeshinstances[cc].current_pos;
                                                        //Quaternion _testQuator;


                                                        //TO READD FOR SOME LOGIC.
                                                        //Matrix lastPosTarget = _player_rght_hnd[0][0]._arrayOfInstances[0].current_pos;// //_rightTouchMatrix; //
                                                        //Quaternion.RotationMatrix(ref lastPosTarget, out _testQuator);
                                                        //TO READD FOR SOME LOGIC.




                                                        //arrayofindexzeromesh[c].arrayOfScriptForInstances[cc].

                                                        //var dirTargetInstanceForward = sc_maths._newgetdirforward(_testQuator);
                                                        //arrayofindexzeromesh[c].instancesDataFORWARD[cc].instancePos.X = dirTargetInstanceForward.X;
                                                        //arrayofindexzeromesh[c].instancesDataFORWARD[cc].instancePos.Y = dirTargetInstanceForward.Y;
                                                        //arrayofindexzeromesh[c].instancesDataFORWARD[cc].instancePos.Z = dirTargetInstanceForward.Z;
                                                        //arrayofindexzeromesh[c].instancesDataFORWARD[cc].instancePos.W = 1;

                                                        //Quaternion.RotationMatrix(ref tempmat0, out quat_buffers);
                                                        //var dirTargetInstanceRight = sc_maths._newgetdirleft(_testQuator);
                                                        //arrayofindexzeromesh[c].instancesDataRIGHT[cc].instancePos.X = dirTargetInstanceRight.X;
                                                        //arrayofindexzeromesh[c].instancesDataRIGHT[cc].instancePos.Y = dirTargetInstanceRight.Y;
                                                        //arrayofindexzeromesh[c].instancesDataRIGHT[cc].instancePos.Z = dirTargetInstanceRight.Z;
                                                        //arrayofindexzeromesh[c].instancesDataRIGHT[cc].instancePos.W = 1;

                                                        //Quaternion.RotationMatrix(ref tempmat0, out quat_buffers);
                                                        //var dirTargetInstanceUp = sc_maths._newgetdirup(_testQuator);
                                                        //arrayofindexzeromesh[c].instancesDataUP[cc].instancePos.X = dirTargetInstanceUp.X;
                                                        //arrayofindexzeromesh[c].instancesDataUP[cc].instancePos.Y = dirTargetInstanceUp.Y;
                                                        //arrayofindexzeromesh[c].instancesDataUP[cc].instancePos.Z = dirTargetInstanceUp.Z;
                                                        //arrayofindexzeromesh[c].instancesDataUP[cc].instancePos.W = 1;

                                                        //worldMatrixChunkDroneInstance = arrayofindexzeromesh[c].arrayOfScriptForInstances[cc].current_pos;
                                                        //Matrix lastPosDrone = _player_rght_hnd[0][0]._arrayOfInstances[0].current_pos;// //_rightTouchMatrix; //


                                                        //TOREADD
                                                        //TOREADD
                                                        //TOREADD
                                                        /*Quaternion.RotationMatrix(ref worldMatrixChunkDroneInstance, out _testQuator);

                                                        var dirInstanceForward = sc_maths._newgetdirforward(_testQuator);
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataFORWARD[cc].instancePos.X = dirInstanceForward.X;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataFORWARD[cc].instancePos.Y = dirInstanceForward.Y;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataFORWARD[cc].instancePos.Z = dirInstanceForward.Z;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataFORWARD[cc].instancePos.W = 1;

                                                        //Quaternion.RotationMatrix(ref tempmat0, out quat_buffers);
                                                        var dirInstanceRight = -sc_maths._newgetdirleft(_testQuator);
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataRIGHT[cc].instancePos.X = dirInstanceRight.X;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataRIGHT[cc].instancePos.Y = dirInstanceRight.Y;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataRIGHT[cc].instancePos.Z = dirInstanceRight.Z;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataRIGHT[cc].instancePos.W = 1;

                                                        //Quaternion.RotationMatrix(ref tempmat0, out quat_buffers);    
                                                        var dirInstanceUp = sc_maths._newgetdirup(_testQuator);
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataUP[cc].instancePos.X = dirInstanceUp.X;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataUP[cc].instancePos.Y = dirInstanceUp.Y;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataUP[cc].instancePos.Z = dirInstanceUp.Z;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataUP[cc].instancePos.W = 1;
                                                        */
                                                        //TOREADD
                                                        //TOREADD
                                                        //TOREADD







                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].arrayOfScriptForInstances[cc].current_pos.M41 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instances[cc].instancePos.X;
                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].arrayOfScriptForInstances[cc].current_pos.M42 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instances[cc].instancePos.Y;
                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].arrayOfScriptForInstances[cc].current_pos.M43 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instances[cc].instancePos.Z;


                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].arrayOfScriptForInstances[cc].current_pos.M41 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instances[cc].instancePos.X;
                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].arrayOfScriptForInstances[cc].current_pos.M42 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instances[cc].instancePos.Y;
                                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].arrayOfScriptForInstances[cc].current_pos.M43 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instances[cc].instancePos.Z;


                                                        /*
                                                        //TO READD
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M11 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M11;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M12 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M12;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M13 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M13;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M14 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M14;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M21 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M21;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M22 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M22;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M23 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M23;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M24 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M24;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M31 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M31;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M32 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M32;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M33 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M33;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M34 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M34;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M41 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M41;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M42 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M42;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M43 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M43;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrix[cc].instancematrix.M44 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrix[cc].instancematrix.M44;




                                                        //TO READD
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M11 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M11;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M12 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M12;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M13 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M13;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M14 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M14;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M21 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M21;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M22 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M22;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M23 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M23;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M24 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M24;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M31 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M31;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M32 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M32;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M33 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M33;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M34 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M34;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M41 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M41;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M42 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M42;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M43 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M43;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M44 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M44;






                                                        //TO READD
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M11 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M11;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M12 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M12;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M13 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M13;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M14 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M14;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M21 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M21;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M22 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M22;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M23 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M23;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M24 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M24;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M31 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M31;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M32 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M32;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M33 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M33;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M34 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M34;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M41 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M41;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M42 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M42;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M43 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M43;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M44 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M44;




                                                        //TO READD
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M11 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M11;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M12 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M12;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M13 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M13;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M14 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M14;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M21 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M21;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M22 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M22;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M23 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M23;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M24 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M24;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M31 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M31;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M32 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M32;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M33 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M33;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M34 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M34;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M41 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M41;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M42 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M42;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M43 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M43;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M44 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M44;

                                                        */





                                                        /*
                                                        //TO READD
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M11 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M11;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M12 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M12;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M13 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M13;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M14 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M14;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M21 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M21;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M22 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M22;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M23 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M23;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M24 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M24;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M31 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M31;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M32 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M32;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M33 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M33;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M34 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M34;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M41 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M41;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M42 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M42;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M43 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M43;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixb[cc].instancematrix.M44 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixb[cc].instancematrix.M44;






                                                        //TO READD
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M11 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M11;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M12 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M12;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M13 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M13;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M14 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M14;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M21 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M21;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M22 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M22;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M23 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M23;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M24 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M24;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M31 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M31;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M32 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M32;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M33 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M33;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M34 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M34;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M41 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M41;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M42 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M42;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M43 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M43;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixc[cc].instancematrix.M44 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixc[cc].instancematrix.M44;




                                                        //TO READD
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M11 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M11;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M12 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M12;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M13 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M13;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M14 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M14;

                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M21 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M21;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M22 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M22;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M23 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M23;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M24 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M24;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M31 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M31;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M32 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M32;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M33 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M33;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M34 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M34;


                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M41 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M41;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M42 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M42;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M43 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M43;
                                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesmatrixd[cc].instancematrix.M44 = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesmatrixd[cc].instancematrix.M44;

                                                        */

                                                    }
                                                }
                                            }



                                            somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].copytobuffer = 0;
                                        }








                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesLocationW = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesLocationW;
                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].instancesLocationH = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesLocationH;

                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_InstancesFORWARD = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataFORWARD;
                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_InstancesRIGHT = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataRIGHT;
                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_InstancesUP = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instancesDataUP;

                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].heightmapmatrix = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].heightmapmatrix;
                                        //somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].lightBuffer = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].lightBuffer;
                                        somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayOfChunkData[c].SC_instancedChunk_Instances = somevoxelvirtualdesktop[somevoxelvirtualdesktopindex].arrayofindexzeromesh[c].instances;

                                    }
                                }
                            }
                        }
                    }
                }
            }


            return _sc_jitter_tasks;
        }











        public scmessageobjectjitter[][] sccswritescreenassetstobuffer(scmessageobjectjitter[][] _sc_jitter_tasks)
        {


            if (worldMatrix_instances_screens != null)
            {

                if (worldMatrix_instances_screens[0] != null)
                {

                    if (worldMatrix_instances_screens[0][0] != null)
                    {

                        //PHYSICS SCREENS
                        _world_screen_list[0][0]._WORLDMATRIXINSTANCES = worldMatrix_instances_screens[0][0];
                        _world_screen_list[0][0]._POSITION = worldMatrix_base[0];
                        //END OF 

                    

                        //PHYSICS SCREENS
                        var cuber = _world_screen_list[0][0];
                        var instancers = cuber.instances;
                        var sometester = cuber._WORLDMATRIXINSTANCES;

                        for (int i = 0; i < instancers.Length; i++)
                        {
                            float xxx = sometester[i].M41;
                            float yyy = sometester[i].M42;
                            float zzz = sometester[i].M43;

                            cuber.instances[i].position.X = xxx;
                            cuber.instances[i].position.Y = yyy;
                            cuber.instances[i].position.Z = zzz;
                            cuber.instances[i].position.W = 1;
                            Quaternion.RotationMatrix(ref sometester[i], out _testQuater);

                            var dirInstance = sc_maths._newgetdirforward(_testQuater);
                            cuber.instancesDataForward[i].rotation.X = dirInstance.X;
                            cuber.instancesDataForward[i].rotation.Y = dirInstance.Y;
                            cuber.instancesDataForward[i].rotation.Z = dirInstance.Z;
                            cuber.instancesDataForward[i].rotation.W = 1;

                            dirInstance = -sc_maths._newgetdirleft(_testQuater);
                            cuber.instancesDataRIGHT[i].rotation.X = dirInstance.X;
                            cuber.instancesDataRIGHT[i].rotation.Y = dirInstance.Y;
                            cuber.instancesDataRIGHT[i].rotation.Z = dirInstance.Z;
                            cuber.instancesDataRIGHT[i].rotation.W = 1;

                            dirInstance = dirInstance = sc_maths._newgetdirup(_testQuater);
                            cuber.instancesDataUP[i].rotation.X = dirInstance.X;
                            cuber.instancesDataUP[i].rotation.Y = dirInstance.Y;
                            cuber.instancesDataUP[i].rotation.Z = dirInstance.Z;
                            cuber.instancesDataUP[i].rotation.W = 1;
                        }
                        //END OF

                    }
                }
            }




            if (worldMatrix_instances_screen_assets != null)
            {

                if (worldMatrix_instances_screen_assets[0] != null)
                {

                    if (worldMatrix_instances_screen_assets[0][0] != null)
                    {


                        //PHYSICS SCREEN ASSETS
                        _world_screen_assets_list[0][0]._WORLDMATRIXINSTANCES = worldMatrix_instances_screen_assets[0][0];
                        _world_screen_assets_list[0][0]._POSITION = worldMatrix_base[0];
                        //END OF

                        //PHYSICS SCREEN ASSETS
                        var cuber = _world_screen_assets_list[0][0];
                        var instancers = cuber.instances;
                        var sometester = cuber._WORLDMATRIXINSTANCES;

                        for (int i = 0; i < instancers.Length; i++)
                        {
                            var xxx = sometester[i].M41;
                            var yyy = sometester[i].M42;
                            var zzz = sometester[i].M43;

                            cuber.instances[i].position.X = xxx;
                            cuber.instances[i].position.Y = yyy;
                            cuber.instances[i].position.Z = zzz;
                            cuber.instances[i].position.W = 1;
                            Quaternion.RotationMatrix(ref sometester[i], out _testQuater);

                            var dirInstance = sc_maths._newgetdirforward(_testQuater);
                            cuber.instancesDataForward[i].rotation.X = dirInstance.X;
                            cuber.instancesDataForward[i].rotation.Y = dirInstance.Y;
                            cuber.instancesDataForward[i].rotation.Z = dirInstance.Z;
                            cuber.instancesDataForward[i].rotation.W = 1;

                            dirInstance = -sc_maths._newgetdirleft(_testQuater);
                            cuber.instancesDataRIGHT[i].rotation.X = dirInstance.X;
                            cuber.instancesDataRIGHT[i].rotation.Y = dirInstance.Y;
                            cuber.instancesDataRIGHT[i].rotation.Z = dirInstance.Z;
                            cuber.instancesDataRIGHT[i].rotation.W = 1;

                            dirInstance = dirInstance = sc_maths._newgetdirup(_testQuater);
                            cuber.instancesDataUP[i].rotation.X = dirInstance.X;
                            cuber.instancesDataUP[i].rotation.Y = dirInstance.Y;
                            cuber.instancesDataUP[i].rotation.Z = dirInstance.Z;
                            cuber.instancesDataUP[i].rotation.W = 1;
                        }


                        Quaternion quat_buffers;


                        for (int xx = 0; xx < Program.physicsengineinstancex; xx++)
                        {
                            for (int yy = 0; yy < Program.physicsengineinstancey; yy++)
                            {
                                for (int zz = 0; zz < Program.physicsengineinstancez; zz++)
                                {
                                    var indexer00 = xx + Program.physicsengineinstancex * (yy + Program.physicsengineinstancey * zz);

                                    try
                                    {

                                        for (int x = 0; x < Program.worldwidth; x++)
                                        {
                                            for (int y = 0; y < Program.worldheight; y++)
                                            {
                                                for (int z = 0; z < Program.worlddepth; z++)
                                                {
                                                    var indexer01 = x + Program.worldwidth * (y + Program.worldheight * z);

                                                    //PHYSICS CUBES
                                                    /*_world_cube_list[indexer00][indexer01]._WORLDMATRIXINSTANCES = worldMatrix_instances_cubes[indexer00][indexer01]; // 
                                                    _world_cube_list[indexer00][indexer01]._POSITION = worldMatrix_base[0];

                                                    cuber = _world_cube_list[indexer00][indexer01];
                                                    instancers = cuber.instances;
                                                    sometester = cuber._WORLDMATRIXINSTANCES;

                                                    for (int i = 0; i < instancers.Length; i++)
                                                    {
                                                        float xxx = sometester[i].M41;
                                                        float yyy = sometester[i].M42;
                                                        float zzz = sometester[i].M43;

                                                        cuber.instances[i].position.X = xxx;
                                                        cuber.instances[i].position.Y = yyy;
                                                        cuber.instances[i].position.Z = zzz;
                                                        cuber.instances[i].position.W = 1;

                                                        Quaternion.RotationMatrix(ref sometester[i], out quat_buffers);

                                                        var dirInstance = sc_maths._newgetdirforward(quat_buffers);
                                                        //var dirInstance = _newgetdirforward(_testQuater);
                                                        cuber.instancesDataForward[i].rotation.X = dirInstance.X;
                                                        cuber.instancesDataForward[i].rotation.Y = dirInstance.Y;
                                                        cuber.instancesDataForward[i].rotation.Z = dirInstance.Z;
                                                        cuber.instancesDataForward[i].rotation.W = 1;

                                                        dirInstance = -sc_maths._newgetdirleft(quat_buffers);
                                                        //dirInstance = -_newgetdirleft(_testQuater);
                                                        cuber.instancesDataRIGHT[i].rotation.X = dirInstance.X;
                                                        cuber.instancesDataRIGHT[i].rotation.Y = dirInstance.Y;
                                                        cuber.instancesDataRIGHT[i].rotation.Z = dirInstance.Z;
                                                        cuber.instancesDataRIGHT[i].rotation.W = 1;

                                                        dirInstance = sc_maths._newgetdirup(quat_buffers);
                                                        //dirInstance = dirInstance = _newgetdirup(_testQuater);
                                                        cuber.instancesDataUP[i].rotation.X = dirInstance.X;
                                                        cuber.instancesDataUP[i].rotation.Y = dirInstance.Y;
                                                        cuber.instancesDataUP[i].rotation.Z = dirInstance.Z;
                                                        cuber.instancesDataUP[i].rotation.W = 1;
                                                    }
                                                    //END OF*/



                                                    /*
                                                    //PHYSICS VOXEL SPHEROID
                                                    worldvoxelcubelists[indexer00][indexer01]._WORLDMATRIXINSTANCES = worldMatrixinstancesvoxelcube[indexer00][indexer01];
                                                    worldvoxelcubelists[indexer00][indexer01]._POSITION = worldMatrix_base[0];
                                                    //END OF

                                                    //PHYSICS VOXEL THINGS
                                                    var voxel_cube = worldvoxelcubelists[indexer00][indexer01];
                                                    var instances_voxel_cube = voxel_cube.instances;
                                                    var _voxel_cube_Worldmatrix_of_instances = voxel_cube._WORLDMATRIXINSTANCES;

                                                    for (int i = 0; i < instances_voxel_cube.Length; i++)
                                                    {
                                                        float xxx = _voxel_cube_Worldmatrix_of_instances[i].M41;
                                                        float yyy = _voxel_cube_Worldmatrix_of_instances[i].M42;
                                                        float zzz = _voxel_cube_Worldmatrix_of_instances[i].M43;

                                                        voxel_cube.instances[i].position.X = xxx;
                                                        voxel_cube.instances[i].position.Y = yyy;
                                                        voxel_cube.instances[i].position.Z = zzz;
                                                        voxel_cube.instances[i].position.W = 1;
                                                        Quaternion.RotationMatrix(ref _voxel_cube_Worldmatrix_of_instances[i], out quat_buffers);

                                                        var dirInstance = sc_maths._newgetdirforward(quat_buffers);
                                                        voxel_cube.instancesDataForward[i].rotation.X = dirInstance.X;
                                                        voxel_cube.instancesDataForward[i].rotation.Y = dirInstance.Y;
                                                        voxel_cube.instancesDataForward[i].rotation.Z = dirInstance.Z;
                                                        voxel_cube.instancesDataForward[i].rotation.W = 1;

                                                        dirInstance = -sc_maths._newgetdirleft(quat_buffers);
                                                        voxel_cube.instancesDataRIGHT[i].rotation.X = dirInstance.X;
                                                        voxel_cube.instancesDataRIGHT[i].rotation.Y = dirInstance.Y;
                                                        voxel_cube.instancesDataRIGHT[i].rotation.Z = dirInstance.Z;
                                                        voxel_cube.instancesDataRIGHT[i].rotation.W = 1;

                                                        dirInstance = sc_maths._newgetdirup(quat_buffers);
                                                        voxel_cube.instancesDataUP[i].rotation.X = dirInstance.X;
                                                        voxel_cube.instancesDataUP[i].rotation.Y = dirInstance.Y;
                                                        voxel_cube.instancesDataUP[i].rotation.Z = dirInstance.Z;
                                                        voxel_cube.instancesDataUP[i].rotation.W = 1;
                                                    }*/
                                                }
                                            }
                                        }
                                    }
                                    catch
                                    {

                                    }
                                }
                            }
                        }
                    }
                }
            }

            return _sc_jitter_tasks;
        }



        public void writevoxelstobuffer()
        {
            if (worldMatrix_instances_voxel_cube != null)
            {

                if (worldMatrix_instances_voxel_cube[0] != null)
                {

                    if (worldMatrix_instances_voxel_cube[0][0] != null)
                    {
                        Quaternion quat_buffers;
                        //PHYSICS VOXEL SPHEROID
                        _world_voxel_cube_lists[0][0]._WORLDMATRIXINSTANCES = worldMatrix_instances_voxel_cube[0][0];
                        _world_voxel_cube_lists[0][0]._POSITION = worldMatrix_base[0];
                        //END OF

                        //PHYSICS VOXEL THINGS
                        var voxel_cube = _world_voxel_cube_lists[0][0];
                        var instances_voxel_cube = voxel_cube.instances;
                        var _voxel_cube_Worldmatrix_of_instances = voxel_cube._WORLDMATRIXINSTANCES;

                        for (int i = 0; i < instances_voxel_cube.Length; i++)
                        {
                            float xxx = _voxel_cube_Worldmatrix_of_instances[i].M41;
                            float yyy = _voxel_cube_Worldmatrix_of_instances[i].M42;
                            float zzz = _voxel_cube_Worldmatrix_of_instances[i].M43;

                            voxel_cube.instances[i].position.X = xxx;
                            voxel_cube.instances[i].position.Y = yyy;
                            voxel_cube.instances[i].position.Z = zzz;
                            voxel_cube.instances[i].position.W = 1;
                            Quaternion.RotationMatrix(ref _voxel_cube_Worldmatrix_of_instances[i], out quat_buffers);

                            var dirInstance = sc_maths._newgetdirforward(quat_buffers);
                            voxel_cube.instancesDataForward[i].rotation.X = dirInstance.X;
                            voxel_cube.instancesDataForward[i].rotation.Y = dirInstance.Y;
                            voxel_cube.instancesDataForward[i].rotation.Z = dirInstance.Z;
                            voxel_cube.instancesDataForward[i].rotation.W = 1;

                            dirInstance = -sc_maths._newgetdirleft(quat_buffers);
                            voxel_cube.instancesDataRIGHT[i].rotation.X = dirInstance.X;
                            voxel_cube.instancesDataRIGHT[i].rotation.Y = dirInstance.Y;
                            voxel_cube.instancesDataRIGHT[i].rotation.Z = dirInstance.Z;
                            voxel_cube.instancesDataRIGHT[i].rotation.W = 1;

                            dirInstance = sc_maths._newgetdirup(quat_buffers);
                            voxel_cube.instancesDataUP[i].rotation.X = dirInstance.X;
                            voxel_cube.instancesDataUP[i].rotation.Y = dirInstance.Y;
                            voxel_cube.instancesDataUP[i].rotation.Z = dirInstance.Z;
                            voxel_cube.instancesDataUP[i].rotation.W = 1;
                        }
                        //END OF
                    }
                }
            }
        }









        private void _oculus_touch_controls(double percentXRight, double percentYRight, Vector2f[] thumbStickRight, double percentXLeft, double percentYLeft, Vector2f[] thumbStickLeft, double realMousePosX, double realMousePosY) //
        {
            if (Program.useArduinoOVRTouchKeymapper == 1)
            {
                var homebuttonLeftTouchControllerArduino = sccs.scgraphics.scupdate.arduinoDIYOculusTouchArrayOfData[5];

                //Console.WriteLine("homebuttonLeftTouchControllerArduino:" + homebuttonLeftTouchControllerArduino);
                if (homebuttonLeftTouchControllerArduino == 1)//buttonPressedOculusTouchLeft == 1048576)
                {
                    if (hasClickedHomeButtonTouchLeft == 0)
                    {
                        sccs.scgraphics.scdirectx.D3D.OVR.RecenterTrackingOrigin(sccs.scgraphics.scdirectx.D3D.sessionPtr);

                        //hmdrotMatrix

                        Quaternion currentRot;// = hmd_matrix_current;
                        Quaternion.RotationMatrix(ref hmd_matrix_current, out currentRot);

                        hmd_matrix_current = hmd_matrix_current * OriginRot * RotatingMatrix * RotatingMatrixForPelvis * hmdmatrixRot_; //viewMatrix_;


                        hmdmatrixcurrentforpelvis = hmdmatrixcurrentforpelvis * OriginRot * RotatingMatrix * RotatingMatrixForPelvis * hmdmatrixRot_;


                        //RotatingMatrixForPelvis = hmdmatrixRot_ * RotatingMatrixForPelvis;



                        //RotatingMatrixForPelvis = hmd_matrix_current * RotatingMatrixForPelvis;
                        //OriginRot = hmd_matrix_current * OriginRot;





                        //Quaternion currentRotAfter;
                        //Quaternion.RotationMatrix(ref hmd_matrix_current, out currentRotAfter);
                        //Quaternion.Lerp(ref currentRot, ref currentRotAfter, 0.001f, out currentRotAfter);
                        //Matrix.RotationQuaternion(ref currentRotAfter,out hmd_matrix_current);

                        //var timeSinceStart = (float)(DateTime.Now - sccs.scgraphics.scupdate.startTime).TotalSeconds;
                        //Matrix worldmatlightrot = Matrix.Scaling(1.0f) * Matrix.RotationX(timeSinceStart * disco_sphere_rot_speed) * Matrix.RotationY(timeSinceStart * 2 * disco_sphere_rot_speed) * Matrix.RotationZ(timeSinceStart * 3 * disco_sphere_rot_speed);



                        Quaternion _testQuator;
                        Quaternion.RotationMatrix(ref hmd_matrix_current, out _testQuator);

                        var xq = _testQuator.X;
                        var yq = _testQuator.Y;
                        var zq = _testQuator.Z;
                        var wq = _testQuator.W;

                        float roller = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq));// * (180 / Math.PI));
                        float pitcher = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq));// * (180 / Math.PI));//
                        float yawer = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq));// * (180 / Math.PI));

                        //RotationY4Pelvis
                        //Matrix tempMat = RotatingMatrixForPelvis * hmdmatrixRot_;
                        Quaternion.RotationMatrix(ref hmd_matrix_current, out _testQuator);

                        xq = _testQuator.X;
                        yq = _testQuator.Y;
                        zq = _testQuator.Z;
                        wq = _testQuator.W;

                        float rollerPelvis = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq));// * (180 / Math.PI));
                        float pitcherPelvis = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq));// * (180 / Math.PI));//
                        float yawerPelvis = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq));// * (180 / Math.PI));

                        //var pitch = (float)((Math.PI * pitcher + 45) / 180);
                        //var roll = (float)(0);
                        //var yaw = (float)(0);

                        sccs.scgraphics.scupdate.RotationX4Pelvis = pitcher;
                        sccs.scgraphics.scupdate.RotationY4Pelvis = 0;
                        sccs.scgraphics.scupdate.RotationZ4Pelvis = 0;

                        sccs.scgraphics.scupdate.rotatingMatrixForPelvis = SharpDX.Matrix.RotationYawPitchRoll(pitcher, 0, 0);
                        sccs.scgraphics.scupdate.hmdmatrixRot = SharpDX.Matrix.RotationYawPitchRoll(pitcher, 0, 0);

                        hasClickedHomeButtonTouchLeft = 1;
                    }
                }


                if (hasClickedHomeButtonTouchLeft == 1)
                {
                    if (hasClickedHomeButtonTouchLeftCounter > 20)
                    {
                        hasClickedHomeButtonTouchLeft = 0;
                        hasClickedHomeButtonTouchLeftCounter = 0;
                    }
                    hasClickedHomeButtonTouchLeftCounter++;
                }



                var XLeftTouchControllerArduino = sccs.scgraphics.scupdate.arduinoDIYOculusTouchArrayOfData[4];

                //Console.WriteLine("XLeftTouchControllerArduino:" + XLeftTouchControllerArduino);
                if (XLeftTouchControllerArduino == 1)
                {
                    if (sc_menu_scroller_counter >= 75)
                    {
                        if (sc_menu_scroller == 0)
                        {
                            sc_menu_scroller = 1;
                        }
                        else if (sc_menu_scroller == 1)
                        {
                            sc_menu_scroller = 2;
                        }
                        else if (sc_menu_scroller == 2)
                        {
                            sc_menu_scroller = 3;
                        }
                        else if (sc_menu_scroller == 3)
                        {
                            sc_menu_scroller = 4;
                        }
                        else if (sc_menu_scroller == 4)
                        {
                            sc_menu_scroller = 0;
                        }
                        sc_menu_scroller_counter = 0;
                    }
                }
                sc_menu_scroller_counter++;



                var YLeftTouchControllerArduino = sccs.scgraphics.scupdate.arduinoDIYOculusTouchArrayOfData[3];


                if (_has_locked_screen_pos_counter >= 50)
                {
                    if (YLeftTouchControllerArduino == 1)
                    {
                        if (sc_menu_scroller == 0)
                        {
                            if (frame_counter_4_buttonY >= 75)
                            {
                                if (display_grid_type == 0)
                                {
                                    display_grid_type = 1;
                                }
                                else if (display_grid_type == 1)
                                {
                                    display_grid_type = 2;
                                }
                                else if (display_grid_type == 2)
                                {
                                    display_grid_type = 3;
                                }
                                else if (display_grid_type == 3)
                                {
                                    display_grid_type = 0;
                                }
                                frame_counter_4_buttonY = 0;
                            }
                        }
                        else if (sc_menu_scroller == 1)
                        {
                            if (_has_locked_screen_pos == 0)
                            {
                                _has_locked_screen_pos_counter = 0;
                                _has_locked_screen_pos = 1;
                            }
                            else if (_has_locked_screen_pos == 1)
                            {
                                _has_locked_screen_pos_counter = 0;
                                _has_locked_screen_pos = 0;
                            }
                        }
                    }
                }
                frame_counter_4_buttonY++;
                _has_locked_screen_pos_counter++;






                if (sc_menu_scroller == 2)
                {
                    /////////////LEFT OCULUS TOUCH/////////////////////////////////////////////////////////////////////////////////////
                    if (percentXLeft >= 0 && percentXLeft <= 1920 && percentYLeft >= 0 && percentYLeft <= 1080)
                    {
                        var absoluteMoveX = Convert.ToUInt32((percentXLeft * (65535 - 1)) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                        var absoluteMoveY = Convert.ToUInt32((percentYLeft * (65535 - 1)) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);

                        if (percentXLeft >= 0 && percentXLeft < sccs.scgraphics.scdirectx.D3D.SurfaceWidth)
                        {

                        }
                        else
                        {
                            percentXLeft = sccs.scgraphics.scdirectx.D3D.SurfaceWidth;
                            absoluteMoveX = Convert.ToUInt32((percentXLeft * (65535 - 1)) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                        }

                        if (percentYLeft >= 0 && percentYLeft < sccs.scgraphics.scdirectx.D3D.SurfaceHeight)
                        {

                        }
                        else
                        {
                            percentYLeft = sccs.scgraphics.scdirectx.D3D.SurfaceHeight;
                            absoluteMoveY = Convert.ToUInt32((percentYLeft * (65535 - 1)) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);
                        }


                        //MOUSE DOUBLE CLICK LOGIC. IF the PLAYER clicked at one location then it stores the location, and if the player re-clicks inside of 20 frames, then click at the first click location.
                        //It's very basic, and at least I should implement also a certain "radius" of distance from the first click and the second click... If the second click is too far from the first click,
                        //then disregard the first click location.
                        if (_frameCounterTouchLeft >= 50)
                        {

                            if (YLeftTouchControllerArduino == 1)
                            {
                                if (hasClickedBUTTONX == 0)
                                {
                                    absoluteMoveX = Convert.ToUInt32((percentXLeft * 65535 - 1) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                                    absoluteMoveY = Convert.ToUInt32((percentYLeft * 65535 - 1) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);

                                    //if (_out_of_bounds_left == 0)
                                    //{
                                    //  
                                    //}

                                    SetCursorPos((int)percentXLeft, (int)percentYLeft);
                                    //mouse_event(MOUSEEVENTF_MOVE | MOUSEEVENTF_ABSOLUTE, _lastMousePosXRight, _lastMousePosYRight, 0, 0);
                                    _frameCounterTouchLeft = 0;

                                    //mouse_event(MOUSEEVENTF_MOVE | MOUSEEVENTF_ABSOLUTE, absoluteMoveX, absoluteMoveY, 0, 0);
                                    //mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, absoluteMoveX, absoluteMoveY, 0, 0);


                                    Program.mousesim.LeftButtonDown();
                                    //Program.mousesim.MoveMouseToPositionOnVirtualDesktop();
                                    //Program.mousesim.LeftButtonClick();

                                    //_lastMousePosXLeft = absoluteMoveX;
                                    //_lastMousePosYLeft = absoluteMoveY;
                                    _canResetCounterTouchLeftButtonX = true;
                                    hasClickedBUTTONX = 1;
                                }
                            }
                            /*else if (YLeftTouchControllerArduino == 512)
                            {
                                if (hasClickedBUTTONY == 0)
                                {
                                    if (_out_of_bounds_right == 0)
                                    {
                                        absoluteMoveX = Convert.ToUInt32((realMousePosX * 65535 - 1) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                                        absoluteMoveY = Convert.ToUInt32((realMousePosY * 65535 - 1) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);
                                    }
                                    mouse_event(MOUSEEVENTF_RIGHTDOWN, 0, 0, 0, 0);
                                    //_lastMousePosX = absoluteMoveX;
                                    //_lastMousePosY = absoluteMoveY;
                                    //_canResetCounterTouchRight = true;
                                    hasClickedBUTTONY = 1;
                                }
                            }*/


                        }
                        _out_of_bounds_left = 0;
                    }
                    else
                    {
                        _out_of_bounds_left = 1;
                    }
                    if (hasClickedBUTTONX == 1)
                    {
                        if (_frameCounterTouchLeft >= 10)
                        {
                            hasClickedBUTTONX = 0;
                        }
                    }
                }
                _frameCounterTouchLeft++;

                //TO READD WHEN I ORDER THE ARDUINO TRIGGERS OR NOT
                //TO READD WHEN I ORDER THE ARDUINO TRIGGERS OR NOT
                /*
                if (indexTriggerRight[1] > 0.0001f)
                {
                    if (heightmapscale > heightmapscaleMax)
                    {
                        heightmapscale = heightmapscaleMax;
                    }
                    else
                    {
                        heightmapscale += 0.00001f;
                    }
                }

                if (indexTriggerLeft[0] > 0.0001f)
                {
                    if (heightmapscale < heightmapscaleMin)
                    {
                        heightmapscale = heightmapscaleMin;
                    }
                    else
                    {
                        heightmapscale -= 0.00001f;
                    }
                }
                //if (Math.Abs(Math.Abs(indexTriggerRightLastAbs) - Math.Abs(indexTriggerRight[1])) > 0.0001f)
                //if (Math.Abs(Math.Abs(indexTriggerLeftLastAbs) - Math.Abs(indexTriggerLeft[0])) > 0.0001f)
                indexTriggerRightLastAbs = indexTriggerRight[1];
                indexTriggerLeftLastAbs = indexTriggerLeft[0];*/
                //TO READD WHEN I ORDER THE ARDUINO TRIGGERS OR NOT
                //TO READD WHEN I ORDER THE ARDUINO TRIGGERS OR NOT
            }
            else if (Program.useArduinoOVRTouchKeymapper == 0)
            {
                if (buttonPressedOculusTouchLeft == 1048576)
                {
                    if (hasClickedHomeButtonTouchLeft == 0)
                    {
                        sccs.scgraphics.scdirectx.D3D.OVR.RecenterTrackingOrigin(sccs.scgraphics.scdirectx.D3D.sessionPtr);

                        //hmdrotMatrix

                        Quaternion currentRot;// = hmd_matrix_current;
                        Quaternion.RotationMatrix(ref hmd_matrix_current, out currentRot);

                        hmd_matrix_current = hmd_matrix_current * OriginRot * RotatingMatrix * RotatingMatrixForPelvis * hmdmatrixRot_; //viewMatrix_;


                        //Quaternion currentRotAfter;
                        //Quaternion.RotationMatrix(ref hmd_matrix_current, out currentRotAfter);
                        //Quaternion.Lerp(ref currentRot, ref currentRotAfter, 0.001f, out currentRotAfter);
                        //Matrix.RotationQuaternion(ref currentRotAfter,out hmd_matrix_current);

                        //var timeSinceStart = (float)(DateTime.Now - sccs.scgraphics.scupdate.startTime).TotalSeconds;
                        //Matrix worldmatlightrot = Matrix.Scaling(1.0f) * Matrix.RotationX(timeSinceStart * disco_sphere_rot_speed) * Matrix.RotationY(timeSinceStart * 2 * disco_sphere_rot_speed) * Matrix.RotationZ(timeSinceStart * 3 * disco_sphere_rot_speed);



                        Quaternion _testQuator;
                        Quaternion.RotationMatrix(ref hmd_matrix_current, out _testQuator);

                        var xq = _testQuator.X;
                        var yq = _testQuator.Y;
                        var zq = _testQuator.Z;
                        var wq = _testQuator.W;

                        float roller = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq));// * (180 / Math.PI));
                        float pitcher = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq));// * (180 / Math.PI));//
                        float yawer = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq));// * (180 / Math.PI));

                        //RotationY4Pelvis
                        //Matrix tempMat = RotatingMatrixForPelvis * hmdmatrixRot_;
                        Quaternion.RotationMatrix(ref hmd_matrix_current, out _testQuator);

                        xq = _testQuator.X;
                        yq = _testQuator.Y;
                        zq = _testQuator.Z;
                        wq = _testQuator.W;

                        float rollerPelvis = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq));// * (180 / Math.PI));
                        float pitcherPelvis = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq));// * (180 / Math.PI));//
                        float yawerPelvis = (float)(Math.Atan2(2 * yq * wq - 2 * xq * zq, 1 - 2 * yq * yq - 2 * zq * zq));// * (180 / Math.PI));

                        //var pitch = (float)((Math.PI * pitcher + 45) / 180);
                        //var roll = (float)(0);
                        //var yaw = (float)(0);

                        sccs.scgraphics.scupdate.RotationX4Pelvis = pitcher;
                        sccs.scgraphics.scupdate.RotationY4Pelvis = 0;
                        sccs.scgraphics.scupdate.RotationZ4Pelvis = 0;

                        sccs.scgraphics.scupdate.rotatingMatrixForPelvis = SharpDX.Matrix.RotationYawPitchRoll(pitcher, 0, 0);
                        sccs.scgraphics.scupdate.hmdmatrixRot = SharpDX.Matrix.RotationYawPitchRoll(pitcher, 0, 0);

                        hasClickedHomeButtonTouchLeft = 1;
                    }
                }

                if (hasClickedHomeButtonTouchLeft == 1)
                {
                    if (hasClickedHomeButtonTouchLeftCounter > 20)
                    {
                        hasClickedHomeButtonTouchLeft = 0;
                        hasClickedHomeButtonTouchLeftCounter = 0;
                    }
                    hasClickedHomeButtonTouchLeftCounter++;
                }

                if (buttonPressedOculusTouchLeft != 0)
                {
                    if (buttonPressedOculusTouchLeft == 512)
                    {
                        if (sc_menu_scroller_counter >= 75)
                        {
                            if (sc_menu_scroller == 0)
                            {
                                sc_menu_scroller = 1;
                            }
                            else if (sc_menu_scroller == 1)
                            {
                                sc_menu_scroller = 2;
                            }
                            else if (sc_menu_scroller == 2)
                            {
                                sc_menu_scroller = 0;
                            }
                            /*else if (sc_menu_scroller == 3)
                            {
                                sc_menu_scroller = 0;
                            }*/
                            /*else if (sc_menu_scroller == 4)
                            {
                                sc_menu_scroller = 0;
                            }*/
                            sc_menu_scroller_counter = 0;
                        }
                    }
                }
                sc_menu_scroller_counter++;

                if (_has_locked_screen_pos_counter >= 50)
                {
                    if (buttonPressedOculusTouchLeft == 256)
                    {
                        if (sc_menu_scroller == 0)
                        {
                            if (frame_counter_4_buttonY >= 75)
                            {
                                if (display_grid_type == 0)
                                {
                                    display_grid_type = 1;
                                }
                                else if (display_grid_type == 1)
                                {
                                    display_grid_type = 2;
                                }
                                else if (display_grid_type == 2)
                                {
                                    display_grid_type = 3;
                                }
                                else if (display_grid_type == 3)
                                {
                                    display_grid_type = 0;
                                }

                                frame_counter_4_buttonY = 0;
                            }
                        }
                        else if (sc_menu_scroller == 1)
                        {
                            if (_has_locked_screen_pos == 0)
                            {
                                _has_locked_screen_pos_counter = 0;
                                _has_locked_screen_pos = 1;
                            }
                            else if (_has_locked_screen_pos == 1)
                            {
                                _has_locked_screen_pos_counter = 0;
                                _has_locked_screen_pos = 0;
                            }
                        }
                        else if (sc_menu_scroller == 2)
                        {
                            if (frame_counter_4_buttonY >= 75)
                            {

                                if (resetvoxelladdercounter == 1)
                                {
                                    //5 full chunk cube all 1s for byte breaking when 1s becomes 0s (and for byte adding when byte 0s become 1s WIP)
                                    //4 full chunk cube all 0s for path tracing with path traced with bytes becoming 1s when the player moves around the invisible chunk.
                                    //3 full chunk cube all 0s for a way to visualize spatial location of objects in a 3d scene.
                                    //2 full chunk cube all 1s for byte breaking when 1s becomes 0s (and for byte adding when byte 0s become 1s WIP) - using random perlin WIP
                                    //1 WIP TRANSPARENCY GRID LIKE CHUNK WITH MY UPCOMING CODING CHALLENGE TO LEARN RASTERTEK C# TRANSPARENCY.

                                    if (resetvoxelladder == 0)
                                    {
                                        Program.usetypeofvoxel = 1; //5 // full chunk cube all 1s for byte breaking when 1s becomes 0s (and for byte adding when byte 0s become 1s WIP)
                                        somechunkplayerspatiallocationresetcounter = 0;
                                        somechunkresetcounter = 0;
                                        resetvoxelladdercounter = 2;
                                        resetvoxelladder = 1;
                                    }
                                    /*else if (resetvoxelladder == 1)
                                    {
                                        Program.usetypeofvoxel = 4; // full chunk cube all 0s for path tracing with path traced with bytes becoming 1s when the player moves around the invisible chunk.
                                        somechunkplayerspatiallocationresetcounter = 0;
                                        somechunkresetcounter = 0;
                                        resetvoxelladdercounter = 2;
                                        resetvoxelladder = 2;
                                    }
                                    else if (resetvoxelladder == 2)
                                    {
                                        Program.usetypeofvoxel = 3; // full chunk cube all 0s for a way to visualize spatial location of objects in a 3d scene.
                                        somechunkplayerspatiallocationresetcounter = 0;
                                        somechunkresetcounter = 0;
                                        resetvoxelladdercounter = 2;
                                        resetvoxelladder = 3;
                                    }
                                    else if (resetvoxelladder == 3)
                                    {
                                        Program.usetypeofvoxel = 2; // full chunk cube all 1s for byte breaking when 1s becomes 0s (and for byte adding when byte 0s become 1s WIP) - using random perlin WIP
                                        somechunkplayerspatiallocationresetcounter = 0;
                                        somechunkresetcounter = 0;
                                        resetvoxelladdercounter = 2;
                                        resetvoxelladder = 4;
                                    }*/
                                    /*else if (resetvoxelladder == 4)
                                    {
                                        Program.usetypeofvoxel = 1; // WIP TRANSPARENCY GRID LIKE CHUNK WITH MY UPCOMING CODING CHALLENGE TO LEARN RASTERTEK C# TRANSPARENCY.
                                        somecounterresetcounter = 0;
                                        resetvoxelladdercounter = 2;
                                        resetvoxelladder = 5;
                                    }*/
                                    else if (resetvoxelladder == 1)
                                    {
                                        resetvoxelladder = 2;
                                    }
                                    else if (resetvoxelladder == 2)
                                    {
                                        resetvoxelladder = 0;
                                    }
                                }
                                frame_counter_4_buttonY = 0;
                            }
                        }
                    }
                }
                frame_counter_4_buttonY++;
                _has_locked_screen_pos_counter++;






                if (sc_menu_scroller == 2)
                {
                    /////////////LEFT OCULUS TOUCH/////////////////////////////////////////////////////////////////////////////////////
                    if (percentXLeft >= 0 && percentXLeft <= 1920 && percentYLeft >= 0 && percentYLeft <= 1080)
                    {
                        var absoluteMoveX = Convert.ToUInt32((percentXLeft * (65535 - 1)) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                        var absoluteMoveY = Convert.ToUInt32((percentYLeft * (65535 - 1)) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);

                        if (percentXLeft >= 0 && percentXLeft < sccs.scgraphics.scdirectx.D3D.SurfaceWidth)
                        {

                        }
                        else
                        {
                            percentXLeft = sccs.scgraphics.scdirectx.D3D.SurfaceWidth;
                            absoluteMoveX = Convert.ToUInt32((percentXLeft * (65535 - 1)) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                        }

                        if (percentYLeft >= 0 && percentYLeft < sccs.scgraphics.scdirectx.D3D.SurfaceHeight)
                        {

                        }
                        else
                        {
                            percentYLeft = sccs.scgraphics.scdirectx.D3D.SurfaceHeight;
                            absoluteMoveY = Convert.ToUInt32((percentYLeft * (65535 - 1)) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);
                        }


                        //MOUSE DOUBLE CLICK LOGIC. IF the PLAYER clicked at one location then it stores the location, and if the player re-clicks inside of 20 frames, then click at the first click location.
                        //It's very basic, and at least I should implement also a certain "radius" of distance from the first click and the second click... If the second click is too far from the first click,
                        //then disregard the first click location.
                        if (_frameCounterTouchLeft >= 50)
                        {
                            if (buttonPressedOculusTouchLeft != 0)
                            {
                                if (buttonPressedOculusTouchLeft == 256)
                                {
                                    if (hasClickedBUTTONX == 0)
                                    {
                                        absoluteMoveX = Convert.ToUInt32((percentXLeft * 65535 - 1) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                                        absoluteMoveY = Convert.ToUInt32((percentYLeft * 65535 - 1) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);

                                        //if (_out_of_bounds_left == 0)
                                        //{
                                        //  
                                        //}

                                        SetCursorPos((int)percentXLeft, (int)percentYLeft);
                                        //mouse_event(MOUSEEVENTF_MOVE | MOUSEEVENTF_ABSOLUTE, _lastMousePosXRight, _lastMousePosYRight, 0, 0);
                                        _frameCounterTouchLeft = 0;

                                        //mouse_event(MOUSEEVENTF_MOVE | MOUSEEVENTF_ABSOLUTE, absoluteMoveX, absoluteMoveY, 0, 0);
                                        //mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, absoluteMoveX, absoluteMoveY, 0, 0);


                                        Program.mousesim.LeftButtonDown();
                                        //Program.mousesim.MoveMouseToPositionOnVirtualDesktop();
                                        //Program.mousesim.LeftButtonClick();

                                        //_lastMousePosXLeft = absoluteMoveX;
                                        //_lastMousePosYLeft = absoluteMoveY;
                                        _canResetCounterTouchLeftButtonX = true;
                                        hasClickedBUTTONX = 1;
                                    }
                                }
                                /*else if (buttonPressedOculusTouchLeft == 512)
                                {
                                    if (hasClickedBUTTONY == 0)
                                    {
                                        if (_out_of_bounds_right == 0)
                                        {
                                            absoluteMoveX = Convert.ToUInt32((realMousePosX * 65535 - 1) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                                            absoluteMoveY = Convert.ToUInt32((realMousePosY * 65535 - 1) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);
                                        }
                                        mouse_event(MOUSEEVENTF_RIGHTDOWN, 0, 0, 0, 0);
                                        //_lastMousePosX = absoluteMoveX;
                                        //_lastMousePosY = absoluteMoveY;
                                        //_canResetCounterTouchRight = true;
                                        hasClickedBUTTONY = 1;
                                    }
                                }*/

                            }
                        }
                        _out_of_bounds_left = 0;
                    }
                    else
                    {
                        _out_of_bounds_left = 1;
                    }
                    if (hasClickedBUTTONX == 1)
                    {
                        if (_frameCounterTouchLeft >= 10)
                        {
                            hasClickedBUTTONX = 0;
                        }
                    }
                }
                _frameCounterTouchLeft++;




                if (indexTriggerRight[1] > 0.0001f)
                {
                    if (heightmapscale > heightmapscaleMax)
                    {
                        heightmapscale = heightmapscaleMax;
                    }
                    else
                    {
                        heightmapscale += 0.00001f;
                    }
                }

                if (indexTriggerLeft[0] > 0.0001f)
                {
                    if (heightmapscale < heightmapscaleMin)
                    {
                        heightmapscale = heightmapscaleMin;
                    }
                    else
                    {
                        heightmapscale -= 0.00001f;
                    }
                }
                //if (Math.Abs(Math.Abs(indexTriggerRightLastAbs) - Math.Abs(indexTriggerRight[1])) > 0.0001f)
                //if (Math.Abs(Math.Abs(indexTriggerLeftLastAbs) - Math.Abs(indexTriggerLeft[0])) > 0.0001f)
                indexTriggerRightLastAbs = indexTriggerRight[1];
                indexTriggerLeftLastAbs = indexTriggerLeft[0];

















                if (buttonPressedOculusTouchLeft != 0)
                {
                    //Program.MessageBox((IntPtr)0, buttonPressedOculusTouchLeft + "", "sccs message", 0);

                    if (buttonPressedOculusTouchLeft == 1024 && hasClickedBUTTONX == 0)
                    {







                        /*string windowsKeyboard = "osk";

                        foreach (Process clsProcess in Process.GetProcesses())
                        {
                            if (clsProcess.ProcessName.ToLower().Contains(windowsKeyboard.ToLower()))
                            {
                                break;
                            }
                            else
                            {
                                Process proc = new Process();
                                proc.StartInfo.FileName = windowsKeyboard + ".exe";
                                proc.Start();
                                break;
                            }
                        }*/



                        /*string windir = Environment.GetEnvironmentVariable("windir");

                        Process p = new Process();
                        p.StartInfo.FileName = windir + @"\System32\cmd.exe";
                        p.StartInfo.Arguments = "/C " + windir + @"\System32\osk.exe";
                        p.StartInfo.CreateNoWindow = true;
                        p.StartInfo.UseShellExecute = false;
                        p.Start();
                        p.Dispose();*/



                        /*ProcessStartInfo startInfo = new ProcessStartInfo();
                        startInfo.CreateNoWindow = false;
                        startInfo.UseShellExecute = true;
                        startInfo.WorkingDirectory = @"c:\WINDOWS\system32\";
                        startInfo.FileName = "osk.exe";
                        startInfo.Verb = "runas";
                        startInfo.WindowStyle = ProcessWindowStyle.Normal;

                        try
                        {
                            using (Process process = Process.Start(startInfo))
                            {
                                process.WaitForExit();
                            }
                        }
                        catch (Exception)
                        {
                            //throw;
                        }*/



                        //System.Diagnostics.Process.Start("osk.exe");
                        /*string windir = Environment.GetEnvironmentVariable("windir");

                        Process p = new Process();
                        p.StartInfo.FileName = windir + @"\System32\cmd.exe";
                        p.StartInfo.Arguments = "/C " + windir + @"\System32\osk.exe";
                        p.StartInfo.CreateNoWindow = true;
                        p.StartInfo.UseShellExecute = false;
                        p.Start();
                        p.Dispose();*/

                        //var path64 = @"c:\windows\sysnative\osk.exe"; //@"C:\Windows\winsxs\amd64_microsoft-windows-osk_31bf3856ad364e35_6.1.7600.16385_none_06b1c513739fb828\osk.exe";
                        //var path32 = @"c:\windows\sysnative\osk.exe";// @"C:\windows\system32\osk.exe"; 
                        //var path = (Environment.Is64BitOperatingSystem) ? path64 : path32;

                        //string somestr = getOskPath(@"c:\windows\system32\");




                        /*string[] dirs = Directory.GetFiles(@"c:\Windows\System32\", "c*");

                        Console.WriteLine("The number of files starting with c is {0}.", dirs.Length);

                        foreach (string dir in dirs)
                        {

                            Console.WriteLine(dir);
                            if (dir == @"c:\Windows\System32\osk.exe")
                            {
                                Program.MessageBox((IntPtr)0, "", "sccs error", 0);
                                Console.WriteLine(dir);
                                string somestr = getOskPath(dir);

                                Program.MessageBox((IntPtr)0, "" + somestr, "sccs error", 0);
                            }
                        }*/





                        /*string somestr = @"c:\windows\system32\osk.exe";// getOskPath(@"c:\windows\system32\osk.exe");
                        var permissionSet = new PermissionSet(PermissionState.None);
                        var writePermission = new FileIOPermission(FileIOPermissionAccess.Read, somestr); //write
                        permissionSet.AddPermission(writePermission);

                        if (permissionSet.IsSubsetOf(AppDomain.CurrentDomain.PermissionSet))
                        {
                            Program.MessageBox((IntPtr)0, "" + somestr, "sccs error", 0);

                            Process[] p = Process.GetProcessesByName(Path.GetFileNameWithoutExtension(OnScreenKeyboardExe));

                            if (p.Length == 0)
                            {
                                // we must start osk from an MTA thread
                                if (Thread.CurrentThread.GetApartmentState() == ApartmentState.STA)
                                {
                                    ThreadStart start = new ThreadStart(ShowKeyboard);// StartOsk);
                                    Thread thread = new Thread(start);
                                    thread.SetApartmentState(ApartmentState.MTA);
                                    thread.Start();
                                    thread.Join();
                                }
                                else
                                {
                                    ShowKeyboard();//StartOsk();
                                }
                            }
                            else
                            {
                                // there might be a race condition if the process terminated 
                                // meanwhile -> proper exception handling should be added
                                //
                                SendMessage(p[0].MainWindowHandle, WM_SYSCOMMAND, new IntPtr(SC_RESTORE), new IntPtr(0)); //MainWindowHandle
                            }
                        }
                        else
                        {
                          
                        }*/


                        string windowsKeyboard = "osk";

                        foreach (Process clsProcess in Process.GetProcesses())
                        {
                            if (clsProcess.ProcessName.ToLower().Contains(windowsKeyboard.ToLower()))
                            {
                                break;
                            }
                            else
                            {
                                // do your stuff

                                //bool sucessfullyDisabledWow64Redirect = false;

                                //string path = Path.Combine(dir, "osk.exe");



                                /*Process proc = new Process();
                                proc.StartInfo.FileName = windowsKeyboard + ".exe";
                                proc.Start();*/

                                ProcessStartInfo psi = new ProcessStartInfo();
                                //psi.FileName = OnScreenKeyboardExe;// path64;
                                string windir = Environment.GetEnvironmentVariable("windir");
                                psi.WorkingDirectory = @"c:\WINDOWS\system32\";
                                psi.FileName = windir + @"\System32\cmd.exe";
                                psi.Arguments = "/C " + windir + @"\System32\osk.exe";


                                psi.UseShellExecute = false;
                                psi.RedirectStandardOutput = true;
                                psi.RedirectStandardError = true;
                                psi.CreateNoWindow = false;
                                psi.Verb = "runas";

                                //Process p = System.Diagnostics.Process.Start(path);
                                Process proc = new Process();
                                proc.StartInfo = psi;
                                proc.Start();

                                bool sucessfullyDisabledWow64Redirect = false;
                                if (System.Environment.Is64BitOperatingSystem)
                                {
                                    IntPtr ptr = new IntPtr();
                                    sucessfullyDisabledWow64Redirect = Wow64DisableWow64FsRedirection(ref ptr);
                                    path = string.Empty;
                                }



                                //Process proc = new Process();
                                //proc.StartInfo = psi;
                                //proc.Start();





                                break;
                            }
                        }












                        //Program.MessageBox((IntPtr)0, "fuck you", "sccs message", 0);
                        /*string windowsKeyboard = "osk";

                        foreach (Process clsProcess in Process.GetProcesses())
                        {
                            if (clsProcess.ProcessName.ToLower().Contains(windowsKeyboard.ToLower()))
                            {
                                break;
                            }
                            else
                            {
                                Process proc = new Process();
                                proc.StartInfo.FileName = windowsKeyboard + ".exe";
                                proc.Start();
                                break;
                            }
                        }*/
                        //hasClickedBUTTONX = 1;
                    }
                }
                else if (buttonPressedOculusTouchLeft == 0 && hasClickedHomeButtonTouchLeft == 1 || buttonPressedOculusTouchLeft == 0 && hasClickedBUTTONX == 1)
                {
                    if (buttonPressedOculusTouchLeft == 0 && hasClickedHomeButtonTouchLeft == 1)
                    {
                        hasClickedHomeButtonTouchLeft = 0;
                    }
                    else if (buttonPressedOculusTouchLeft == 0 && hasClickedBUTTONX == 1)
                    {
                        hasClickedBUTTONX = 0;
                    }

                }



                /*if (buttonPressedOculusTouchLeft != 0)
                {
                    var yo = _updateFunctionStopwatchLeftThumbstick.Elapsed.Ticks;

                    if (yo >= 100)
                    {
                        if (buttonPressedOculusTouchLeft == 1024)
                        {

                            _updateFunctionBoolLeftThumbStick = true;
                        }
                    }
                }*/
            }

        }

        private void _MicrosoftWindowsMouseRight(double percentXRight, double percentYRight, Vector2f[] thumbStickRight, double percentXLeft, double percentYLeft, Vector2f[] thumbStickLeft, double realMousePosX, double realMousePosY) //, double realOculusRiftCursorPosX, double realOculusRiftCursorPosY
        {
            try
            {
                //MessageBox((IntPtr)0, "percentXRight: " + percentXRight + " percentYRight: " + percentYRight, "mouse move", 0);
                //Console.WriteLine("percentXRight: " + percentXRight + " percentYRight: " + percentYRight);

                if (_indexMouseMove == 0)
                {
                    //MessageBox((IntPtr)0, "test0", "mouse move", 0);
                    /////////////RIGHT OCULUS TOUCH/////////////////////////////////////////////////////////////////////////////////////
                    if (percentXRight >= 0 && percentXRight <= sccs.scgraphics.scdirectx.D3D.SurfaceWidth && percentYRight >= 0 && percentYRight <= sccs.scgraphics.scdirectx.D3D.SurfaceHeight &&
                        realMousePosX >= 0 && realMousePosX <= sccs.scgraphics.scdirectx.D3D.SurfaceWidth && realMousePosY >= 0 && realMousePosY <= sccs.scgraphics.scdirectx.D3D.SurfaceHeight)
                    {
                        //MessageBox((IntPtr)0, "test1", "mouse move", 0);

                        //var absoluteMoveX = Convert.ToUInt32((percentXRight * 65535) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                        //var absoluteMoveY = Convert.ToUInt32((percentYRight * 65535) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);

                        var yo = _updateFunctionStopwatchRight.Elapsed.Ticks;

                        if (_hasLockedMouse == 0)
                        {
                            if (yo >= 250)
                            {
                                var absoluteMoveX = Convert.ToUInt32((realMousePosX * (65535 - 1)) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                                var absoluteMoveY = Convert.ToUInt32((realMousePosY * (65535 - 1)) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);

                                if (realMousePosX >= 0 && realMousePosX < sccs.scgraphics.scdirectx.D3D.SurfaceWidth)
                                {

                                }
                                else
                                {
                                    realMousePosX = sccs.scgraphics.scdirectx.D3D.SurfaceWidth;
                                    absoluteMoveX = Convert.ToUInt32((realMousePosX * (65535 - 1)) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                                }

                                if (realMousePosY >= 0 && realMousePosY < sccs.scgraphics.scdirectx.D3D.SurfaceHeight)
                                {

                                }
                                else
                                {
                                    realMousePosY = sccs.scgraphics.scdirectx.D3D.SurfaceHeight;
                                    absoluteMoveY = Convert.ToUInt32((realMousePosY * (65535 - 1)) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);
                                }


                                //mouse_event(MOUSEEVENTF_MOVE | MOUSEEVENTF_ABSOLUTE, absoluteMoveX, absoluteMoveY, 0, 0);
                                if (_frameCounterTouchRight <= 20)
                                {
                                    SetCursorPos((int)realMousePosX, (int)realMousePosY);
                                    //mouse_event(MOUSEEVENTF_MOVE | MOUSEEVENTF_ABSOLUTE, _lastMousePosXRight, _lastMousePosYRight, 0, 0);
                                    _frameCounterTouchRight = 0;
                                }

                                _updateFunctionStopwatchRight.Stop();
                                _updateFunctionBoolRight = true;
                            }
                        }

                        //Console.WriteLine(percentXRight + "_" + percentYRight);
                        //MessageBox((IntPtr)0,  "test", "mouse move", 0);
                        //MOUSE DOUBLE CLICK LOGIC. IF the PLAYER clicked at one location then it stores the location, and if the player re-clicks inside of 20 frames, then click at the first click location.
                        //It's very basic, and at least I should implement also a certain "radius" of distance from the first click and the second click... If the second click is too far from the first click,
                        //then disregard the first click location.

                        if (buttonPressedOculusTouchRight != 0)
                        {
                            if (buttonPressedOculusTouchRight == 1)
                            {
                                if (hasClickedBUTTONA == 0)
                                {
                                    var absoluteMoveX = Convert.ToUInt32((realMousePosX * (65535)) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                                    var absoluteMoveY = Convert.ToUInt32((realMousePosY * (65535)) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);

                                    if (realMousePosX >= 0 && realMousePosX < sccs.scgraphics.scdirectx.D3D.SurfaceWidth)
                                    {

                                    }
                                    else
                                    {
                                        realMousePosX = sccs.scgraphics.scdirectx.D3D.SurfaceWidth;
                                        absoluteMoveX = Convert.ToUInt32((realMousePosX * (65535)) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                                    }

                                    if (realMousePosY >= 0 && realMousePosY < sccs.scgraphics.scdirectx.D3D.SurfaceHeight)
                                    {

                                    }
                                    else
                                    {
                                        realMousePosY = sccs.scgraphics.scdirectx.D3D.SurfaceHeight;
                                        absoluteMoveY = Convert.ToUInt32((realMousePosY * (65535)) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);
                                    }


                                    if (_frameCounterTouchRight <= 20 && _canResetCounterTouchRightButtonA == true)
                                    {
                                        SetCursorPos((int)realMousePosX, (int)realMousePosY);
                                        //mouse_event(MOUSEEVENTF_MOVE | MOUSEEVENTF_ABSOLUTE, _lastMousePosXRight, _lastMousePosYRight, 0, 0);
                                        _frameCounterTouchRight = 0;
                                    }

                                    //mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0); //| MOUSEEVENTF_ABSOLUTE

                                    Program.mousesim.LeftButtonDown();

                                    _lastMousePosXRight = absoluteMoveX;
                                    _lastMousePosYRight = absoluteMoveY;

                                    _canResetCounterTouchRightButtonA = true;
                                    hasClickedBUTTONA = 1;
                                }
                            }
                            else if (buttonPressedOculusTouchRight == 2)
                            {
                                if (hasClickedBUTTONB == false)
                                {
                                    var absoluteMoveX = Convert.ToUInt32((realMousePosX * (65535)) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                                    var absoluteMoveY = Convert.ToUInt32((realMousePosY * (65535)) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);

                                    if (realMousePosX >= 0 && realMousePosX < sccs.scgraphics.scdirectx.D3D.SurfaceWidth)
                                    {

                                    }
                                    else
                                    {
                                        realMousePosX = sccs.scgraphics.scdirectx.D3D.SurfaceWidth;
                                        absoluteMoveX = Convert.ToUInt32((realMousePosX * (65535)) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                                    }

                                    if (realMousePosY >= 0 && realMousePosY < sccs.scgraphics.scdirectx.D3D.SurfaceHeight)
                                    {

                                    }
                                    else
                                    {
                                        realMousePosY = sccs.scgraphics.scdirectx.D3D.SurfaceHeight;
                                        absoluteMoveY = Convert.ToUInt32((realMousePosY * (65535)) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);

                                    }


                                    //mouse_event(MOUSEEVENTF_RIGHTDOWN, 0, 0, 0, 0);
                                    Program.mousesim.RightButtonDown();
                                    hasClickedBUTTONB = true;
                                }
                            }
                        }
                        _out_of_bounds_right = 0;
                    }
                    else
                    {
                        //Program.MessageBox((IntPtr)0, "out of bounds 0", "mouse move", 0);
                        //percentYRight >= 0 && percentYRight <= sccs.scgraphics.scdirectx.D3D.SurfaceHeight

                        var someorixright = percentXRight;
                        var someoriyright = percentYRight;

                        if (percentXRight < 0 && percentXRight <= sccs.scgraphics.scdirectx.D3D.SurfaceWidth ||
                                percentXRight >= 0 && percentXRight > sccs.scgraphics.scdirectx.D3D.SurfaceWidth ||
                                percentXRight < 0 && percentXRight > sccs.scgraphics.scdirectx.D3D.SurfaceWidth)
                        {
                            if (percentXRight < 0 && percentXRight <= sccs.scgraphics.scdirectx.D3D.SurfaceWidth)
                            {
                                percentXRight = 0;
                            }
                            else if (percentXRight >= 0 && percentXRight > sccs.scgraphics.scdirectx.D3D.SurfaceWidth)
                            {
                                percentXRight = sccs.scgraphics.scdirectx.D3D.SurfaceWidth;
                            }
                        }

                        if (percentYRight < 0 && percentYRight <= sccs.scgraphics.scdirectx.D3D.SurfaceHeight ||
                           percentYRight >= 0 && percentYRight > sccs.scgraphics.scdirectx.D3D.SurfaceHeight ||
                           percentYRight < 0 && percentYRight > sccs.scgraphics.scdirectx.D3D.SurfaceHeight)
                        {
                            if (percentYRight < 0 && percentYRight <= sccs.scgraphics.scdirectx.D3D.SurfaceHeight)
                            {
                                percentYRight = 0;
                            }
                            else if (percentYRight >= 0 && percentYRight > sccs.scgraphics.scdirectx.D3D.SurfaceHeight)
                            {
                                percentYRight = sccs.scgraphics.scdirectx.D3D.SurfaceHeight;
                            }
                        }


                        int somediv = 2;

                        if (someorixright < 0 && Math.Abs(someorixright) > sccs.scgraphics.scdirectx.D3D.SurfaceWidth / somediv ||
                            someoriyright < 0 && Math.Abs(someoriyright) > sccs.scgraphics.scdirectx.D3D.SurfaceHeight / somediv ||
                            someorixright >= 0 && (someorixright) > (sccs.scgraphics.scdirectx.D3D.SurfaceWidth) + sccs.scgraphics.scdirectx.D3D.SurfaceWidth / somediv ||
                            someoriyright >= 0 && (someoriyright) > (sccs.scgraphics.scdirectx.D3D.SurfaceHeight) + sccs.scgraphics.scdirectx.D3D.SurfaceHeight / somediv)
                        {

                        }
                        else
                        {

                            float dotres1;
                            var vert0 = new Vector3(_screenDirMatrix_correct_pos[0][0][0].M41, _screenDirMatrix_correct_pos[0][0][0].M42, _screenDirMatrix_correct_pos[0][0][0].M43);
                            var vert1 = new Vector3(_screenDirMatrix_correct_pos[0][0][1].M41, _screenDirMatrix_correct_pos[0][0][1].M42, _screenDirMatrix_correct_pos[0][0][1].M43);
                            var vert2 = new Vector3(_screenDirMatrix_correct_pos[0][0][2].M41, _screenDirMatrix_correct_pos[0][0][2].M42, _screenDirMatrix_correct_pos[0][0][2].M43);
                            var vert3 = new Vector3(_screenDirMatrix_correct_pos[0][0][3].M41, _screenDirMatrix_correct_pos[0][0][3].M42, _screenDirMatrix_correct_pos[0][0][3].M43);

                            Vector3 somevec0 = (vert2 - vert0);
                            Vector3 somevec1 = (vert1 - vert0);
                            //sc_maths.Dot(somevec0.X, somevec0.Y, somevec0.X, somevec0.Y);
                            //float dotres0;
                            //Vector3.Dot(ref somevec0, ref rayDirRighter, out dotres0);
                            Vector3.Dot(ref somevec1, ref rayDirRighter, out dotres1);
                            //Console.WriteLine(" " + " " + dotres1);
                            if (_frameCounterTouchRight <= 20 && dotres1 > -0.35f)
                            {
                                SetCursorPos((int)realMousePosX, (int)realMousePosY);
                                //mouse_event(MOUSEEVENTF_MOVE | MOUSEEVENTF_ABSOLUTE, _lastMousePosXRight, _lastMousePosYRight, 0, 0);
                                _frameCounterTouchRight = 0;
                            }
                        }






                        _out_of_bounds_right = 1;
                    }

                    if (hasClickedBUTTONACounter >= 25)
                    {
                        //////////OCULUS TOUCH BUTTONS PRESSED////////////////////////////////////////
                        if (hasClickedBUTTONA == 1 && buttonPressedOculusTouchRight == 0 || hasClickedBUTTONB && buttonPressedOculusTouchRight == 0)
                        {
                            if (hasClickedBUTTONA == 1 && buttonPressedOculusTouchRight == 0)
                            {
                                //mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
                                Program.mousesim.LeftButtonUp();
                                hasClickedBUTTONACounter = 0;
                                hasClickedBUTTONA = 0;
                            }
                            else if (hasClickedBUTTONB && buttonPressedOculusTouchRight == 0)
                            {
                                //mouse_event(MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0);
                                Program.mousesim.RightButtonUp();
                                hasClickedBUTTONACounter = 0;
                                hasClickedBUTTONB = false;
                            }
                        }
                    }
                    //if (_canResetCounterTouchRightButtonA)
                    //{
                    //  
                    //}
                    _frameCounterTouchRight++;
                    if (_frameCounterTouchRight >= 30)
                    {
                        _frameCounterTouchRight = 0;
                        _canResetCounterTouchRightButtonA = false;
                    }

                    if (_out_of_bounds_oculus_rift == 0)
                    {
                        long test = 80;
                        /////////RIGHT THUMBSTICK///////////
                        var yo6 = _updateFunctionStopwatchRightThumbstickGoLeft.Elapsed.Milliseconds;
                        if (yo6 >= 75)
                        {
                            /*if (thumbStickRight[1].Y <= -0.1f && hasUsedThumbStickRightE == false)
                            {
                                if (test < -0.99)
                                {
                                    test = (long)-0.99;
                                }

                                mouse_event(MOUSEEVENTF_WHEEL, 0, 0, -test, 0);
                                //Console.WriteLine("test");

                                hasUsedThumbStickRightE = true;
                            }
                            else if (hasUsedThumbStickRightE)
                            {
                                hasUsedThumbStickRightE = false;
                            }*/
                            _updateFunctionStopwatchRightThumbstickGoLeft.Stop();
                            _updateFunctionBoolRightThumbStickGoLeft = true;
                        }
                        ///////////////////////////////////////////////////////////////////////////

                        /////////RIGHT THUMBSTICK/////////////////////////////////////////////////////
                        var yo7 = _updateFunctionStopwatchRightThumbstickGoRight.Elapsed.Milliseconds;
                        if (yo7 >= 75)
                        {
                            /*if (thumbStickRight[1].Y >= 0.1f && hasUsedThumbStickRightQ == false)
                            {
                                if (test > 0.99f)
                                {
                                    test = (long)0.99;
                                }

                                mouse_event(MOUSEEVENTF_WHEEL, 0, 0, test, 0);
                                hasUsedThumbStickRightQ = true;
                            }
                            else if (hasUsedThumbStickRightQ)
                            {
                                hasUsedThumbStickRightQ = false;
                            }*/
                            _updateFunctionStopwatchRightThumbstickGoRight.Stop();
                            _updateFunctionBoolRightThumbStickGoRight = true;
                        }
                    }























                    /*//////////OCULUS TOUCH BUTTONS PRESSED////////////////////////////////////////
                    if (hasClickedBUTTONX == 1 && buttonPressedOculusTouchLeft == 0 || hasClickedBUTTONY == 1 && buttonPressedOculusTouchLeft == 0)
                    {
                        if (hasClickedBUTTONX == 1 && buttonPressedOculusTouchLeft == 0)
                        {
                            //mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
                            hasClickedBUTTONX = 0;
                        }
                        else if (hasClickedBUTTONY == 1 && buttonPressedOculusTouchLeft == 0)
                        {
                            mouse_event(MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0);
                            hasClickedBUTTONY = 0;
                        }
                    }*/

                    //if (_canResetCounterTouchLeftButtonX)
                    //{
                    //
                    //}



                    //if (buttonPressedOculusTouchLeft == 0 && hasClickedHomeButtonTouchLeft)
                    //{
                    //    hasClickedHomeButtonTouchLeft = false;
                    //}
                }
                else if (_indexMouseMove == 100)
                {
                    /*/////////////LEFT OCULUS TOUCH/////////////////////////////////////////////////////////////////////////////////////
                    if (percentXLeft >= 0 && percentXLeft <= 1920 && percentYLeft >= 0 && percentYLeft <= 1080)
                    {
                        var absoluteMoveX = Convert.ToUInt32((percentXLeft * 65535) / 1920);
                        var absoluteMoveY = Convert.ToUInt32((percentYLeft * 65535) / 1080);

                        var yo = _updateFunctionStopwatchLeft.Elapsed.Milliseconds;

                        if (yo >= 10)
                        {
                            mouse_event(MOUSEEVENTF_MOVE | MOUSEEVENTF_ABSOLUTE, absoluteMoveX, absoluteMoveY, 0, 0);
                            _updateFunctionStopwatchLeft.Stop();
                            _updateFunctionBoolLeft = true;
                        }

                        //MOUSE DOUBLE CLICK LOGIC. IF the PLAYER clicked at one location then it stores the location, and if the player re-clicks inside of 20 frames, then click at the first click location.
                        //It's very basic, and at least I should implement also a certain "radius" of distance from the first click and the second click... If the second click is too far from the first click,
                        //then disregard the first click location.

                        if (buttonPressedOculusTouchLeft != 0)
                        {
                            if (buttonPressedOculusTouchLeft == 256)
                            {
                                if (hasClickedBUTTONX == 0)
                                {
                                    if (_frameCounterTouchLeft <= 20 && _canResetCounterTouchLeftButtonX == true)
                                    {
                                        mouse_event(MOUSEEVENTF_MOVE | MOUSEEVENTF_ABSOLUTE, _lastMousePosXLeft, _lastMousePosYLeft, 0, 0);
                                        _frameCounterTouchLeft = 0;
                                    }

                                    mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);

                                    _lastMousePosXLeft = absoluteMoveX;
                                    _lastMousePosYLeft = absoluteMoveY;
                                    _canResetCounterTouchLeftButtonX = true;
                                    hasClickedBUTTONX = 1;
                                }
                            }
                            else if (buttonPressedOculusTouchLeft == 512)
                            {
                                if (hasClickedBUTTONY == 0)
                                {
                                    mouse_event(MOUSEEVENTF_RIGHTDOWN, 0, 0, 0, 0);
                                    //_lastMousePosX = absoluteMoveX;
                                    //_lastMousePosY = absoluteMoveY;
                                    //_canResetCounterTouchRight = true;
                                    hasClickedBUTTONY = 1;
                                }
                            }
                        }
                    }*/

                    /*//////////OCULUS TOUCH BUTTONS PRESSED////////////////////////////////////////
                    if (hasClickedBUTTONX == 1 && buttonPressedOculusTouchLeft == 0 || hasClickedBUTTONY == 1 && buttonPressedOculusTouchLeft == 0)
                    {
                        if (hasClickedBUTTONX == 1 && buttonPressedOculusTouchLeft == 0)
                        {
                            mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
                            hasClickedBUTTONX = 0;
                        }
                        else if (hasClickedBUTTONY == 1 && buttonPressedOculusTouchLeft == 0)
                        {
                            mouse_event(MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0);
                            hasClickedBUTTONY = 0;
                        }
                    }

                    if (_canResetCounterTouchLeftButtonX)
                    {
                        _frameCounterTouchLeft++;
                    }

                    if (_frameCounterTouchLeft >= 30)
                    {
                        _frameCounterTouchLeft = 0;
                        _canResetCounterTouchLeftButtonX = false;
                    }*/



                    /////////////RIGHT OCULUS TOUCH/////////////////////////////////////////////////////////////////////////////////////
                    if (percentXRight >= 0 && percentXRight <= sccs.scgraphics.scdirectx.D3D.SurfaceWidth && percentYRight >= 0 && percentYRight <= sccs.scgraphics.scdirectx.D3D.SurfaceHeight)
                    {
                        var absoluteMoveX = Convert.ToUInt32((percentXRight * 65535) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                        var absoluteMoveY = Convert.ToUInt32((percentYRight * 65535) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);

                        /*var yo = _updateFunctionStopwatchRight.Elapsed.Milliseconds;

                        if (yo >= 10)
                        {
                            //mouse_event(MOUSEEVENTF_MOVE | MOUSEEVENTF_ABSOLUTE, absoluteMoveX, absoluteMoveY, 0, 0);
                            _updateFunctionStopwatchRight.Stop();
                            _updateFunctionBoolRight = true;
                        }*/

                        //MOUSE DOUBLE CLICK LOGIC. IF the PLAYER clicked at one location then it stores the location, and if the player re-clicks inside of 20 frames, then click at the first click location.
                        //It's very basic, and at least I should implement also a certain "radius" of distance from the first click and the second click... If the second click is too far from the first click,
                        //then disregard the first click location.
                        if (buttonPressedOculusTouchRight != 0)
                        {
                            if (buttonPressedOculusTouchRight == 1)
                            {
                                if (hasClickedBUTTONA == 0)
                                {
                                    /*if (_frameCounterTouchRight <= 20 && _canResetCounterTouchRightButtonA == true)
                                    {
                                        mouse_event(MOUSEEVENTF_MOVE | MOUSEEVENTF_ABSOLUTE, _lastMousePosXRight, _lastMousePosYRight, 0, 0);
                                        _frameCounterTouchRight = 0;
                                    }*/

                                    //mouse_event(MOUSEEVENTF_MOVE | MOUSEEVENTF_ABSOLUTE, absoluteMoveX, absoluteMoveY, 0, 0);
                                    //mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, absoluteMoveX, absoluteMoveY, 0, 0);

                                    SetCursorPos((int)absoluteMoveX, (int)absoluteMoveY);


                                    Program.mousesim.LeftButtonDown();
                                    Program.mousesim.LeftButtonUp();

                                    _lastMousePosXRight = absoluteMoveX;
                                    _lastMousePosYRight = absoluteMoveY;
                                    _canResetCounterTouchRightButtonA = true;
                                    hasClickedBUTTONA = 1;
                                }
                            }
                            else if (buttonPressedOculusTouchRight == 2)
                            {
                                if (hasClickedBUTTONB == false)
                                {
                                    //mouse_event(MOUSEEVENTF_RIGHTDOWN, 0, 0, 0, 0);
                                    Program.mousesim.RightButtonDown();
                                    hasClickedBUTTONB = true;
                                }
                            }
                        }
                    }
                    else //if ()
                    {
                        //Program.MessageBox((IntPtr)0, "out of bounds 1", "mouse move", 0);
                        /*if (percentXRight < 0 && percentXRight <= sccs.scgraphics.scdirectx.D3D.SurfaceWidth ||
                            percentXRight >= 0 && percentXRight > sccs.scgraphics.scdirectx.D3D.SurfaceWidth ||
                            percentXRight < 0 && percentXRight > sccs.scgraphics.scdirectx.D3D.SurfaceWidth ||
                            percentYRight < 0 && percentYRight <= sccs.scgraphics.scdirectx.D3D.SurfaceHeight ||
                            percentYRight >= 0 && percentYRight > sccs.scgraphics.scdirectx.D3D.SurfaceHeight ||
                            percentYRight < 0 && percentYRight > sccs.scgraphics.scdirectx.D3D.SurfaceHeight)
                        {
                           Program.MessageBox((IntPtr)0, "out of bounds 0" , "mouse move", 0);
                        }
                        else if (realMousePosX < 0 && realMousePosX <= sccs.scgraphics.scdirectx.D3D.SurfaceWidth ||
                            realMousePosX >= 0 && realMousePosX > sccs.scgraphics.scdirectx.D3D.SurfaceWidth ||
                            realMousePosX < 0 && realMousePosX > sccs.scgraphics.scdirectx.D3D.SurfaceWidth ||
                            realMousePosY < 0 && realMousePosY <= sccs.scgraphics.scdirectx.D3D.SurfaceHeight ||
                            realMousePosY >= 0 && realMousePosY > sccs.scgraphics.scdirectx.D3D.SurfaceHeight||
                            realMousePosY < 0 && realMousePosY > sccs.scgraphics.scdirectx.D3D.SurfaceHeight)
                        {
                            Program.MessageBox((IntPtr)0, "out of bounds 1", "mouse move", 0);
                        }*/

                        if (percentXRight < 0 && percentXRight <= sccs.scgraphics.scdirectx.D3D.SurfaceWidth ||
                            percentXRight >= 0 && percentXRight > sccs.scgraphics.scdirectx.D3D.SurfaceWidth ||
                            percentXRight < 0 && percentXRight > sccs.scgraphics.scdirectx.D3D.SurfaceWidth ||
                            percentYRight < 0 && percentYRight <= sccs.scgraphics.scdirectx.D3D.SurfaceHeight ||
                            percentYRight >= 0 && percentYRight > sccs.scgraphics.scdirectx.D3D.SurfaceHeight ||
                            percentYRight < 0 && percentYRight > sccs.scgraphics.scdirectx.D3D.SurfaceHeight)
                        {
                            //Program.MessageBox((IntPtr)0, "out of bounds 0" , "mouse move", 0);

                            if (percentXRight < 0 && percentXRight <= sccs.scgraphics.scdirectx.D3D.SurfaceWidth ||
                                percentXRight >= 0 && percentXRight > sccs.scgraphics.scdirectx.D3D.SurfaceWidth ||
                                percentXRight < 0 && percentXRight > sccs.scgraphics.scdirectx.D3D.SurfaceWidth)
                            {
                                if (percentXRight < 0 && percentXRight <= sccs.scgraphics.scdirectx.D3D.SurfaceWidth)
                                {
                                    percentXRight = 0;
                                }
                                else if (percentXRight >= 0 && percentXRight > sccs.scgraphics.scdirectx.D3D.SurfaceWidth)
                                {
                                    percentXRight = sccs.scgraphics.scdirectx.D3D.SurfaceWidth;
                                }
                            }

                            if (percentYRight < 0 && percentYRight <= sccs.scgraphics.scdirectx.D3D.SurfaceHeight ||
                            percentYRight >= 0 && percentYRight > sccs.scgraphics.scdirectx.D3D.SurfaceHeight ||
                            percentYRight < 0 && percentYRight > sccs.scgraphics.scdirectx.D3D.SurfaceHeight)
                            {
                                if (percentYRight < 0 && percentYRight <= sccs.scgraphics.scdirectx.D3D.SurfaceHeight)
                                {
                                    percentYRight = 0;
                                }
                                else if (percentYRight >= 0 && percentYRight > sccs.scgraphics.scdirectx.D3D.SurfaceHeight)
                                {
                                    percentYRight = sccs.scgraphics.scdirectx.D3D.SurfaceHeight;
                                }
                            }



                            /*var absoluteMoveX = Convert.ToUInt32((realMousePosX * (65535)) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                            var absoluteMoveY = Convert.ToUInt32((realMousePosY * (65535)) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);

                            if (realMousePosX >= 0 && realMousePosX < sccs.scgraphics.scdirectx.D3D.SurfaceWidth)
                            {

                            }
                            else
                            {
                                realMousePosX = sccs.scgraphics.scdirectx.D3D.SurfaceWidth;
                                absoluteMoveX = Convert.ToUInt32((realMousePosX * (65535)) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                            }

                            if (realMousePosY >= 0 && realMousePosY < sccs.scgraphics.scdirectx.D3D.SurfaceHeight)
                            {

                            }
                            else
                            {
                                realMousePosY = sccs.scgraphics.scdirectx.D3D.SurfaceHeight;
                                absoluteMoveY = Convert.ToUInt32((realMousePosY * (65535)) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);
                            }*/


                            if (_frameCounterTouchRight <= 20 && _canResetCounterTouchRightButtonA == true)
                            {
                                SetCursorPos((int)realMousePosX, (int)realMousePosY);
                                //mouse_event(MOUSEEVENTF_MOVE | MOUSEEVENTF_ABSOLUTE, _lastMousePosXRight, _lastMousePosYRight, 0, 0);
                                _frameCounterTouchRight = 0;
                            }

                        }
                        else if (realMousePosX < 0 && realMousePosX <= sccs.scgraphics.scdirectx.D3D.SurfaceWidth ||
                            realMousePosX >= 0 && realMousePosX > sccs.scgraphics.scdirectx.D3D.SurfaceWidth ||
                            realMousePosX < 0 && realMousePosX > sccs.scgraphics.scdirectx.D3D.SurfaceWidth ||
                            realMousePosY < 0 && realMousePosY <= sccs.scgraphics.scdirectx.D3D.SurfaceHeight ||
                            realMousePosY >= 0 && realMousePosY > sccs.scgraphics.scdirectx.D3D.SurfaceHeight ||
                            realMousePosY < 0 && realMousePosY > sccs.scgraphics.scdirectx.D3D.SurfaceHeight)
                        {
                            //Program.MessageBox((IntPtr)0, "out of bounds 1", "mouse move", 0);

                            if (realMousePosX < 0 && realMousePosX <= sccs.scgraphics.scdirectx.D3D.SurfaceWidth ||
                                realMousePosX >= 0 && realMousePosX <= sccs.scgraphics.scdirectx.D3D.SurfaceWidth ||
                                realMousePosX < 0 && realMousePosX > sccs.scgraphics.scdirectx.D3D.SurfaceWidth)
                            {
                                if (realMousePosX < 0 && realMousePosX <= sccs.scgraphics.scdirectx.D3D.SurfaceWidth)
                                {
                                    realMousePosX = 0;
                                }
                                else if (realMousePosX >= 0 && realMousePosX > sccs.scgraphics.scdirectx.D3D.SurfaceWidth)
                                {
                                    realMousePosX = sccs.scgraphics.scdirectx.D3D.SurfaceWidth;
                                }
                            }

                            if (realMousePosY < 0 && realMousePosY <= sccs.scgraphics.scdirectx.D3D.SurfaceHeight ||
                                realMousePosY >= 0 && realMousePosY > sccs.scgraphics.scdirectx.D3D.SurfaceHeight ||
                                realMousePosY < 0 && realMousePosY > sccs.scgraphics.scdirectx.D3D.SurfaceHeight)
                            {
                                if (realMousePosY < 0 && realMousePosY <= sccs.scgraphics.scdirectx.D3D.SurfaceHeight)
                                {
                                    realMousePosY = 0;
                                }
                                else if (realMousePosY >= 0 && realMousePosY > sccs.scgraphics.scdirectx.D3D.SurfaceHeight)
                                {
                                    realMousePosY = sccs.scgraphics.scdirectx.D3D.SurfaceHeight;
                                }
                            }



                            /*var absoluteMoveX = Convert.ToUInt32((realMousePosX * (65535)) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                            var absoluteMoveY = Convert.ToUInt32((realMousePosY * (65535)) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);

                            if (realMousePosX >= 0 && realMousePosX < sccs.scgraphics.scdirectx.D3D.SurfaceWidth)
                            {

                            }
                            else
                            {
                                realMousePosX = sccs.scgraphics.scdirectx.D3D.SurfaceWidth;
                                absoluteMoveX = Convert.ToUInt32((realMousePosX * (65535)) / sccs.scgraphics.scdirectx.D3D.SurfaceWidth);
                            }

                            if (realMousePosY >= 0 && realMousePosY < sccs.scgraphics.scdirectx.D3D.SurfaceHeight)
                            {

                            }
                            else
                            {
                                realMousePosY = sccs.scgraphics.scdirectx.D3D.SurfaceHeight;
                                absoluteMoveY = Convert.ToUInt32((realMousePosY * (65535)) / sccs.scgraphics.scdirectx.D3D.SurfaceHeight);
                            }*/


                            if (_frameCounterTouchRight <= 20 && _canResetCounterTouchRightButtonA == true)
                            {
                                SetCursorPos((int)realMousePosX, (int)realMousePosY);
                                //mouse_event(MOUSEEVENTF_MOVE | MOUSEEVENTF_ABSOLUTE, _lastMousePosXRight, _lastMousePosYRight, 0, 0);
                                _frameCounterTouchRight = 0;
                            }

                        }
                    }


                    //////////OCULUS TOUCH BUTTONS PRESSED////////////////////////////////////////
                    if (hasClickedBUTTONA == 1 && buttonPressedOculusTouchRight == 0 || hasClickedBUTTONB && buttonPressedOculusTouchRight == 0)
                    {
                        if (hasClickedBUTTONA == 1 && buttonPressedOculusTouchRight == 0)
                        {
                            //mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
                            hasClickedBUTTONA = 0;
                        }
                        else if (hasClickedBUTTONB && buttonPressedOculusTouchRight == 0)
                        {
                            //mouse_event(MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0);
                            Program.mousesim.RightButtonUp();
                            hasClickedBUTTONB = false;
                        }
                    }

                    if (_canResetCounterTouchRightButtonA)
                    {
                        _frameCounterTouchRight++;
                    }

                    if (_frameCounterTouchRight >= 30)
                    {
                        _frameCounterTouchRight = 0;
                        _canResetCounterTouchRightButtonA = false;
                    }


                    /*//////////OCULUS TOUCH BUTTONS NOT PRESSED////////////////////////////////////////
                    long test = 80;
                    /////////RIGHT THUMBSTICK///////////
                    var yo6 = _updateFunctionStopwatchRightThumbstickGoLeft.Elapsed.Milliseconds;
                    if (yo6 >= 75)
                    {
                        if (thumbStickRight[1].Y <= -0.1f && hasUsedThumbStickRightE == false)
                        {
                            //Console.WriteLine("test");
                            mouse_event(MOUSEEVENTF_WHEEL, 0, 0, -test, 0);
                            hasUsedThumbStickRightE = true;
                        }
                        else if (hasUsedThumbStickRightE)
                        {
                            hasUsedThumbStickRightE = false;
                        }
                        _updateFunctionStopwatchRightThumbstickGoLeft.Stop();
                        _updateFunctionBoolRightThumbStickGoLeft = true;
                    }
                    ///////////////////////////////////////////////////////////////////////////

                    /////////RIGHT THUMBSTICK/////////////////////////////////////////////////////
                    var yo7 = _updateFunctionStopwatchRightThumbstickGoRight.Elapsed.Milliseconds;
                    if (yo7 >= 75)
                    {
                        if (thumbStickRight[1].Y >= 0.1f && hasUsedThumbStickRightQ == false)
                        {
                            mouse_event(MOUSEEVENTF_WHEEL, 0, 0, test, 0);
                            //hasUsedThumbStickRightQ = true;
                        }
                        else if (hasUsedThumbStickRightQ)
                        {
                            hasUsedThumbStickRightQ = false;
                        }
                        _updateFunctionStopwatchRightThumbstickGoRight.Stop();
                        _updateFunctionBoolRightThumbStickGoRight = true;
                    }*/
                    /////////////RIGHT OCULUS TOUCH////////////////////////////////////////////
                }
            }
            catch (Exception ex)
            {
                //MessageBox((IntPtr)0, ex.ToString(), "mouse move", 0);
            }











            hasClickedBUTTONACounter++;
        }

        Vector3 rotatevecxaxis(float x, float y, float z, float angle)
        {
            angle = sc_maths.DegreeToRadian(angle);
            float somenewx = x;
            float somenewy = (float)((y * Math.Cos(angle)) - (z * Math.Sin(angle)));
            float somenewz = (float)((y * Math.Sin(angle)) + (z * Math.Cos(angle)));

            return new Vector3(somenewx, somenewy, somenewz);
        }




        [DllImport("user32.dll")]
        static extern bool SetLayeredWindowAttributes(IntPtr hwnd, uint crKey, byte bAlpha, uint dwFlags);

        public const int GWL_EXSTYLE = -20;
        public const int WS_EX_LAYERED = 0x00080000; //0x80000
        //public const int WS_EX_TRANSPARENT = 0x20;

        public const int LWA_ALPHA = 0x2;
        public const int LWA_COLORKEY = 0x1;
        public const long WS_EX_TOPMOST = 0x00000008L;
        public const long WS_NOACTIVATE = 0x08000000L;
        const long WS_EX_WINDOWEDGE = 0x00000100L;
        public const long WS_EX_TRANSPARENT = 0x00000020L;
        public const long WS_EX_CLIENTEDGE = 0x00000200L;
        const long WS_EX_OVERLAPPEDWINDOW = WS_EX_WINDOWEDGE | WS_EX_CLIENTEDGE;

        [DllImport("user32.dll", EntryPoint = "FindWindow", SetLastError = true)]
        static extern IntPtr FindWindowByCaption(IntPtr ZeroOnly, string lpWindowName);

        [DllImport("user32.dll", SetLastError = true)]
        private static extern UInt32 GetWindowLong(IntPtr hWnd, int nIndex);


        [DllImport("user32.dll")]
        static extern int SetWindowLong(IntPtr hWnd, int nIndex, IntPtr dwNewLong);






        [DllImport("user32.dll", EntryPoint = "GetWindowLong")]
        static extern IntPtr GetWindowLongPtr(IntPtr hWnd, int nIndex);


        /*
        [DllImport("user32.dll")]
        static extern int SetWindowLong(IntPtr hWnd, int nIndex, uint dwNewLong);
        */

        [DllImport("user32.dll")]
        private static extern IntPtr GetForegroundWindow();
        [DllImport("user32.dll")]
        static extern bool AttachThreadInput(uint idAttach, uint idAttachTo, bool fAttach);

        [DllImport("kernel32.dll")]
        static extern uint GetCurrentThreadId();
        [DllImport("user32.dll", SetLastError = true)]
        public static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId);


        [DllImport("user32.dll")]
        private static extern bool SetForegroundWindow(IntPtr hWnd);
        /*

        // Static Methods
        public void Rotate()
        {
            rotation += (float)(Math.PI * 0.0005f); // (float)Math.PI

            if (rotation > 360)
                rotation -= 360;
        }
        float rotation = 0.0f;

        [Flags]
        public enum MouseEventF
        {
            Absolute = 0x8000,
            HWheel = 0x01000,
            Move = 0x0001,
            MoveNoCoalesce = 0x2000,
            LeftDown = 0x0002,
            LeftUp = 0x0004,
            RightDown = 0x0008,
            RightUp = 0x0010,
            MiddleDown = 0x0020,
            MiddleUp = 0x0040,
            VirtualDesk = 0x4000,
            Wheel = 0x0800,
            XDown = 0x0080,
            XUp = 0x0100
        }

        DLightShader LightShader;
        DLight Light;
        DModel Model;
        */



        /*[DllImport("USER32.DLL")]
        public static extern int SetWindowLong(IntPtr hWnd, int nIndex, int dwNewLong);
        */



        /*
        [DllImport("user32.dll", EntryPoint = "GetWindowLongPtr")]
        private static extern IntPtr GetWindowLongPtr(IntPtr hWnd, int nIndex);
        */

        /*
        public static void ForceWindowIntoForeground(IntPtr window)
        {
            uint currentThread = GetCurrentThreadId();

            IntPtr activeWindow = GetForegroundWindow();
            uint activeProcess;
            uint activeThread = GetWindowThreadProcessId(activeWindow, out activeProcess);

            uint windowProcess;
            uint windowThread = GetWindowThreadProcessId(window, out windowProcess);

            if (currentThread != activeThread)
                AttachThreadInput(currentThread, activeThread, true);
            if (windowThread != currentThread)
                AttachThreadInput(windowThread, currentThread, true);

            uint oldTimeout = 0, newTimeout = 0;
            SystemParametersInfo(SPI_GETFOREGROUNDLOCKTIMEOUT, 0, ref oldTimeout, 0);
            SystemParametersInfo(SPI_SETFOREGROUNDLOCKTIMEOUT, 0, ref newTimeout, 0);
            LockSetForegroundWindow(LSFW_UNLOCK);
            AllowSetForegroundWindow(ASFW_ANY);

            SetForegroundWindow(window);
            ShowWindow(window, SW_RESTORE);

            SystemParametersInfo(SPI_SETFOREGROUNDLOCKTIMEOUT, 0, ref oldTimeout, 0);

            if (currentThread != activeThread)
                AttachThreadInput(currentThread, activeThread, false);
            if (windowThread != currentThread)
                AttachThreadInput(windowThread, currentThread, false);
        }
        */








        //https://guidedhacking.com/threads/sending-mouse-clicks-to-a-window-in-background.15879/
        //IntPtr targetWnd = FindWindow(0, L"name of the window"); //your target window name

        /*void simulateMouseClickOnWnd(IntPtr targetWnd, int mousePosX, int mousePosY, int clickType)
        {
            IntPtr foreWnd = GetForegroundWindow();
            DWORD windowThreadProcessId = GetCurrentThreadId();
            DWORD wakfuThreadID = GetWindowThreadProcessId(targetWnd, 0);

            AttachThreadInput(windowThreadProcessId, wakfuThreadID, true); // switch input to targetWnd and set focust on to it
            SetFocus(targetWnd);

            POINT screenPoint;
            screenPoint.x = mousePosX;
            screenPoint.y = mousePosY;
            int lParam = MAKELPARAM(screenPoint.x, screenPoint.y);

            if (clickType == 0)
            { //left click
                PostMessage(targetWnd, WM_MOUSEMOVE, 0, lParam);
                PostMessage(targetWnd, WM_LBUTTONDOWN, MK_LBUTTON, lParam);
                //std::this_thread::sleep_for(std::chrono::milliseconds(50)); //prevent crash when multi-threading
                PostMessage(targetWnd, WM_MOUSEMOVE, 0, lParam);
                PostMessage(targetWnd, WM_LBUTTONUP, 0, lParam);
            }
            if (clickType == 1)
            { //right click
                PostMessage(targetWnd, WM_MOUSEMOVE, 0, lParam);
                PostMessage(targetWnd, WM_RBUTTONDOWN, MK_RBUTTON, lParam);
                //std::this_thread::sleep_for(std::chrono::milliseconds(50));
                PostMessage(targetWnd, WM_MOUSEMOVE, 0, lParam);
                PostMessage(targetWnd, WM_RBUTTONUP, 0, lParam);
            }

            AttachThreadInput(windowThreadProcessId, wakfuThreadID, false);
            SetFocus(foreWnd);
        }*/




        /*

        /// <summary>
        /// Synthesizes keystrokes corresponding to the specified Unicode string,
        /// sending them to the currently active window.
        /// </summary>
        /// <param name="s">The string to send.</param>
        public static void SendString(string s)
        {
            // Construct list of inputs in order to send them through a single SendInput call at the end.
            List<INPUT> inputs = new List<INPUT>();

            // Loop through each Unicode character in the string.
            foreach (char c in s)
            {
                // First send a key down, then a key up.
                foreach (bool keyUp in new bool[] { false, true })
                {
                    // INPUT is a multi-purpose structure which can be used 
                    // for synthesizing keystrokes, mouse motions, and button clicks.
                    INPUT input = new INPUT
                    {
                        // Need a keyboard event.
                        type = INPUT_KEYBOARD,
                        u = new InputUnion
                        {
                            // KEYBDINPUT will contain all the information for a single keyboard event
                            // (more precisely, for a single key-down or key-up).
                            ki = new KEYBDINPUT
                            {
                                // Virtual-key code must be 0 since we are sending Unicode characters.
                                wVk = 0,

                                // The Unicode character to be sent.
                                wScan = c,

                                // Indicate that we are sending a Unicode character.
                                // Also indicate key-up on the second iteration.
                                dwFlags = KEYEVENTF_UNICODE | (keyUp ? KEYEVENTF_KEYUP : 0),

                                dwExtraInfo = GetMessageExtraInfo(),
                            }
                        }
                    };

                    // Add to the list (to be sent later).
                    inputs.Add(input);
                }
            }

            // Send all inputs together using a Windows API call.
            SendInput((uint)inputs.Count, inputs.ToArray(), Marshal.SizeOf(typeof(INPUT)));
        }
        */
        const int INPUT_MOUSE = 0;
        const int INPUT_KEYBOARD = 1;
        const int INPUT_HARDWARE = 2;
        const uint KEYEVENTF_EXTENDEDKEY = 0x0001;
        const uint KEYEVENTF_KEYUP = 0x0002;
        const uint KEYEVENTF_UNICODE = 0x0004;
        const uint KEYEVENTF_SCANCODE = 0x0008;
        const uint XBUTTON1 = 0x0001;
        const uint XBUTTON2 = 0x0002;
        const uint MOUSEEVENTF_MOVE = 0x0001;
        const uint MOUSEEVENTF_LEFTDOWN = 0x0002;
        const uint MOUSEEVENTF_LEFTUP = 0x0004;
        const uint MOUSEEVENTF_RIGHTDOWN = 0x0008;
        const uint MOUSEEVENTF_RIGHTUP = 0x0010;
        const uint MOUSEEVENTF_MIDDLEDOWN = 0x0020;
        const uint MOUSEEVENTF_MIDDLEUP = 0x0040;
        const uint MOUSEEVENTF_XDOWN = 0x0080;
        const uint MOUSEEVENTF_XUP = 0x0100;
        const uint MOUSEEVENTF_WHEEL = 0x0800;
        const uint MOUSEEVENTF_VIRTUALDESK = 0x4000;
        const uint MOUSEEVENTF_ABSOLUTE = 0x8000;


        /*
        struct INPUT
        {
            public int type;
            public InputUnion u;
        }

        [StructLayout(LayoutKind.Explicit)]
        struct InputUnion
        {
            [FieldOffset(0)]
            public MOUSEINPUT mi;
            [FieldOffset(0)]
            public KEYBDINPUT ki;
            [FieldOffset(0)]
            public HARDWAREINPUT hi;
        }

        [StructLayout(LayoutKind.Sequential)]
        struct MOUSEINPUT
        {
            public int dx;
            public int dy;
            public uint mouseData;
            public uint dwFlags;
            public uint time;
            public IntPtr dwExtraInfo;
        }

        [StructLayout(LayoutKind.Sequential)]
        struct KEYBDINPUT
        {
            //Virtual Key code.  Must be from 1-254.  If the dwFlags member specifies KEYEVENTF_UNICODE, wVk must be 0.//
            public ushort wVk;
            //A hardware scan code for the key. If dwFlags specifies KEYEVENTF_UNICODE, wScan specifies a Unicode character which is to be sent to the foreground application.//
            public ushort wScan;
            //Specifies various aspects of a keystroke.  See the KEYEVENTF_ constants for more information.//
            public uint dwFlags;
            //The time stamp for the event, in milliseconds. If this parameter is zero, the system will provide its own time stamp.//
            public uint time;
            //An additional value associated with the keystroke. Use the GetMessageExtraInfo function to obtain this information.
            public IntPtr dwExtraInfo;
        }
    
        [StructLayout(LayoutKind.Sequential)]
        struct HARDWAREINPUT
        {
            public uint uMsg;
            public ushort wParamL;
            public ushort wParamH;
        }

        [DllImport("user32.dll")]
        static extern IntPtr GetMessageExtraInfo();

        [DllImport("user32.dll", SetLastError = true)]
        static extern uint SendInput(uint nInputs, INPUT[] pInputs, int cbSize);
        */



        [DllImport("user32.dll")]
        public static extern int FindWindow(
        string lpClassName, // class name 
        string lpWindowName // window name 
        );



        [DllImport("user32.dll")]
        public static extern int SendMessage(
           int hWnd, // handle to destination window 
           uint Msg, // message 
           int wParam, // first message parameter 
           int lParam // second message parameter 
       );





        [DllImport("user32.dll")]
        private static extern IntPtr SendMessage(IntPtr hWnd, int Msg,
           IntPtr wParam, IntPtr lParam);

        [DllImport("user32.dll", EntryPoint = "WindowFromPoint",
            CharSet = CharSet.Auto, ExactSpelling = true)]
        public static extern IntPtr WindowFromPoint(Point point);

        private const int BM_CLICK = 0x00F5;




        [DllImport("user32.dll", CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall)]
        public static extern void mouse_event(uint dwFlags, uint dx, uint dy, uint cButtons, uint dwExtraInfo);
        //Mouse actions
        /*private const int MOUSEEVENTF_LEFTDOWN = 0x02;
        private const int MOUSEEVENTF_LEFTUP = 0x04;
        private const int MOUSEEVENTF_RIGHTDOWN = 0x08;
        private const int MOUSEEVENTF_RIGHTUP = 0x10;*/





        float positionOfMousereducedx;//= (((2.0f * (float)mousex) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceWidth) - 1.0f);
        float positionOfMousereducedy;// = ((((2.0f * (float)mousey) / (float)sccs.scgraphics.scdirectx.D3D.SurfaceHeight) - 1.0f) * -1.0f);


        //https://social.msdn.microsoft.com/Forums/en-US/63ca510a-3d6c-4f4e-a685-7010e4b673f1/sendmessage-to-specific-windows?forum=csharpgeneral
        [DllImport("user32.dll")]
        private static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);



        /*[DllImport("user32.dll")]

        public static extern IntPtr FindWindow(

            string lpClassName,

            string lpWindowName);
        */


        [DllImport("User32.dll")]

        public static extern IntPtr FindWindowEx(

            IntPtr hwndParent,

            IntPtr hwndChildAfter,

            string lpszClass,

            string lpszWindos);



        /* [DllImport("User32.dll")]

         public static extern Int32 PostMessage(

              IntPtr hWnd,

              int Msg,
              int wParam,
              int lParam);*/


        //private const int WM_KEYDOWN = 0x100;
        //private const int WM_KEYUP = 0x101;



        private void button1_Click(object sender, EventArgs e)

        {
            // retrieve Notepad main window handle 
            /*IntPtr hWnd = FindWindow("Notepad", "Untitled - Notepad");

            if (!hWnd.Equals(IntPtr.Zero))

            {

                // make the minimized window be normal
                ShowWindowAsync(hWnd, SW_SHOWNORMAL);

                Thread.Sleep(100);

                // retrieve Edit window handle of Notepad
                IntPtr edithWnd = FindWindowEx(hWnd, IntPtr.Zero, "Edit", null);

                if (!edithWnd.Equals(IntPtr.Zero))

                {
                    PostMessage(edithWnd, WM_KEYDOWN, (int)VK.F1, 0);

                }
            }*/
        }


        int SW_SHOWNORMAL = 1;
        const int WM_KEYDOWN = 0x0100;
        const int WM_KEYUP = 0x0101;


        enum VK : int
        {
            ///<summary>
            ///Left mouse button
            ///</summary>
            LBUTTON = 0x01,
            ///<summary>
            ///Right mouse button
            ///</summary>
            RBUTTON = 0x02,
            ///<summary>
            ///Control-break processing
            ///</summary>
            CANCEL = 0x03,
            ///<summary>
            ///Middle mouse button (three-button mouse)
            ///</summary>
            MBUTTON = 0x04,
            ///<summary>
            ///Windows 2000/XP: X1 mouse button
            ///</summary>
            XBUTTON1 = 0x05,
            ///<summary>
            ///Windows 2000/XP: X2 mouse button
            ///</summary>
            XBUTTON2 = 0x06,
            ///<summary>
            ///BACKSPACE key
            ///</summary>
            BACK = 0x08,
            ///<summary>
            ///TAB key
            ///</summary>
            TAB = 0x09,
            ///<summary>
            ///CLEAR key
            ///</summary>
            CLEAR = 0x0C,
            ///<summary>
            ///ENTER key
            ///</summary>
            RETURN = 0x0D,
            ///<summary>
            ///SHIFT key
            ///</summary>
            SHIFT = 0x10,
            ///<summary>
            ///CTRL key
            ///</summary>
            CONTROL = 0x11,
            ///<summary>
            ///ALT key
            ///</summary>
            MENU = 0x12,
            ///<summary>
            ///PAUSE key
            ///</summary>
            PAUSE = 0x13,
            ///<summary>
            ///CAPS LOCK key
            ///</summary>
            CAPITAL = 0x14,
            ///<summary>
            ///Input Method Editor (IME) Kana mode
            ///</summary>
            KANA = 0x15,
            ///<summary>
            ///IME Hangul mode
            ///</summary>
            HANGUL = 0x15,
            ///<summary>
            ///IME Junja mode
            ///</summary>
            JUNJA = 0x17,
            ///<summary>
            ///IME final mode
            ///</summary>
            FINAL = 0x18,
            ///<summary>
            ///IME Hanja mode
            ///</summary>
            HANJA = 0x19,
            ///<summary>
            ///IME Kanji mode
            ///</summary>
            KANJI = 0x19,
            ///<summary>
            ///ESC key
            ///</summary>
            ESCAPE = 0x1B,
            ///<summary>
            ///IME convert
            ///</summary>
            CONVERT = 0x1C,
            ///<summary>
            ///IME nonconvert
            ///</summary>
            NONCONVERT = 0x1D,
            ///<summary>
            ///IME accept
            ///</summary>
            ACCEPT = 0x1E,
            ///<summary>
            ///IME mode change request
            ///</summary>
            MODECHANGE = 0x1F,
            ///<summary>
            ///SPACEBAR
            ///</summary>
            SPACE = 0x20,
            ///<summary>
            ///PAGE UP key
            ///</summary>
            PRIOR = 0x21,
            ///<summary>
            ///PAGE DOWN key
            ///</summary>
            NEXT = 0x22,
            ///<summary>
            ///END key
            ///</summary>
            END = 0x23,
            ///<summary>
            ///HOME key
            ///</summary>
            HOME = 0x24,
            ///<summary>
            ///LEFT ARROW key
            ///</summary>
            LEFT = 0x25,
            ///<summary>
            ///UP ARROW key
            ///</summary>
            UP = 0x26,
            ///<summary>
            ///RIGHT ARROW key
            ///</summary>
            RIGHT = 0x27,
            ///<summary>
            ///DOWN ARROW key
            ///</summary>
            DOWN = 0x28,
            ///<summary>
            ///SELECT key
            ///</summary>
            SELECT = 0x29,
            ///<summary>
            ///PRINT key
            ///</summary>
            PRINT = 0x2A,
            ///<summary>
            ///EXECUTE key
            ///</summary>
            EXECUTE = 0x2B,
            ///<summary>
            ///PRINT SCREEN key
            ///</summary>
            SNAPSHOT = 0x2C,
            ///<summary>
            ///INS key
            ///</summary>
            INSERT = 0x2D,
            ///<summary>
            ///DEL key
            ///</summary>
            DELETE = 0x2E,
            ///<summary>
            ///HELP key
            ///</summary>
            HELP = 0x2F,
            ///<summary>
            ///0 key
            ///</summary>
            KEY_0 = 0x30,
            ///<summary>
            ///1 key
            ///</summary>
            KEY_1 = 0x31,
            ///<summary>
            ///2 key
            ///</summary>
            KEY_2 = 0x32,
            ///<summary>
            ///3 key
            ///</summary>
            KEY_3 = 0x33,
            ///<summary>
            ///4 key
            ///</summary>
            KEY_4 = 0x34,
            ///<summary>
            ///5 key
            ///</summary>
            KEY_5 = 0x35,
            ///<summary>
            ///6 key
            ///</summary>
            KEY_6 = 0x36,
            ///<summary>
            ///7 key
            ///</summary>
            KEY_7 = 0x37,
            ///<summary>
            ///8 key
            ///</summary>
            KEY_8 = 0x38,
            ///<summary>
            ///9 key
            ///</summary>
            KEY_9 = 0x39,
            ///<summary>
            ///A key
            ///</summary>
            KEY_A = 0x41,
            ///<summary>
            ///B key
            ///</summary>
            KEY_B = 0x42,
            ///<summary>
            ///C key
            ///</summary>
            KEY_C = 0x43,
            ///<summary>
            ///D key
            ///</summary>
            KEY_D = 0x44,
            ///<summary>
            ///E key
            ///</summary>
            KEY_E = 0x45,
            ///<summary>
            ///F key
            ///</summary>
            KEY_F = 0x46,
            ///<summary>
            ///G key
            ///</summary>
            KEY_G = 0x47,
            ///<summary>
            ///H key
            ///</summary>
            KEY_H = 0x48,
            ///<summary>
            ///I key
            ///</summary>
            KEY_I = 0x49,
            ///<summary>
            ///J key
            ///</summary>
            KEY_J = 0x4A,
            ///<summary>
            ///K key
            ///</summary>
            KEY_K = 0x4B,
            ///<summary>
            ///L key
            ///</summary>
            KEY_L = 0x4C,
            ///<summary>
            ///M key
            ///</summary>
            KEY_M = 0x4D,
            ///<summary>
            ///N key
            ///</summary>
            KEY_N = 0x4E,
            ///<summary>
            ///O key
            ///</summary>
            KEY_O = 0x4F,
            ///<summary>
            ///P key
            ///</summary>
            KEY_P = 0x50,
            ///<summary>
            ///Q key
            ///</summary>
            KEY_Q = 0x51,
            ///<summary>
            ///R key
            ///</summary>
            KEY_R = 0x52,
            ///<summary>
            ///S key
            ///</summary>
            KEY_S = 0x53,
            ///<summary>
            ///T key
            ///</summary>
            KEY_T = 0x54,
            ///<summary>
            ///U key
            ///</summary>
            KEY_U = 0x55,
            ///<summary>
            ///V key
            ///</summary>
            KEY_V = 0x56,
            ///<summary>
            ///W key
            ///</summary>
            KEY_W = 0x57,
            ///<summary>
            ///X key
            ///</summary>
            KEY_X = 0x58,
            ///<summary>
            ///Y key
            ///</summary>
            KEY_Y = 0x59,
            ///<summary>
            ///Z key
            ///</summary>
            KEY_Z = 0x5A,
            ///<summary>
            ///Left Windows key (Microsoft Natural keyboard)
            ///</summary>
            LWIN = 0x5B,
            ///<summary>
            ///Right Windows key (Natural keyboard)
            ///</summary>
            RWIN = 0x5C,
            ///<summary>
            ///Applications key (Natural keyboard)
            ///</summary>
            APPS = 0x5D,
            ///<summary>
            ///Computer Sleep key
            ///</summary>
            SLEEP = 0x5F,
            ///<summary>
            ///Numeric keypad 0 key
            ///</summary>
            NUMPAD0 = 0x60,
            ///<summary>
            ///Numeric keypad 1 key
            ///</summary>
            NUMPAD1 = 0x61,
            ///<summary>
            ///Numeric keypad 2 key
            ///</summary>
            NUMPAD2 = 0x62,
            ///<summary>
            ///Numeric keypad 3 key
            ///</summary>
            NUMPAD3 = 0x63,
            ///<summary>
            ///Numeric keypad 4 key
            ///</summary>
            NUMPAD4 = 0x64,
            ///<summary>
            ///Numeric keypad 5 key
            ///</summary>
            NUMPAD5 = 0x65,
            ///<summary>
            ///Numeric keypad 6 key
            ///</summary>
            NUMPAD6 = 0x66,
            ///<summary>
            ///Numeric keypad 7 key
            ///</summary>
            NUMPAD7 = 0x67,
            ///<summary>
            ///Numeric keypad 8 key
            ///</summary>
            NUMPAD8 = 0x68,
            ///<summary>
            ///Numeric keypad 9 key
            ///</summary>
            NUMPAD9 = 0x69,
            ///<summary>
            ///Multiply key
            ///</summary>
            MULTIPLY = 0x6A,
            ///<summary>
            ///Add key
            ///</summary>
            ADD = 0x6B,
            ///<summary>
            ///Separator key
            ///</summary>
            SEPARATOR = 0x6C,
            ///<summary>
            ///Subtract key
            ///</summary>
            SUBTRACT = 0x6D,
            ///<summary>
            ///Decimal key
            ///</summary>
            DECIMAL = 0x6E,
            ///<summary>
            ///Divide key
            ///</summary>
            DIVIDE = 0x6F,
            ///<summary>
            ///F1 key
            ///</summary>
            F1 = 0x70,
            ///<summary>
            ///F2 key
            ///</summary>
            F2 = 0x71,
            ///<summary>
            ///F3 key
            ///</summary>
            F3 = 0x72,
            ///<summary>
            ///F4 key
            ///</summary>
            F4 = 0x73,
            ///<summary>
            ///F5 key
            ///</summary>
            F5 = 0x74,
            ///<summary>
            ///F6 key
            ///</summary>
            F6 = 0x75,
            ///<summary>
            ///F7 key
            ///</summary>
            F7 = 0x76,
            ///<summary>
            ///F8 key
            ///</summary>
            F8 = 0x77,
            ///<summary>
            ///F9 key
            ///</summary>
            F9 = 0x78,
            ///<summary>
            ///F10 key
            ///</summary>
            F10 = 0x79,
            ///<summary>
            ///F11 key
            ///</summary>
            F11 = 0x7A,
            ///<summary>
            ///F12 key
            ///</summary>
            F12 = 0x7B,
            ///<summary>
            ///F13 key
            ///</summary>
            F13 = 0x7C,
            ///<summary>
            ///F14 key
            ///</summary>
            F14 = 0x7D,
            ///<summary>
            ///F15 key
            ///</summary>
            F15 = 0x7E,
            ///<summary>
            ///F16 key
            ///</summary>
            F16 = 0x7F,
            ///<summary>
            ///F17 key  
            ///</summary>
            F17 = 0x80,
            ///<summary>
            ///F18 key  
            ///</summary>
            F18 = 0x81,
            ///<summary>
            ///F19 key  
            ///</summary>
            F19 = 0x82,
            ///<summary>
            ///F20 key  
            ///</summary>
            F20 = 0x83,
            ///<summary>
            ///F21 key  
            ///</summary>
            F21 = 0x84,
            ///<summary>
            ///F22 key, (PPC only) Key used to lock device.
            ///</summary>
            F22 = 0x85,
            ///<summary>
            ///F23 key  
            ///</summary>
            F23 = 0x86,
            ///<summary>
            ///F24 key  
            ///</summary>
            F24 = 0x87,
            ///<summary>
            ///NUM LOCK key
            ///</summary>
            NUMLOCK = 0x90,
            ///<summary>
            ///SCROLL LOCK key
            ///</summary>
            SCROLL = 0x91,
            ///<summary>
            ///Left SHIFT key
            ///</summary>
            LSHIFT = 0xA0,
            ///<summary>
            ///Right SHIFT key
            ///</summary>
            RSHIFT = 0xA1,
            ///<summary>
            ///Left CONTROL key
            ///</summary>
            LCONTROL = 0xA2,
            ///<summary>
            ///Right CONTROL key
            ///</summary>
            RCONTROL = 0xA3,
            ///<summary>
            ///Left MENU key
            ///</summary>
            LMENU = 0xA4,
            ///<summary>
            ///Right MENU key
            ///</summary>
            RMENU = 0xA5,
            ///<summary>
            ///Windows 2000/XP: Browser Back key
            ///</summary>
            BROWSER_BACK = 0xA6,
            ///<summary>
            ///Windows 2000/XP: Browser Forward key
            ///</summary>
            BROWSER_FORWARD = 0xA7,
            ///<summary>
            ///Windows 2000/XP: Browser Refresh key
            ///</summary>
            BROWSER_REFRESH = 0xA8,
            ///<summary>
            ///Windows 2000/XP: Browser Stop key
            ///</summary>
            BROWSER_STOP = 0xA9,
            ///<summary>
            ///Windows 2000/XP: Browser Search key
            ///</summary>
            BROWSER_SEARCH = 0xAA,
            ///<summary>
            ///Windows 2000/XP: Browser Favorites key
            ///</summary>
            BROWSER_FAVORITES = 0xAB,
            ///<summary>
            ///Windows 2000/XP: Browser Start and Home key
            ///</summary>
            BROWSER_HOME = 0xAC,
            ///<summary>
            ///Windows 2000/XP: Volume Mute key
            ///</summary>
            VOLUME_MUTE = 0xAD,
            ///<summary>
            ///Windows 2000/XP: Volume Down key
            ///</summary>
            VOLUME_DOWN = 0xAE,
            ///<summary>
            ///Windows 2000/XP: Volume Up key
            ///</summary>
            VOLUME_UP = 0xAF,
            ///<summary>
            ///Windows 2000/XP: Next Track key
            ///</summary>
            MEDIA_NEXT_TRACK = 0xB0,
            ///<summary>
            ///Windows 2000/XP: Previous Track key
            ///</summary>
            MEDIA_PREV_TRACK = 0xB1,
            ///<summary>
            ///Windows 2000/XP: Stop Media key
            ///</summary>
            MEDIA_STOP = 0xB2,
            ///<summary>
            ///Windows 2000/XP: Play/Pause Media key
            ///</summary>
            MEDIA_PLAY_PAUSE = 0xB3,
            ///<summary>
            ///Windows 2000/XP: Start Mail key
            ///</summary>
            LAUNCH_MAIL = 0xB4,
            ///<summary>
            ///Windows 2000/XP: Select Media key
            ///</summary>
            LAUNCH_MEDIA_SELECT = 0xB5,
            ///<summary>
            ///Windows 2000/XP: Start Application 1 key
            ///</summary>
            LAUNCH_APP1 = 0xB6,
            ///<summary>
            ///Windows 2000/XP: Start Application 2 key
            ///</summary>
            LAUNCH_APP2 = 0xB7,
            ///<summary>
            ///Used for miscellaneous characters; it can vary by keyboard.
            ///</summary>
            OEM_1 = 0xBA,
            ///<summary>
            ///Windows 2000/XP: For any country/region, the '+' key
            ///</summary>
            OEM_PLUS = 0xBB,
            ///<summary>
            ///Windows 2000/XP: For any country/region, the ',' key
            ///</summary>
            OEM_COMMA = 0xBC,
            ///<summary>
            ///Windows 2000/XP: For any country/region, the '-' key
            ///</summary>
            OEM_MINUS = 0xBD,
            ///<summary>
            ///Windows 2000/XP: For any country/region, the '.' key
            ///</summary>
            OEM_PERIOD = 0xBE,
            ///<summary>
            ///Used for miscellaneous characters; it can vary by keyboard.
            ///</summary>
            OEM_2 = 0xBF,
            ///<summary>
            ///Used for miscellaneous characters; it can vary by keyboard.
            ///</summary>
            OEM_3 = 0xC0,
            ///<summary>
            ///Used for miscellaneous characters; it can vary by keyboard.
            ///</summary>
            OEM_4 = 0xDB,
            ///<summary>
            ///Used for miscellaneous characters; it can vary by keyboard.
            ///</summary>
            OEM_5 = 0xDC,
            ///<summary>
            ///Used for miscellaneous characters; it can vary by keyboard.
            ///</summary>
            OEM_6 = 0xDD,
            ///<summary>
            ///Used for miscellaneous characters; it can vary by keyboard.
            ///</summary>
            OEM_7 = 0xDE,
            ///<summary>
            ///Used for miscellaneous characters; it can vary by keyboard.
            ///</summary>
            OEM_8 = 0xDF,
            ///<summary>
            ///Windows 2000/XP: Either the angle bracket key or the backslash key on the RT 102-key keyboard
            ///</summary>
            OEM_102 = 0xE2,
            ///<summary>
            ///Windows 95/98/Me, Windows NT 4.0, Windows 2000/XP: IME PROCESS key
            ///</summary>
            PROCESSKEY = 0xE5,
            ///<summary>
            ///Windows 2000/XP: Used to pass Unicode characters as if they were keystrokes. The VK_PACKET key is the low word of a 32-bit Virtual Key value used for non-keyboard input methods. For more information, see Remark in KEYBDINPUT, SendInput, WM_KEYDOWN, and WM_KEYUP
            ///</summary>
            PACKET = 0xE7,
            ///<summary>
            ///Attn key
            ///</summary>
            ATTN = 0xF6,
            ///<summary>
            ///CrSel key
            ///</summary>
            CRSEL = 0xF7,
            ///<summary>
            ///ExSel key
            ///</summary>
            EXSEL = 0xF8,
            ///<summary>
            ///Erase EOF key
            ///</summary>
            EREOF = 0xF9,
            ///<summary>
            ///Play key
            ///</summary>
            PLAY = 0xFA,
            ///<summary>
            ///Zoom key
            ///</summary>
            ZOOM = 0xFB,
            ///<summary>
            ///Reserved
            ///</summary>
            NONAME = 0xFC,
            ///<summary>
            ///PA1 key
            ///</summary>
            PA1 = 0xFD,
            ///<summary>
            ///Clear key
            ///</summary>
            OEM_CLEAR = 0xFE
        }



        //[DllImport("user32.dll")]
        //static extern bool PostMessage(IntPtr hWnd, UInt32 Msg, int wParam, int lParam);

        //https://www.codeproject.com/Articles/5264831/How-to-Send-Inputs-using-Csharp
        [StructLayout(LayoutKind.Sequential)]
        public struct KeyboardInput
        {
            public ushort wVk;
            public ushort wScan;
            public uint dwFlags;
            public uint time;
            public IntPtr dwExtraInfo;
        }
        [StructLayout(LayoutKind.Sequential)]
        public struct MouseInput
        {
            public int dx;
            public int dy;
            public uint mouseData;
            public uint dwFlags;
            public uint time;
            public IntPtr dwExtraInfo;
        }


        [StructLayout(LayoutKind.Sequential)]
        public struct HardwareInput
        {
            public uint uMsg;
            public ushort wParamL;
            public ushort wParamH;
        }

        [StructLayout(LayoutKind.Explicit)]
        public struct InputUnion
        {
            [FieldOffset(0)] public MouseInput mi;
            [FieldOffset(0)] public KeyboardInput ki;
            [FieldOffset(0)] public HardwareInput hi;
        }

        public struct Input
        {
            public int type;
            public InputUnion u;
        }

        [Flags]
        public enum InputType
        {
            Mouse = 0,
            Keyboard = 1,
            Hardware = 2
        }

        [Flags]
        public enum KeyEventF
        {
            KeyDown = 0x0000,
            ExtendedKey = 0x0001,
            KeyUp = 0x0002,
            Unicode = 0x0004,
            Scancode = 0x0008
        }


        [Flags]
        public enum MouseEventF
        {
            Absolute = 0x8000,
            HWheel = 0x01000,
            Move = 0x0001,
            MoveNoCoalesce = 0x2000,
            LeftDown = 0x0002,
            LeftUp = 0x0004,
            RightDown = 0x0008,
            RightUp = 0x0010,
            MiddleDown = 0x0020,
            MiddleUp = 0x0040,
            VirtualDesk = 0x4000,
            Wheel = 0x0800,
            XDown = 0x0080,
            XUp = 0x0100
        }
        [DllImport("user32.dll", SetLastError = true)]
        private static extern uint SendInput(uint nInputs, Input[] pInputs, int cbSize);



        [DllImport("user32.dll")]
        private static extern IntPtr GetMessageExtraInfo();



        /*
        Input[] inputs = new Input[]
{
    new Input
    {
        type = (int)InputType.Keyboard,
        u = new InputUnion
        {
            ki = new KeyboardInput
            {
                wVk = 0,
                wScan = 0x11, // W
                dwFlags = (uint)(KeyEventF.KeyDown | KeyEventF.Scancode),
                dwExtraInfo = GetMessageExtraInfo()
            }
        }
    },
    new Input
    {
        type = (int)InputType.Keyboard,
        u = new InputUnion
        {
            ki = new KeyboardInput
            {
                wVk = 0,
                wScan = 0x11, // W
                dwFlags = (uint)(KeyEventF.KeyUp | KeyEventF.Scancode),
                dwExtraInfo = GetMessageExtraInfo()
            }
        }
    }
};

        SendInput((uint) inputs.Length, inputs, Marshal.SizeOf(typeof(Input)));
        */


















        //https://stackoverflow.com/questions/8739523/directing-mouse-events-dllimportuser32-dll-click-double-click



        /*[DllImport("user32.dll", CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall)]
        public static extern void mouse_event(uint dwFlags, uint dx, uint dy, uint cButtons, UIntPtr dwExtraInfo);
        private const uint MOUSEEVENTF_LEFTDOWN = 0x02;
        private const uint MOUSEEVENTF_LEFTUP = 0x04;
        private const uint MOUSEEVENTF_RIGHTDOWN = 0x08;
        private const uint MOUSEEVENTF_RIGHTUP = 0x10;
        private const uint WM_MOUSEHOVER = 0x02A1;*/

        /*void sendMouseRightclick(Point p)
        {
            mouse_event(MOUSEEVENTF_RIGHTDOWN | MOUSEEVENTF_RIGHTUP, p.X, p.Y, 0, 0);
        }

        void sendMouseDoubleClick(Point p)
        {
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, p.X, p.Y, 0, 0);

            Thread.Sleep(150);

            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, p.X, p.Y, 0, 0);
        }

        void sendMouseRightDoubleClick(Point p)
        {
            mouse_event(MOUSEEVENTF_RIGHTDOWN | MOUSEEVENTF_RIGHTUP, p.X, p.Y, 0, 0);

            Thread.Sleep(150);

            mouse_event(MOUSEEVENTF_RIGHTDOWN | MOUSEEVENTF_RIGHTUP, p.X, p.Y, 0, 0);
        }

        void sendMouseDown()
        {
            mouse_event(MOUSEEVENTF_LEFTDOWN, 50, 50, 0, 0);
        }

        void sendMouseUp()
        {
            mouse_event(MOUSEEVENTF_LEFTUP, 50, 50, 0, 0);
        }



        sendMouseDown();
        Cursor.Position = new Point(30,30);
        sendMouseUp();
        */









        //https://stackoverflow.com/questions/10355286/programmatically-mouse-click-in-another-window/10355905#10355905

        public class ClickOnPointTool
        {



        }
        /*[DllImport("user32.dll")]
        static extern bool ClientToScreen(IntPtr hWnd, ref Point lpPoint);

        [DllImport("user32.dll")]
        internal static extern uint SendInput(uint nInputs, [MarshalAs(UnmanagedType.LPArray), In] INPUT[] pInputs, int cbSize);

#pragma warning disable 649
        internal struct INPUT
        {
            public UInt32 Type;
            public MOUSEKEYBDHARDWAREINPUT Data;
        }

        [StructLayout(LayoutKind.Explicit)]
        internal struct MOUSEKEYBDHARDWAREINPUT
        {
            [FieldOffset(0)]
            public MOUSEINPUT Mouse;
        }

        internal struct MOUSEINPUT
        {
            public Int32 X;
            public Int32 Y;
            public UInt32 MouseData;
            public UInt32 Flags;
            public UInt32 Time;
            public IntPtr ExtraInfo;
        }

#pragma warning restore 649


        public static void ClickOnPoint(IntPtr wndHandle, Point clientPoint, int mousex, int mousey)
        {
            var oldPos = new Point(mousex, mousey);// Cursor.Position;

            /// get screen coordinates
            //ClientToScreen(wndHandle, ref clientPoint);

            /// set cursor on coords, and press mouse
            //Cursor.Position = new Point(clientPoint.X, clientPoint.Y);
            SetCursorPos((int)mousex, (int)mousey);

            var inputMouseDown = new INPUT();
            inputMouseDown.Type = 0; /// input type mouse
            inputMouseDown.Data.Mouse.Flags = 0x0002; /// left button down

            var inputMouseUp = new INPUT();
            inputMouseUp.Type = 0; /// input type mouse
            inputMouseUp.Data.Mouse.Flags = 0x0004; /// left button up

            var inputs = new INPUT[] { inputMouseDown, inputMouseUp };
            SendInput((uint)inputs.Length, inputs, Marshal.SizeOf(typeof(INPUT)));

            /// return mouse 
            //Cursor.Position = oldPos;
            SetCursorPos((int)oldPos.X, (int)oldPos.Y);
        }*/


        /*
        public const int KEY_W = 0x57;
        public const int KEY_A = 0x41;
        public const int KEY_S = 0x53;
        public const int KEY_D = 0x44;
        public const int KEY_SPACE = 0x20; //0x39
        public const int KEY_E = 0x45;
        public const int KEY_Q = 0x51;*/

        /*public const int KEYEVENTF_KEYUP = 0x0002;
        public const int KEYEVENTF_EXTENDEDKEY = 0x0001;

        const uint MOUSEEVENTF_ABSOLUTE = 0x8000;
        //const uint MOUSEEVENTF_LEFTDOWN = 0x0002;
        //const uint MOUSEEVENTF_LEFTUP = 0x0004;
        const uint MOUSEEVENTF_MIDDLEDOWN = 0x0020;
        const uint MOUSEEVENTF_MIDDLEUP = 0x0040;
        const uint MOUSEEVENTF_MOVE = 0x0001;
        //const uint MOUSEEVENTF_RIGHTDOWN = 0x0008;
        //const uint MOUSEEVENTF_RIGHTUP = 0x0010;
        const uint MOUSEEVENTF_XDOWN = 0x0080;
        const uint MOUSEEVENTF_XUP = 0x0100;
        const uint MOUSEEVENTF_WHEEL = 0x0800;
        const uint MOUSEEVENTF_HWHEEL = 0x01000;*/
        //[DllImport("user32.dll", CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall, EntryPoint = "mouse_event")]
        // public static extern void mouse_event(uint dwFlags, uint dx, uint dy, long dwData, uint dwExtraInfo);


        [DllImport("user32.dll", CharSet = CharSet.Auto)]
        static extern IntPtr SendMessage(IntPtr hWnd,
                                 UInt32 Msg,
                                 IntPtr wParam,
                                 IntPtr lParam);



        [DllImport("User32.dll")]
        private static extern bool SetCursorPos(int X, int Y);


        //[DllImport("user32.dll")]
        //static extern bool PostMessage(IntPtr hWnd, UInt32 Msg, int wParam, int lParam);
        //static extern bool PostMessage(IntPtr hWnd, UInt32 Msg, IntPtr wParam, IntPtr lParam




        private const int VK_LEFT = 0x25;
        private const int VK_4 = 0x34;
        private const int VK_5 = 0x35;


        static int haspressedkey4VE = 0;
        const int WM_SYSKEYDOWN = 0x0104;
        const int WM_SYSKEYUP = 0x0105;
        const int VK_F5 = 0x74;
        const int WM_SYSCOMMAND = 0x112;
        const int SC_MAXIMIZE = 0xf030;
        //const int WM_KEYDOWN = 0x0100;
        //const int WM_KEYUP = 0x0101;
        //const int KEYEVENTF_EXTENDEDKEY = 0x0001;

        const uint WM_LBUTTONDOWN = 0x0201;
        const uint WM_LBUTTONUP = 0x0202;

        const uint WM_RBUTTONDOWN = 0x0204;
        const uint WM_RBUTTONUP = 0x0205;

        /*[DllImport("User32.dll")]
        //public static extern Int32 SendMessage(int hWnd, int Msg, int wParam, string lParam);
        public static extern Int32 SendMessage(int hWnd, uint Msg, int wParam, int lParam);*/
        //const uint WM_KEYDOWN = 0x100; // 0x0100
        //const uint WM_KEYUP = 0x101; //0x0101
        const int KeyDown = 0x0001;
        const int KeyUp = 0x0002;
        const byte VK_SPACE = 0x20;
        const byte SpaceSC = 39;



        [DllImport("User32.dll", EntryPoint = "SendMessage", SetLastError = true)]
        //private static extern Int32 SendMessageByString(IntPtr hwnd, UInt32 msg, Int32 WParam, StringBuilder output);
        private static extern Int32 SendMessageByString(IntPtr hwnd, uint msg, Int32 WParam, StringBuilder output);
        const int WM_GETTEXTLENGTH = 0x000e;
        const int WM_GETTEXT = 0x000d;

        public static string GetText(int lparam)
        {
            int len = SendMessageByString(Program.vewindowsfoundedz, WM_GETTEXTLENGTH, 0, null);
            var sb = new StringBuilder(len + 1);
            //sb.Append(lparam.ToString());

            SendMessageByString(Program.vewindowsfoundedz, WM_LBUTTONDOWN, sb.Capacity, sb);
            SendMessageByString(Program.vewindowsfoundedz, WM_LBUTTONUP, sb.Capacity, sb);
            //SendMessageByString(Program.vewindowsfoundedz, WM_GETTEXT,sb.Capacity,sb);
            return sb.ToString();
        }

        Program.Win32Point somepoint;
        internal struct Win32Point
        {
            public Int32 X;
            public Int32 Y;
        };

    }
}