//////////////////////
////   GLOBALS
//////////////////////
Texture2D shaderTexture;
SamplerState SampleType;

//https://gamedev.stackexchange.com/questions/32681/random-number-hlsl
float rand_1_05(in float2 uv)
{
    float2 noise = (frac(sin(dot(uv ,float2(12.9898,78.233)*2.0)) * 43758.5453));
    return abs(noise.x + noise.y) * 0.5;
}

float2 rand_2_10(in float2 uv) {
    float noiseX = (frac(sin(dot(uv, float2(12.9898,78.233) * 2.0)) * 43758.5453));
    float noiseY = sqrt(1 - noiseX * noiseX);
    return float2(noiseX, noiseY);
}

float2 rand_2_0004(in float2 uv)
{
    float noiseX = (frac(sin(dot(uv, float2(12.9898,78.233)      )) * 43758.5453));
    float noiseY = (frac(sin(dot(uv, float2(12.9898,78.233) * 2.0)) * 43758.5453));
    return float2(noiseX, noiseY) * 0.004;
}

// Source
// http://www.gamedev.net/topic/592001-random-number-generation-based-on-time-in-hlsl/
// Supposebly from the NVidia Direct3D10 SDK
// Slightly modified for my purposes
#define RANDOM_IA 16807
#define RANDOM_IM 2147483647
#define RANDOM_AM (1.0f/float(RANDOM_IM))
#define RANDOM_IQ 127773u
#define RANDOM_IR 2836
#define RANDOM_MASK 123459876

struct NumberGenerator {
    int seed; // Used to generate values.

    // Returns the current random float.
    float GetCurrentFloat() {
        Cycle();
        return RANDOM_AM * seed;
    }

    // Returns the current random int.
    int GetCurrentInt() {
        Cycle();
        return seed;
    }

    // Generates the next number in the sequence.
    void Cycle() {  
        seed ^= RANDOM_MASK;
        int k = seed / RANDOM_IQ;
        seed = RANDOM_IA * (seed - k * RANDOM_IQ ) - RANDOM_IR * k;

        if (seed < 0 ) 
            seed += RANDOM_IM;

        seed ^= RANDOM_MASK;
    }

    // Cycles the generator based on the input count. Useful for generating a thread unique seed.
    // PERFORMANCE - O(N)
    void Cycle(const uint _count) {
        for (uint i = 0; i < _count; ++i)
            Cycle();
    }

    // Returns a random float within the input range.
    float GetRandomFloat(const float low, const float high) {
        float v = GetCurrentFloat();
        return low * ( 1.0f - v ) + high * v;
    }

    // Sets the seed
    void SetSeed(const uint value) {
        seed = int(value);
        Cycle();
    }
};


SamplerState textureSampler
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
	AddressW = Wrap;
};



/*cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float specularPower;
	float4 specularColor;
};*/

/*cbuffer LightBuffer :register(b1)
{
	float4 ambientColor;
	float4 diffuseColor;
	float4 specularColor;
	float3 lightDirection;
	float padding0;
	float3 lightPosition;
	float lightextras.y;
};*/

cbuffer LightBuffer //:register(b1)
{	
	float4 ambientColor;
	float4 diffuseColor;
	float4 specularColor;
	float4 lightDirection;
	float4 lightPosition;
	float4 lightextras; // z for grid types // 
	float4 gridcolor;
	float4 cursorcolor;

	float4 sunlightDirection;
	float4 sunlightPosition;
	float4 sunlightextras;


	//float padding0;
	//float3 lightPosition;
	//float lightextras.y;
};



cbuffer OVRDir :register(b2)
{
	float4 ovrdirf;
	float4 ovrdiru;
	float4 ovrdirr;
	float4 ovrpos;
};



//////////////////////
////   TYPES
//////////////////////
struct PixelInputType
{
	/*float4 position : SV_POSITION;
	float4 color : COLOR0; //byte map index xyz and w for typeofface 0 to 5
	float3 normal : NORMAL0;
	float paddingvert0 : PSIZE0;	//instance width
	float2 tex : TEXCOORD0;
	float paddingvert1 : PSIZE1;	//instance height
	float paddingvert2 : PSIZE2;	//instance depth
	float4 instancePosition : POSITION1;
	float4 instanceRadRotFORWARD : POSITION2;
	float4 instanceRadRotRIGHT : POSITION3;
	float4 instanceRadRotUP : POSITION4;
	float4 mapmatrix0 : POSITION5;
	float4 mapmatrix1 : POSITION6;
	float4 mapmatrix2 : POSITION7;
	float4 mapmatrix3 : POSITION8;
	float4 mapmatrix4 : POSITION9;
	float4 mapmatrix5 : POSITION10;
	float4 mapmatrix6 : POSITION11;
	float4 mapmatrix7 : POSITION12;
	float4 mapmatrix8 : POSITION13;
	float4 mapmatrix9 : POSITION14;
	float4 mapmatrix10 : POSITION15;
	float4 mapmatrix11 : POSITION16;
	float4 mapmatrix12 : POSITION17;
	float4 mapmatrix13 : POSITION18;
	float4 mapmatrix14 : POSITION19;
	float4 mapmatrix15 : POSITION20;

	int xindex : PSIZE3;	
	int yindex : PSIZE4;*/


	float4 position : SV_POSITION;
	float4 color : COLOR0; //byte map index xyz and w for typeofface 0 to 5
	float3 normal : NORMAL0;
	float paddingvert0 : PSIZE0;	//instance width
	float2 tex : TEXCOORD0;
	float paddingvert1 : PSIZE1;	//instance height
	float paddingvert2 : PSIZE2;	//instance depth
	float4 instancePosition : POSITION1;	
	
	float4 instanceRadRotFORWARD : POSITION2;
	float4 instanceRadRotRIGHT : POSITION3;
	//float4 instanceRadRotUP : POSITION4;

	int xindex : PSIZE3;	
	int yindex : PSIZE4;
};

//float _lastDOTProdAngleWithHypAndOpp = -1;
static const float PI = 3.1415926535897932384626433832795f;
static const float3 world_forward = float3(0,0,1);
static const float3 world_backward = float3(0,0,-1);
static const float3 world_right = float3(1,0,0);
static const float3 world_left = float3(-1,0,0);
static const float3 world_up = float3(0,1,0);
static const float3 world_down = float3(0,-1,0);


static float dstX= 0;
static float dstY= 0;
static float dstZ = 0;
static float dstX_vs_dstZ = 0;
static float dstX_vs_dstY = 0;
static float dstY_vs_dstZ = 0;

float sc_check_distance_node_3d_geometry(float3 nodeA, float3 nodeB, float minx, float miny, float minz, float maxx, float maxy, float maxz) 
{
	//STEVE CHASSÃ‰ 3D blueprint for sphere type and a ton more. based on 2d version of Sebastian Lague. but my version is not perfect. i don't know yet what else to put in there.
	//the solution was easier than i thought and it came to me quite fast after fearing for months i'd never be able to quickly get this function written. This function is also a
	//main part of the upgrade that i want to implement to the Jitter physics engine for spatial awareness. In the jitter physics engine, it seems as if every frame that the objects
	//are enabled and non-static, jitter checks ALL bounding boxes for collisions between all of them. So of course at some point, the more objects in the scene, the more bounding
	//boxes it has to check for each individual objects. for instance, lets say there is 1000 objects in the scene, so index 0 to index 999, if object 0 checks against ALL other
	//998 objects, it's a huge waste of performance. But there are collision "islands" in the jitter physics engine but those i believe are chosen only when bounding boxes are 
	//officially declared as colliding. so i want to see if i can use a fast distance checker (which i didnt test yet against Math.Sqrt or the very fast quake sqrt). But all of
	//the things i learned in doing chunks are also going to be needed for when im going to start developing things around and inside of the Jitter Physics Engine. So prior upgrading the physics
	//engine jitter for my engine sccoresystems, i can only have 4000 max objects and it would lag the scene. but the tests are not carved on rock yet because, 
	//1. im not loading the dll how i should maybe
	//2. maybe because multiple instances of the physics engine like i am loading them isn't the proper way to do it? in monogame, to load different scene instances, they use 
	//   Activator.CreateInstance and i was unable to use that anywhere back then. I might try again at some point... But right now i am using an interface. In sccsv10
	//


	dstX = abs((nodeA.x) - (nodeB.x));
	dstY = abs((nodeA.y) - (nodeB.y));
	dstZ = abs((nodeA.z) - (nodeB.z));

	dstX_vs_dstZ = 0;
	dstX_vs_dstY = 0;
	dstY_vs_dstZ = 0;

	if (dstX > dstZ)
	{
		dstX_vs_dstZ = maxx * dstZ + minx * (dstX - dstZ);
	}
	else
	{
		dstX_vs_dstZ = maxx * dstX + minx * (dstZ - dstX);
	}

	if (dstX > dstY)
	{
		dstX_vs_dstY = maxy * dstY + miny * (dstX - dstY);
	}
	else
	{
		dstX_vs_dstY = maxy * dstX + miny * (dstY - dstX);
	}

	if (dstY > dstZ)
	{
		dstY_vs_dstZ = maxz * dstZ + minz * (dstY - dstZ);
	}
	else
	{
		dstY_vs_dstZ = maxz * dstY + minz * (dstZ - dstY);
	}
	return dstX_vs_dstY + dstX_vs_dstZ + dstY_vs_dstZ;
}

static float4 the_color = float4(1.0f,1.0f,1.0f,1.0f);// float4(0.95f,0.95f,0.95f,1);

static int tinyChunkWidth = 8;
static int tinyChunkHeight = 8;
static int tinyChunkDepth = 1;


static float4 gridcolorred = float4(1,0,0,1);
static float4 gridcolorgreen = float4(0.45f,1,0.45f,1);
static float4 gridcolorblue = float4(0,0,1,1);
static float4 gridcolorgray = float4(0.15f,0.15f,0.15f,1);
static float4 gridcolorblack = float4(0.0f,0.0f,0.0f,1);
static float4 gridcolorwhite = float4(1.0f,1.0f,1.0f,1);

static float4 cursorcolorred = float4(1,0.45f,0.45f,1);
static float4 cursorcolorgreen = float4(0.45f,1,0.45f,1);
static float4 cursorcolorblue = float4(0.45f,0.45f,1,1);
static float4 cursorcolorgray = float4(0.15f,0.15f,0.15f,1);
static float4 cursorcolorblack = float4(0.0f,0.0f,0.0f,1);
static float4 cursorcolorwhite = float4(1.0f,1.0f,1.0f,1);



//////////////////////
////   Pixel Shader
/////////////////////
float4 TexturePixelShader(PixelInputType input) : SV_TARGET
{
	//float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;
	float3 reflection;
	float4 specular;

	// Sample the pixel color from the texture using the sampler at this texture coordinate location.
	//textureColor = shaderTexture.Sample(SampleType, input.tex);



	float4 somecolor =  float4(1.0f,1.0f,1.0f,1.0f);//float4(1.0f,1.0f,1.0f,1.0f);// float4(0.95f,0.95f,0.95f,1.0f);
	float4 somemoddedinputcolor;// = the_color;
	float4 colorer;
	float3 inputPos;// = float3();
	float distTot = 0;
	float3 dirLightToFace;
	float someOtherDot;
	float4 modColor;




	
	//option 
	int sccsvvdhdgrayscaleorcolored = int(round(lightextras.w));
	//option

	//option 
	float theperlinvalue = round(lightextras.w);
	//option

	
	//cpu perlin decimal seed
	float lightextrasrandomval = lightextras.w - trunc(lightextras.w);
	//cpu perlin decimal seed

	//slider value light intensity
	float lightintensityslidervalue = lightextras.y;
	//slider value light intensity

	//slider value screencapturebrightnesss
	float screencapturebrightnessslidervalue = lightextras.x;
	//slider value screencapturebrightnesss
	
	//float4 thenormalscolor = float4(0.075f,0.075f,0.075f,1.0f);



	//float4 thenormalscolor = float4(0.15f,0.15f,0.15f,1.0f);
	//float4 thenormalscolor = float4(0.25f,0.25f,0.25f,1.0f);
	float4 thenormalscolor = float4(0.5f,0.5f,0.5f,1.0f);


	int cursortypeoption = int(cursorcolor.w);


	//somecolor = float4((cursorcolor.x/255),(cursorcolor.y/255),(cursorcolor.z/255),1.0f);
	somemoddedinputcolor = the_color; //float4((cursorcolor.x/255),(cursorcolor.y/255),(cursorcolor.z/255),1.0f);//

	//NORMALS CALCULATIONS
	//NORMALS CALCULATIONS
	//NORMALS CALCULATIONS
	//float4 somemoddedinputcolor = the_color;// input.color;
	// WARNING==INPUT.COLOR IS NOT THE COLOR WHEN COMING IN, IT IS THE INDEX POSITION OF EACH BYTES X/Y/Z. BUT IN ORDER TO DISPLAY A COLOR, YOU NEED TO HAVE THIS PIXEL SHADER INPUT.COLOR 
	// SET TO THE DESIRED COLOR WHEN THIS HLSL METHOD FINISHES OTHERWISE YOU WILL GET A MULTICOLOR CHUNK BECAUSE THE INDEXES GO STRAIGHT FROM 0 TO THE WIDTH OF THE CHUNK FROM 0 TO 3 IN THE 
	// X/Y/Z AXIS AND THAT IS THE COLORS.


	inputPos.x = input.position.x + input.instancePosition.x;// + somemoddedinputcolor.x;
	inputPos.y = input.position.y + input.instancePosition.y;// + somemoddedinputcolor.y;
	inputPos.z = input.position.z + input.instancePosition.z;// + somemoddedinputcolor.z;

	/*
	inputPos.x = input.position.x + input.instanceRadRotRIGHT.x;// + somemoddedinputcolor.x;
	inputPos.y = input.position.y + input.instanceRadRotRIGHT.y;// + somemoddedinputcolor.y;
	inputPos.z = input.position.z + input.instanceRadRotRIGHT.z;// + somemoddedinputcolor.z;
	*/




	//float3 lightDir;
	//float lightIntensity;
		

	colorer = ambientColor;

	lightDir = -lightDirection;

	//float distTot = sc_check_distance_node_3d_geometry(lightPosition, inputPos, 0.1f, 0.1f, 0.1f, 1, 1, 1);
	distTot = sc_check_distance_node_3d_geometry(lightPosition, inputPos, 9, 9, 9, 9, 9, 9);
	//float distTot = sc_check_distance_node_3d_geometry(lightPosition, inputPos, 3, 3, 3, 3, 3, 3);
	//float distTot = sc_check_distance_node_3d_geometry(lightPosition, inputPos, 1, 1, 1, 1, 1, 1);

	//float distTot = sqrt(((lightPosition.x - inputPos.x)*(lightPosition.x - inputPos.x)) + ((lightPosition.y - inputPos.y)*(lightPosition.y - inputPos.y)) + ((lightPosition.z - inputPos.z)*(lightPosition.z - inputPos.z)));

	dirLightToFace = lightPosition - inputPos;
	dirLightToFace /= distTot;

	someOtherDot = dot(dirLightToFace, lightDir);

	if(someOtherDot >= 0)
	{
		float DOTProdAngleWithHypAndOpp = saturate(dot(input.normal, dirLightToFace));

		//someOtherDot =  (DOTProdAngleWithHypAndOpp + someOtherDot) * 0.5f;

		float someTester = lightextras.y - distTot;
		float distMod = someTester;
		distMod *= 0.1f;	 //0.01f // 0.1f // 0.5f
		float4 modColor = colorer;

		modColor += (diffuseColor * (DOTProdAngleWithHypAndOpp)) * distMod;
		modColor = saturate(modColor);

		//DOTProdAngleWithHypAndOpp = saturate(dot(input.normal, dirLightToFace));

		somemoddedinputcolor = somecolor + DOTProdAngleWithHypAndOpp * modColor;// * modColor * 0.75f;

		if(input.normal.x == 1.0)
		{
			somemoddedinputcolor *= 0.555f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.x == -1.0)
		{
			somemoddedinputcolor *=  0.145f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.y == 1.0)
		{
			somemoddedinputcolor*=  0.475f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.y == -1.0)
		{
			somemoddedinputcolor*=  0.135f;//float4(0.15,0.95,0.15,1);
		}
		if(input.normal.z == 1.0)
		{
			somemoddedinputcolor *=  0.765f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.z == -1.0)
		{
			somemoddedinputcolor *=  0.35f;//float4(0.15,0.95,0.15,1);
		}
	
		float somedot = dot(input.normal, dirLightToFace);

		if(somedot <= 0)
		{	
			// Invert the light direction for calculations.
			lightDir = - lightDirection;

			// Calculate the amount of the light on this pixel.
			lightIntensity = saturate(dot(input.normal, dirLightToFace));

			somemoddedinputcolor *=  1 + (saturate(lightIntensity * somedot * distTot*0.35f));
		}
	}
	else
	{
		float DOTProdAngleWithHypAndOpp = saturate(dot(input.normal, dirLightToFace));

		//someOtherDot =  (DOTProdAngleWithHypAndOpp + someOtherDot) * 0.5f;

		float someTester = lightextras.y - distTot;
		float distMod = someTester;
		distMod *= 0.1f;	 //0.01f
			modColor = colorer;

		modColor += (diffuseColor * (DOTProdAngleWithHypAndOpp)) * distMod;
		modColor = saturate(modColor);


		//DOTProdAngleWithHypAndOpp = saturate(dot(input.normal, dirLightToFace));


		somemoddedinputcolor = somecolor + DOTProdAngleWithHypAndOpp * modColor;// * modColor * 0.75f;


		if(input.normal.x == 1.0)
		{
			somemoddedinputcolor *= 0.555f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.x == -1.0)
		{
			somemoddedinputcolor *=  0.145f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.y == 1.0)
		{
			somemoddedinputcolor*=  0.475f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.y == -1.0)
		{
			somemoddedinputcolor*=  0.135f;//float4(0.15,0.95,0.15,1);
		}
		if(input.normal.z == 1.0)
		{
			somemoddedinputcolor *=  0.765f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.z == -1.0)
		{
			somemoddedinputcolor *=  0.35f;//float4(0.15,0.95,0.15,1);
		}
	}
	//NORMALS CALCULATIONS
	//NORMALS CALCULATIONS
	//NORMALS CALCULATIONS




	
	//SETTING A DIFFERENT SHADE OF THE SAME COLOR FOR THE NORMALS
	//SETTING A DIFFERENT SHADE OF THE SAME COLOR FOR THE NORMALS
	if(input.normal.x == 1.0)
	{
		thenormalscolor *= 0.555f;//float4(0.15,0.95,0.15,1);
	}
	
	if(input.normal.x == -1.0)
	{
		thenormalscolor *=  0.145f;//float4(0.15,0.95,0.15,1);
	}
	
	if(input.normal.y == 1.0)
	{
		thenormalscolor*=  0.475f;//float4(0.15,0.95,0.15,1);
	}
	
	if(input.normal.y == -1.0)
	{
		thenormalscolor*=  0.135f;//float4(0.15,0.95,0.15,1);
	}
	if(input.normal.z == 1.0)
	{
		thenormalscolor *=  0.765f;//float4(0.15,0.95,0.15,1);
	}
	
	if(input.normal.z == -1.0)
	{
		thenormalscolor *=  0.35f;//float4(0.15,0.95,0.15,1);
	}



	if(sccsvvdhdgrayscaleorcolored == 2)
	{
		thenormalscolor += (screencapturebrightnessslidervalue * 0.00025f);
	}
	else
	{
		if(screencapturebrightnessslidervalue == 0)
		{
			
		}

		//thenormalscolor *= (screencapturebrightnessslidervalue * 0.1f); // 0.1f



	}
	
	//SETTING A DIFFERENT SHADE OF THE SAME COLOR FOR THE NORMALS
	//SETTING A DIFFERENT SHADE OF THE SAME COLOR FOR THE NORMALS







	int x = int(input.color.x);
	int y = int(input.color.y);
	int z = int(input.color.z);
	int facetype = int(input.color.w);

	//int instancesw = int(input.paddingvert0);
	//int instancesh = int(input.paddingvert1);
	//int instancesd = int(input.paddingvert2);

	int instancesw = 128;//int(input.paddingvert0); // 256 // 240 // 320 // 480 // 128 //120
	int instancesh = 72;//int(input.paddingvert1); // 128 // 135 // 180 // 270 // 72 //68
	int instancesd = 1;//int(input.paddingvert2);

	float screensinw = (round(input.paddingvert0) * 2);
	float screensinh = round((input.paddingvert0 - floor(input.paddingvert0)) * 10 * 2);

	int screenperw = 2;//int(input.paddingvert0); // 256 // 240 // 320 // 480
	int screenperh = 2;//int(input.paddingvert1); // 128 // 135 // 180 // 270
	int screenperdepth = 1;//int(input.paddingvert2);

	//10 instances width
	//10 instances height
	//1 instance depth

	//4 bytes width
	//4 bytes height
	//4 bytes depth

	//4 or 8 multiplier
	int oriscreenx = instancesw * 8; //80 when using 20 width instances in SC_GlobalsChunkKeyboard //// 192 <=> 768 
 	int oriscreeny = instancesh * 8; //40 when using 10 height instances in SC_GlobalsChunkKeyboard //// 108 <=> 432
	//*2 when more screens in scgraphicssec.cs

	float somemul = 1/oriscreenx; //80 when using 20 width instances in SC_GlobalsChunkKeyboard //// 192 <=> 768

	float4 textureColor;

	float2 test = input.tex;

	input.xindex = (instancesw) - 1 - input.xindex;

	//xindex == index of uv texture from left to right or right to left.
	//yindex == index of uv texture from top to bottom or bottom to top
	
	
	float2 inputtexture = input.tex;
	float xdivisionnormalizedtoproportionsofonemax = 1/oriscreenx; //80 when using 20 width instances in SC_GlobalsChunkKeyboard //// 192 <=> 768


	
	if(tinyChunkWidth == 8)
	{
		if(sccsvvdhdgrayscaleorcolored == 0)
		{
			if(facetype == 0) // 0 == front face?
			{
				inputtexture = (inputtexture/ float2(oriscreenx,oriscreeny));
				float2 inputtextureY = input.tex;
				inputtexture.x = (inputtexture.x + (xdivisionnormalizedtoproportionsofonemax * (input.xindex)));
				inputtexture.x = ((inputtexture.x) + (((1.0f/float(oriscreenx)) * 1) * ((input.xindex * tinyChunkWidth) + (x))));
				inputtexture.y = ((inputtexture.y) + (((1.0f/float(oriscreeny)) * 1) * ((input.yindex * tinyChunkHeight) + (tinyChunkHeight-1- y))));
				//inputtexture.x *=-1;
				input.tex = inputtexture;

				textureColor = shaderTexture.Sample(SampleType, input.tex);
			}
			else
			{
				if(facetype == 1) //top face
				{
					//textureColor = thenormalscolor;

					//DRAW TEXTURES ON SIDES
					/*inputtexture = (inputtexture/ float2(oriscreenx,oriscreeny));
					float2 inputtextureY = input.tex;
					inputtexture.x = (inputtexture.x + (xdivisionnormalizedtoproportionsofonemax * (input.xindex)));
					inputtexture.x = ((inputtexture.x) + (((1.0f/float(oriscreenx)) * 1) * ((input.xindex * tinyChunkWidth) + (z))));
					inputtexture.y = ((inputtexture.y) + (((1.0f/float(oriscreeny)) * 1) * ((input.yindex * tinyChunkHeight) + (tinyChunkHeight-1- y))));
					//inputtexture.x *=-1;
					//inputtexture.y *=-1;
					input.tex = inputtexture;
					textureColor = shaderTexture.Sample(SampleType, input.tex);*/
					//DRAW TEXTURES ON SIDES

					/*inputtexture = input.tex;
					//inputtexture.x = (inputtexture.x + (xdivisionnormalizedtoproportionsofonemax * (input.xindex)));
					inputtexture.x = ((inputtexture.x) + (((1.0f/float(oriscreenx)) * 1) * ((input.xindex * tinyChunkWidth) + (x))));
					inputtexture.y = ((inputtexture.y) + (((1.0f/float(oriscreeny)) * 1) * ((input.yindex * tinyChunkHeight) + (tinyChunkHeight - 1 - y))));
					inputtexture.y *=-1;
					textureColor = shaderTexture.Sample(SampleType, inputtexture);*/


					inputtexture = (inputtexture/ float2(oriscreenx,oriscreeny));
					float2 inputtextureY = input.tex;
					inputtexture.x = (inputtexture.x + (xdivisionnormalizedtoproportionsofonemax * (input.xindex)));
					inputtexture.x = ((inputtexture.x) + (((1.0f/float(oriscreenx)) * 1) * ((input.xindex * tinyChunkWidth) + (x))));
					inputtexture.y = ((inputtexture.y) + (((1.0f/float(oriscreeny)) * 1) * ((input.yindex * tinyChunkHeight) + (tinyChunkHeight - 1 - y))));
					//inputtexture.x *=-1;
					//inputtexture.y *=-1;
					input.tex = inputtexture;

					textureColor = shaderTexture.Sample(SampleType, input.tex);



				}
				else if(facetype == 2) //left FACE
				{
					
					inputtexture = (inputtexture/ float2(oriscreenx,oriscreeny));	
					
					float flipuvx = inputtexture.x;
					float flipuvy = inputtexture.y;

					inputtexture.x = flipuvy;
					inputtexture.y = flipuvx;

					inputtexture.x *=-1;


					//inputtexture = (inputtexture/ float2(oriscreenx,oriscreeny));
					float2 inputtextureY = input.tex;
					inputtexture.x = (inputtexture.x + (xdivisionnormalizedtoproportionsofonemax * (input.xindex)));
					inputtexture.x = ((inputtexture.x) + (((1.0f/float(oriscreenx)) * 1) * ((input.xindex * tinyChunkWidth) + (x))));
					inputtexture.y = ((inputtexture.y) + (((1.0f/float(oriscreeny)) * 1) * ((input.yindex * tinyChunkHeight) + (y)))); //tinyChunkHeight - 1 - 
					
					//inputtexture.x *=-1;
					//inputtexture.y *=-1;
					input.tex = inputtexture;

					textureColor = shaderTexture.Sample(SampleType, input.tex);
				}
				else if(facetype == 3) //right FACE
				{
					inputtexture = (inputtexture/ float2(oriscreenx,oriscreeny));
					
					float flipuvx = inputtexture.x;
					float flipuvy = inputtexture.y;

					//inputtexture.x = flipuvy;
					//inputtexture.y = flipuvx;

					inputtexture.y *=-1;


					//inputtexture = (inputtexture/ float2(oriscreenx,oriscreeny));
					float2 inputtextureY = input.tex;
					inputtexture.x = (inputtexture.x + (xdivisionnormalizedtoproportionsofonemax * (input.xindex)));
					inputtexture.x = ((inputtexture.x) + (((1.0f/float(oriscreenx)) * 1) * ((input.xindex * tinyChunkWidth) + (x))));
					inputtexture.y = ((inputtexture.y) + (((1.0f/float(oriscreeny)) * 1) * ((input.yindex * tinyChunkHeight) + (y)))); //tinyChunkHeight - 1 - 
					
					//inputtexture.x *=-1;
					//inputtexture.y *=-1;



					input.tex = inputtexture;

					textureColor = shaderTexture.Sample(SampleType, input.tex);
				}
				else if(facetype == 4) //back FACE
				{
					
				}
				else if(facetype == 5) //bottom FACE
				{
					inputtexture = (inputtexture/ float2(oriscreenx,oriscreeny));
					
					float flipuvx = inputtexture.x;
					float flipuvy = inputtexture.y;

					inputtexture.x = flipuvy;
					inputtexture.y = flipuvx;

					inputtexture.x *=-1;
					inputtexture.y *=-1;


					//inputtexture = (inputtexture/ float2(oriscreenx,oriscreeny));
					float2 inputtextureY = input.tex;
					inputtexture.x = (inputtexture.x + (xdivisionnormalizedtoproportionsofonemax * (input.xindex)));
					inputtexture.x = ((inputtexture.x) + (((1.0f/float(oriscreenx)) * 1) * ((input.xindex * tinyChunkWidth) + (x))));
					inputtexture.y = ((inputtexture.y) + (((1.0f/float(oriscreeny)) * 1) * ((input.yindex * tinyChunkHeight) + (y)))); //tinyChunkHeight - 1 - 
					
					//inputtexture.x *=-1;
					//inputtexture.y *=-1;


					input.tex = inputtexture;

					textureColor = shaderTexture.Sample(SampleType, input.tex);
				}
			}
		}
		else if(sccsvvdhdgrayscaleorcolored == 1)
		{
			if(facetype == 0) // 0 == front face?
			{
				inputtexture = (inputtexture/ float2(oriscreenx,oriscreeny));
				float2 inputtextureY = input.tex;
				inputtexture.x = (inputtexture.x + (xdivisionnormalizedtoproportionsofonemax * (input.xindex)));
				inputtexture.x = ((inputtexture.x) + (((1.0f/float(oriscreenx)) * 1) * ((input.xindex * tinyChunkWidth) + (x))));
				inputtexture.y = ((inputtexture.y) + (((1.0f/float(oriscreeny)) * 1) * ((input.yindex * tinyChunkHeight) + (tinyChunkHeight-1- y))));
				//inputtexture.x *=-1;
				input.tex = inputtexture;

				textureColor = shaderTexture.Sample(SampleType, input.tex);
			}
			else
			{
				//textureColor = float4(0,0.95f,0,1.0f);
				textureColor = thenormalscolor;
			}
		}
		else if(sccsvvdhdgrayscaleorcolored == 2)
		{
			textureColor = thenormalscolor;
		}
	}

	//CHECKING IF TEXTURE HAS BEEN INITIALIZED. IF ITS A BLACK TEXTURE 0X0Y0Z0W THEN ITS A NON-INITIALIZED TEXTURE SO LETS USE THE NORMALS COLOR INSTEAD
	/*if(round(textureColor.x) == 0.0f && round(textureColor.y) == 0.0f && round(textureColor.z) == 0.0f)
	{
		textureColor = thenormalscolor;

	}*/
	//CHECKING IF TEXTURE HAS BEEN INITIALIZED. IF ITS A BLACK TEXTURE 0X0Y0Z0W THEN ITS A NON-INITIALIZED TEXTURE SO LETS USE THE NORMALS COLOR INSTEAD



	//SCREENCAPTURE 2DTEXTURE TO UV ON VOXEL INSTANCES DIVISIONS
	//SCREENCAPTURE 2DTEXTURE TO UV ON VOXEL INSTANCES DIVISIONS
	//SCREENCAPTURE 2DTEXTURE TO UV ON VOXEL INSTANCES DIVISIONS

	


	//return textureColor;


	//DISTANCE INSTANCE OF VOXEL TO LIGHT POSITION TESTS
	//DISTANCE INSTANCE OF VOXEL TO LIGHT POSITION TESTS
	float3 altlightposition = lightPosition;
	float3 altlightdirection = lightDirection;
	//float3 inputPos = float3(0,0,0);//input.instancePosition.xyz;
	//inputPos.x = (input.position.x) + input.instancePosition.x;// + thenormalscolor.x;
	//inputPos.y = (input.position.y) + input.instancePosition.y;// + thenormalscolor.y;
	//inputPos.z = (input.position.z) + input.instancePosition.z;// + thenormalscolor.z;
	//inputPos = input.instancePosition.xyz;

	/*inputPos.x = inputPos.x + (input.color.x * 0.005f);
	inputPos.y = inputPos.y + (input.color.y * 0.005f);
	inputPos.z = inputPos.z + (input.color.z * 0.005f);*/

	inputPos = input.instancePosition.xyz;
	inputPos.x += (input.color.x * 0.0001f * PI); // * theperlinvalue
	inputPos.y += (input.color.y * 0.0001f * PI); // * theperlinvalue
	///inputPos.z += (input.color.z * 0.0001f * PI * theperlinvalue);
	

	//float thedisttotalt = sqrt(((altlightposition.x - inputPos.x)*(altlightposition.x - inputPos.x)) + (((altlightposition.y - inputPos.y)*(altlightposition.y - inputPos.y))) + ((altlightposition.z - inputPos.z)*(altlightposition.z - inputPos.z)));	
	
	
	distTot = sc_check_distance_node_3d_geometry(altlightposition, inputPos,0.1f,0.1f,0.1f,0.14f,0.14f,0.14f);
	//distTot = sc_check_distance_node_3d_geometry(altlightposition, inputPos,10.0f,10.0f,10.0f,14.0f,14.0f,14.0f);
	//distTot = sc_check_distance_node_3d_geometry(altlightposition, inputPos,1.0f,1.0f,1.0f,1.4f,1.4f,1.4f);
	//distTot = sqrt(((altlightposition.x - inputPos.x)*(altlightposition.x - inputPos.x)) + (((altlightposition.y - inputPos.y)*(altlightposition.y - inputPos.y)) + offsetposy) + ((altlightposition.z - inputPos.z)*(altlightposition.z - inputPos.z)));
	
	float4 addedcolorforlightreflectiononobjectsurface = thenormalscolor;
	//float4 addedcolorforlightreflectiononobjectsurface1 = thenormalscolor;

	//lightDir = -input.instanceRadRotFORWARD.xyz;
	dirLightToFace = lightPosition - inputPos;
	dirLightToFace /= distTot;




	//float4 basediffuse = float4(0.75f,0.75f,0.75f,1);
	float4 basediffuse = float4(1,1,1,1);
	//float4 basediffuse = thenormalscolor; //float4(0.15f,0.15f,0.15f,1);
	//float4 basediffuse = float4(0.15f,0.15f,0.15f,1);

	float DOTProdAngleWithHypAndOpp = saturate(dot(input.normal, float4(dirLightToFace,1.0f)));

	someOtherDot = dot(dirLightToFace, -lightDirection); //lightDir

	//float4 curcolor= float4(cursorcolor.x,cursorcolor.y,cursorcolor.z,1)
	//1.0f - distTot;
	//float currentdistanceinverted = 10.0f - distTot;

	addedcolorforlightreflectiononobjectsurface *= (cursorcolor * basediffuse * someOtherDot * (0.1f * lightextras.y)); //* someOtherDot * DOTProdAngleWithHypAndOpp) * 10.0f;
	addedcolorforlightreflectiononobjectsurface = saturate(addedcolorforlightreflectiononobjectsurface);


	//addedcolorforlightreflectiononobjectsurface1 *= (cursorcolor * basediffuse * someOtherDot * (0.1f * lightextras.y)); //* someOtherDot * DOTProdAngleWithHypAndOpp) * 10.0f;
	//addedcolorforlightreflectiononobjectsurface1 = saturate(addedcolorforlightreflectiononobjectsurface);











	if(sccsvvdhdgrayscaleorcolored == 2)
	{
		textureColor = thenormalscolor + addedcolorforlightreflectiononobjectsurface;
	}
	else
	{


		/*if(addedcolorforlightreflectiononobjectsurface.y == 0 && addedcolorforlightreflectiononobjectsurface.z == 0)
		{
			if(textureColor.x >= )
			{

			}
		}*/

		//if(textureColor.x >= 0.95f && textureColor.y >= 0.95f && textureColor.z >= 0.95f)
		//{
		//	textureColor *= 0.5f;
		//}
		


		//textureColor = (textureColor * 0.95f) + (addedcolorforlightreflectiononobjectsurface * 2.0f);

		if(distTot <= 0.005f * lightextras.x) 
		{
		}

		float4 anothertex = textureColor;

		anothertex = (anothertex * 0.95f) * (addedcolorforlightreflectiononobjectsurface * 1.0f);
		anothertex = saturate(anothertex);
		//textureColor = textureColor * addedcolorforlightreflectiononobjectsurface;

		textureColor = textureColor * anothertex;
		textureColor = saturate(textureColor);
	}
	


	return textureColor;
}
