Texture2D shaderTexture;
SamplerState SampleType;

SamplerState textureSampler
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};

/*cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float specularPower;
	float4 specularColor;
};*/

cbuffer LightBuffer :register(b1)
{
	float4 ambientColor;
	float4 diffuseColor;
	float4 specularColor;
	float4 lightDirection;
	float4 lightPosition;
	float4 lightextras;

	//float padding0;
	//float3 lightPosition;
	//float lightextras.y;
};

cbuffer OVRDir :register(b2)
{
	float4 ovrdirf;
	float4 ovrdiru;
	float4 ovrdirr;
	float4 ovrpos;
};

//////////////////////
////   TYPES
//////////////////////
struct PixelInputType
{
	float4 position : SV_POSITION;
	float4 color : COLOR0; //byte map index xyz and w for typeofface 0 to 5
	float3 normal : NORMAL0;
	float paddingvert0 : PSIZE0;	//instance width
	float2 tex : TEXCOORD0;
	float paddingvert1 : PSIZE1;	//instance height
	float paddingvert2 : PSIZE2;	//instance depth
	float4 instancePosition : POSITION1;
	float4 instanceRadRotFORWARD : POSITION2;
	float4 instanceRadRotRIGHT : POSITION3;
	float4 instanceRadRotUP : POSITION4;
	float4 mapmatrix0 : POSITION5;
	float4 mapmatrix1 : POSITION6;
	float4 mapmatrix2 : POSITION7;
	float4 mapmatrix3 : POSITION8;
	float4 mapmatrix4 : POSITION9;
	float4 mapmatrix5 : POSITION10;
	float4 mapmatrix6 : POSITION11;
	float4 mapmatrix7 : POSITION12;
	float4 mapmatrix8 : POSITION13;
	float4 mapmatrix9 : POSITION14;
	float4 mapmatrix10 : POSITION15;
	float4 mapmatrix11 : POSITION16;
	float4 mapmatrix12 : POSITION17;
	float4 mapmatrix13 : POSITION18;
	float4 mapmatrix14 : POSITION19;
	float4 mapmatrix15 : POSITION20;

	/*float4 heightmapmat0 : POSITION21;
	float4 heightmapmat1 : POSITION22;
	float4 heightmapmat2 : POSITION23;
	float4 heightmapmat3 : POSITION24;*/

	/*int one : PSIZE3;	
	int oneTwo : PSIZE4;
	int two : PSIZE5;	
	int twoTwo : PSIZE6;	
	int three : PSIZE7;	
	int threeTwo : PSIZE8;	
	int four : PSIZE9;	
	int fourTwo : PSIZE10;*/
	int xindex : PSIZE3;	
	int yindex : PSIZE4;
};

//float _lastDOTProdAngleWithHypAndOpp = -1;
static const float PI = 3.1415926535897932384626433832795f;
static const float3 world_forward = float3(0,0,1);
static const float3 world_backward = float3(0,0,-1);
static const float3 world_right = float3(1,0,0);
static const float3 world_left = float3(-1,0,0);
static const float3 world_up = float3(0,1,0);
static const float3 world_down = float3(0,-1,0);


static float dstX= 0;
static float dstY= 0;
static float dstZ = 0;
static float dstX_vs_dstZ = 0;
static float dstX_vs_dstY = 0;
static float dstY_vs_dstZ = 0;

float sc_check_distance_node_3d_geometry(float3 nodeA, float3 nodeB, float minx, float miny, float minz, float maxx, float maxy, float maxz) 
{
	//STEVE CHASSÉ 3D blueprint for sphere type and a ton more. based on 2d version of Sebastian Lague. but my version is not perfect. i don't know yet what else to put in there.
	//the solution was easier than i thought and it came to me quite fast after fearing for months i'd never be able to quickly get this function written. This function is also a
	//main part of the upgrade that i want to implement to the Jitter physics engine for spatial awareness. In the jitter physics engine, it seems as if every frame that the objects
	//are enabled and non-static, jitter checks ALL bounding boxes for collisions between all of them. So of course at some point, the more objects in the scene, the more bounding
	//boxes it has to check for each individual objects. for instance, lets say there is 1000 objects in the scene, so index 0 to index 999, if object 0 checks against ALL other
	//998 objects, it's a huge waste of performance. But there are collision "islands" in the jitter physics engine but those i believe are chosen only when bounding boxes are 
	//officially declared as colliding. so i want to see if i can use a fast distance checker (which i didnt test yet against Math.Sqrt or the very fast quake sqrt). But all of
	//the things i learned in doing chunks are also going to be needed for when im going to start dicking around again in the Jitter Physics Engine. So prior upgrading the physics
	//engine jitter, i can only have 4000 max objects and it would lag the scene. but the tests are not carved on rock yet because, 1. im not loading the dll how i should maybe
	//be doing so because multiple instances of the physics engine doesn


	dstX = abs((nodeA.x) - (nodeB.x));
	dstY = abs((nodeA.y) - (nodeB.y));
	dstZ = abs((nodeA.z) - (nodeB.z));

	dstX_vs_dstZ = 0;
	dstX_vs_dstY = 0;
	dstY_vs_dstZ = 0;

	if (dstX > dstZ)
	{
		dstX_vs_dstZ = maxx * dstZ + minx * (dstX - dstZ);
	}
	else
	{
		dstX_vs_dstZ = maxx * dstX + minx * (dstZ - dstX);
	}

	if (dstX > dstY)
	{
		dstX_vs_dstY = maxy * dstY + miny * (dstX - dstY);
	}
	else
	{
		dstX_vs_dstY = maxy * dstX + miny * (dstY - dstX);
	}

	if (dstY > dstZ)
	{
		dstY_vs_dstZ = maxz * dstZ + minz * (dstY - dstZ);
	}
	else
	{
		dstY_vs_dstZ = maxz * dstY + minz * (dstZ - dstY);
	}
	return dstX_vs_dstY + dstX_vs_dstZ + dstY_vs_dstZ;
}

static float4 the_color = float4(0.65,0.65,0.65,1);
static float4 textureColor = float4(0.65,0.65,0.65,1);




float4 TexturePixelShader(PixelInputType input) : SV_TARGET
{
	if(input.color.x == 0.0 && input.color.y == 0.0  && input.color.z == 0.0  && input.color.w == 0.0)
	{
		//input.color = the_color;

		float x = dot(input.normal, float3(1, 0.25, 0.4));	
		x = x * 0.5 - 0.5;
		//input.color = input.color;
		float3 color = lerp(float3(input.color.x*0.75, input.color.y*0.75, input.color.z*0.75), float3(input.color.x*0.85, input.color.y*0.85, input.color.z*0.85), x);
		input.color.xyz = color;
		input.color.w = 1.0;
		//input.Pos = input[i].Pos;
		//input.tex = input[i].tex;
	

		//float4 textureColor;
		// Sample the pixel color from the texture using the sampler at this texture coordinate location.
		textureColor = shaderTexture.Sample(SampleType, input.tex);
		return textureColor;
	}
	else
	{	
		//input.color = the_color;
		//input.color = float4(0.15f,0.35f,0.95f,1); light blue turquoise
		//input.color = float4(0.55,0.25,0.25,1); //red blood
		//input.color = float4(0.15,0.15,0.15,1); //grey

		/*float x = dot(input.normal, float3(1, 0.25, 0.4));	
		x = x * 0.5 - 0.5;
		//input.color = input.color;
		float3 color = lerp(float3(the_color.x*0.75, the_color.y*0.75, the_color.z*0.75), float3(the_color.x*0.85, the_color.y*0.85, the_color.z*0.85), x);
		the_color.xyz = color;
		the_color.w = 1.0;
		//input.Pos = input[i].Pos;
		//input.tex = input[i].tex;
	
		//input.color = float4(0.15f,0.15f,0.75f,1);

		float3 lightDir;
		float lightIntensity;
		float4 colorer;

		colorer = ambientColor;

		lightDir = -lightDirection;

		float3 inputPos = input.instancePosition.xyz;
		float distTot = sqrt(((lightPosition.x - inputPos.x)*(lightPosition.x - inputPos.x)) + ((lightPosition.y - inputPos.y)*(lightPosition.y - inputPos.y)) + ((lightPosition.z - inputPos.z)*(lightPosition.z - inputPos.z)));
		//float distTot = sc_check_distance_node_3d_geometry(lightPosition, inputPos, 2, 2, 2, 2, 2, 2);

		float3 dirLightToFace = lightPosition - inputPos;
		dirLightToFace /= distTot;

		float someOtherDot = dot(dirLightToFace, lightDir);

		//float DOTProdAngleWithHypAndOpp = saturate(dot(input.normal, lightDir));

		float DOTProdAngleWithHypAndOpp = saturate(dot(input.normal, dirLightToFace));

		someOtherDot =  (DOTProdAngleWithHypAndOpp + someOtherDot) * 0.5f;

		
		
		float someTester = lightextras.y - distTot;
		float distMod = someTester;
		distMod *= 0.1f;	
		float4 modColor = colorer;

		modColor += (diffuseColor * (someOtherDot)) * distMod;
		modColor = saturate(modColor);

		textureColor = the_color * modColor * 0.5f;
		*/
		
		
		
		
		/*if(distTot < lightextras.y)
		{	
			if (someOtherDot >= 0.5f)
			{			
				float someTester = lightextras.y - distTot;
				float distMod = someTester;
				distMod *= 0.01f;	
				float4 modColor = colorer;

				if(distTot < padding0)
				{				
					float someTester = lightextras.y - distTot;
					float distMod = someTester;
					distMod *= 0.01f;	
					float4 modColor = colorer;

					modColor += (diffuseColor * (someOtherDot)) * distMod;
					modColor = saturate(modColor);
					the_color = the_color * modColor*0.95f;
				}	
				else
				{
					float someTester = lightextras.y - (distTot);
					float distMod = someTester;
					distMod *= 0.01f;	
					float4 modColor = colorer;

					modColor += (diffuseColor * (someOtherDot)) * distMod;
					modColor = saturate(modColor);
					the_color = the_color * modColor*0.95f;
				}			
			}
			else
			{
				if(distTot < padding0)
				{
					float someTester = lightextras.y - distTot;
					float distMod = someTester;
					distMod *= 0.01f;	
					float4 modColor = colorer;

					modColor += (diffuseColor * (someOtherDot)) * distMod;
					modColor = saturate(modColor);

					the_color = the_color * modColor*0.95f;
				}	
				else
				{
					float someTester = lightextras.y - (distTot);
					float distMod = someTester;
					distMod *= 0.01f;	
					float4 modColor = colorer;

					modColor += (diffuseColor * (someOtherDot)) * distMod;
					modColor = saturate(modColor);

					the_color = the_color * modColor*0.95f;
				}
			}
		}*/
		
		






		
	float4 somecolor = float4(0.65f,0.65f,0.65f,1.0f);

	//NORMALS CALCULATIONS
	//NORMALS CALCULATIONS
	//NORMALS CALCULATIONS
	float4 somemoddedinputcolor = the_color;// input.color;
	// WARNING==INPUT.COLOR IS NOT THE COLOR WHEN COMING IN, IT IS THE INDEX POSITION OF EACH BYTES X/Y/Z. BUT IN ORDER TO DISPLAY A COLOR, YOU NEED TO HAVE THIS PIXEL SHADER INPUT.COLOR 
	// SET TO THE DESIRED COLOR WHEN THIS HLSL METHOD FINISHES OTHERWISE YOU WILL GET A MULTICOLOR CHUNK BECAUSE THE INDEXES GO STRAIGHT FROM 0 TO THE WIDTH OF THE CHUNK FROM 0 TO 3 IN THE 
	// X/Y/Z AXIS AND THAT IS THE COLORS.

	float3 inputPos;// = float3();

	inputPos.x = input.position.x + input.instancePosition.x;// + somemoddedinputcolor.x;
	inputPos.y = input.position.y + input.instancePosition.y;// + somemoddedinputcolor.y;
	inputPos.z = input.position.z + input.instancePosition.z;// + somemoddedinputcolor.z;

	float3 lightDir;
	float lightIntensity;
	float4 colorer;

	colorer = ambientColor;

	lightDir = -lightDirection;

	//float distTot = sc_check_distance_node_3d_geometry(lightPosition, inputPos, 9, 9, 9, 9, 9, 9);
	//float distTot = sc_check_distance_node_3d_geometry(lightPosition, inputPos, 3, 3, 3, 3, 3, 3);


	float distTot = sqrt(((lightPosition.x - inputPos.x)*(lightPosition.x - inputPos.x)) + ((lightPosition.y - inputPos.y)*(lightPosition.y - inputPos.y)) + ((lightPosition.z - inputPos.z)*(lightPosition.z - inputPos.z)));

	float3 dirLightToFace = lightPosition - inputPos;
	dirLightToFace /= distTot;

	float someOtherDot = dot(dirLightToFace, lightDir);

	if(someOtherDot >= 0)
	{
		float DOTProdAngleWithHypAndOpp = saturate(dot(input.normal, dirLightToFace));

		//someOtherDot =  (DOTProdAngleWithHypAndOpp + someOtherDot) * 0.5f;

		float someTester = lightextras.y - distTot;
		float distMod = someTester;
		distMod *= 0.1f;	 //0.01f // 0.1f // 0.5f
		float4 modColor = colorer;

		modColor += (diffuseColor * (DOTProdAngleWithHypAndOpp)) * distMod;
		modColor = saturate(modColor);

		//DOTProdAngleWithHypAndOpp = saturate(dot(input.normal, dirLightToFace));

		somemoddedinputcolor = somecolor + DOTProdAngleWithHypAndOpp * modColor;// * modColor * 0.75f;

		if(input.normal.x == 1.0)
		{
			somemoddedinputcolor *= 0.555f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.x == -1.0)
		{
			somemoddedinputcolor *=  0.145f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.y == 1.0)
		{
			somemoddedinputcolor*=  0.475f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.y == -1.0)
		{
			somemoddedinputcolor*=  0.135f;//float4(0.15,0.95,0.15,1);
		}
		if(input.normal.z == 1.0)
		{
			somemoddedinputcolor *=  0.765f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.z == -1.0)
		{
			somemoddedinputcolor *=  0.35f;//float4(0.15,0.95,0.15,1);
		}
	
		float somedot = dot(input.normal, dirLightToFace);

		if(somedot <= 0)
		{	
			// Invert the light direction for calculations.
			lightDir = - lightDirection;

			// Calculate the amount of the light on this pixel.
			lightIntensity = saturate(dot(input.normal, dirLightToFace));

			somemoddedinputcolor *=  1 + (saturate(lightIntensity * somedot * distTot*0.35f));
		}
	}
	else
	{
		float DOTProdAngleWithHypAndOpp = saturate(dot(input.normal, dirLightToFace));

		//someOtherDot =  (DOTProdAngleWithHypAndOpp + someOtherDot) * 0.5f;

		float someTester = lightextras.y - distTot;
		float distMod = someTester;
		distMod *= 0.1f;	 //0.01f
		float4 modColor = colorer;

		modColor += (diffuseColor * (DOTProdAngleWithHypAndOpp)) * distMod;
		modColor = saturate(modColor);


		//DOTProdAngleWithHypAndOpp = saturate(dot(input.normal, dirLightToFace));


		somemoddedinputcolor = somecolor + DOTProdAngleWithHypAndOpp * modColor;// * modColor * 0.75f;


		if(input.normal.x == 1.0)
		{
			somemoddedinputcolor *= 0.555f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.x == -1.0)
		{
			somemoddedinputcolor *=  0.145f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.y == 1.0)
		{
			somemoddedinputcolor*=  0.475f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.y == -1.0)
		{
			somemoddedinputcolor*=  0.135f;//float4(0.15,0.95,0.15,1);
		}
		if(input.normal.z == 1.0)
		{
			somemoddedinputcolor *=  0.765f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.z == -1.0)
		{
			somemoddedinputcolor *=  0.35f;//float4(0.15,0.95,0.15,1);
		}
	}
	//NORMALS CALCULATIONS
	//NORMALS CALCULATIONS
	//NORMALS CALCULATIONS











		float3 reflection;
		float4 specular;
		float4 color ;

		// Set the default output color to the ambient light for all pixels.
		color = ambientColor;

		// Initialize the specular color.
		specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

		// Invert the light direction for calculations.
		lightDir = - lightDirection;

		// Calculate the amount of the light on this pixel.
		lightIntensity = saturate(dot(somemoddedinputcolor, lightDir));

		if(lightIntensity > 0.0f)
		{
			// Determine the final diffuse color based on the diffuse color and the amount of the light intensity.
			color += (diffuseColor * lightIntensity);
		
			// Saturate the ambient and diffuse color.
			color = saturate(color);

			// Calculate the reflection vector based on the light intensity, normal vector, and light direction.
			reflection = normalize(2 * lightIntensity * somemoddedinputcolor - lightDir);

			// Determine the amount of the specular light based on the reflection vector, viewing direction, and specular power.
			specular = pow(saturate(dot(reflection, ovrdirf)), lightextras.x); //input..viewDirection
		}

		// Multiply the texture pixel and the final diffuse color to get the final pixel color result.
		//color = color ; //textureColor

		// Add the specular component last to output color.
		textureColor = saturate(color + specular);





		return textureColor;
	}
}










