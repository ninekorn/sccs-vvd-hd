
/////////////////////
////   GLOBALS
//////////////////////
Texture2D shaderTexture;
SamplerState SampleType;
/*
SamplerState textureSampler
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
*/

/*cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float padding;
};*/

cbuffer LightBuffer //:register(b1)
{
	float4 ambientColor;
	float4 diffuseColor;
	float4 specularColor;
	float4 lightDirection;
	float4 lightPosition;
	float4 lightextras;
};




//////////////////////
////   TYPES
//////////////////////
struct PixelInputType
{
	float4 position : SV_POSITION;
	float4 color : COLOR;
	float3 normal : NORMAL;
	float2 tex : TEXCOORD0;
	float3 instancePosition : POSITION1;
};

//float _lastDOTProdAngleWithHypAndOpp = -1;
static const float PI = 3.1415926535897932384626433832795f;
static const float3 world_forward = float3(0,0,1);
static const float3 world_backward = float3(0,0,-1);
static const float3 world_right = float3(1,0,0);
static const float3 world_left = float3(-1,0,0);
static const float3 world_up = float3(0,1,0);
static const float3 world_down = float3(0,-1,0);


static float dstX= 0;
static float dstY= 0;
static float dstZ = 0;
static float dstX_vs_dstZ = 0;
static float dstX_vs_dstY = 0;
static float dstY_vs_dstZ = 0;

float sc_check_distance_node_3d_geometry(float3 nodeA, float3 nodeB, float minx, float miny, float minz, float maxx, float maxy, float maxz) 
{
	//STEVE CHASSÉ 3D blueprint for sphere type and a ton more. based on 2d version of Sebastian Lague. but my version is not perfect. i don't know yet what else to put in there.
	//the solution was easier than i thought and it came to me quite fast after fearing for months i'd never be able to quickly get this function written. This function is also a
	//main part of the upgrade that i want to implement to the Jitter physics engine for spatial awareness. In the jitter physics engine, it seems as if every frame that the objects
	//are enabled and non-static, jitter checks ALL bounding boxes for collisions between all of them. So of course at some point, the more objects in the scene, the more bounding
	//boxes it has to check for each individual objects. for instance, lets say there is 1000 objects in the scene, so index 0 to index 999, if object 0 checks against ALL other
	//998 objects, it's a huge waste of performance. But there are collision "islands" in the jitter physics engine but those i believe are chosen only when bounding boxes are 
	//officially declared as colliding. so i want to see if i can use a fast distance checker (which i didnt test yet against Math.Sqrt or the very fast quake sqrt). But all of
	//the things i learned in doing chunks are also going to be needed for when im going to start developing things around and inside of the Jitter Physics Engine. So prior upgrading the physics
	//engine jitter for my engine sccoresystems, i can only have 4000 max objects and it would lag the scene. but the tests are not carved on rock yet because, 
	//1. im not loading the dll how i should maybe
	//2. maybe because multiple instances of the physics engine like i am loading them isn't the proper way to do it? in monogame, to load different scene instances, they use 
	//   Activator.CreateInstance and i was unable to use that anywhere back then. I might try again at some point... But right now i am using an interface. In sccsv10
	//


	dstX = abs((nodeA.x) - (nodeB.x));
	dstY = abs((nodeA.y) - (nodeB.y));
	dstZ = abs((nodeA.z) - (nodeB.z));

	dstX_vs_dstZ = 0;
	dstX_vs_dstY = 0;
	dstY_vs_dstZ = 0;

	if (dstX > dstZ)
	{
		dstX_vs_dstZ = maxx * dstZ + minx * (dstX - dstZ);
	}
	else
	{
		dstX_vs_dstZ = maxx * dstX + minx * (dstZ - dstX);
	}

	if (dstX > dstY)
	{
		dstX_vs_dstY = maxy * dstY + miny * (dstX - dstY);
	}
	else
	{
		dstX_vs_dstY = maxy * dstX + miny * (dstY - dstX);
	}

	if (dstY > dstZ)
	{
		dstY_vs_dstZ = maxz * dstZ + minz * (dstY - dstZ);
	}
	else
	{
		dstY_vs_dstZ = maxz * dstY + minz * (dstZ - dstY);
	}
	return dstX_vs_dstY + dstX_vs_dstZ + dstY_vs_dstZ;
}

static float4 the_color = float4(0.25f,0.25f,0.25f,1.0f);// float4(0.95f,0.95f,0.95f,1);
static float4 textureColor;

//////////////////////
////   Pixel Shader
/////////////////////
float4 TexturePixelShader(PixelInputType input) : SV_TARGET
{
	

	//float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;
	float3 reflection;
	float4 specular;

	// Sample the pixel color from the texture using the sampler at this texture coordinate location.
	textureColor = shaderTexture.Sample(SampleType, input.tex);

	float4 somecolor =float4(0.25f,0.25f,0.25f,1.0f);// float4(0.95f,0.95f,0.95f,1.0f);
	
	//NORMALS CALCULATIONS
	//NORMALS CALCULATIONS
	//NORMALS CALCULATIONS
	float4 somemoddedinputcolor = the_color;// input.color;
	// WARNING==INPUT.COLOR IS NOT THE COLOR WHEN COMING IN, IT IS THE INDEX POSITION OF EACH BYTES X/Y/Z. BUT IN ORDER TO DISPLAY A COLOR, YOU NEED TO HAVE THIS PIXEL SHADER INPUT.COLOR 
	// SET TO THE DESIRED COLOR WHEN THIS HLSL METHOD FINISHES OTHERWISE YOU WILL GET A MULTICOLOR CHUNK BECAUSE THE INDEXES GO STRAIGHT FROM 0 TO THE WIDTH OF THE CHUNK FROM 0 TO 3 IN THE 
	// X/Y/Z AXIS AND THAT IS THE COLORS.

	float3 inputPos;// = float3();

	inputPos.x = input.position.x + input.instancePosition.x;// + somemoddedinputcolor.x;
	inputPos.y = input.position.y + input.instancePosition.y;// + somemoddedinputcolor.y;
	inputPos.z = input.position.z + input.instancePosition.z;// + somemoddedinputcolor.z;

	//float3 lightDir;
	//float lightIntensity;
	float4 colorer;

	colorer = ambientColor;

	lightDir = -lightDirection;

	//float distTot = sc_check_distance_node_3d_geometry(lightPosition, inputPos, 0.1f, 0.1f, 0.1f, 1, 1, 1);
	float distTot = sc_check_distance_node_3d_geometry(lightPosition, inputPos, 9, 9, 9, 9, 9, 9);
	//float distTot = sc_check_distance_node_3d_geometry(lightPosition, inputPos, 3, 3, 3, 3, 3, 3);
	//float distTot = sc_check_distance_node_3d_geometry(lightPosition, inputPos, 1, 1, 1, 1, 1, 1);

	//float distTot = sqrt(((lightPosition.x - inputPos.x)*(lightPosition.x - inputPos.x)) + ((lightPosition.y - inputPos.y)*(lightPosition.y - inputPos.y)) + ((lightPosition.z - inputPos.z)*(lightPosition.z - inputPos.z)));

	float3 dirLightToFace = lightPosition - inputPos;
	dirLightToFace /= distTot;

	float someOtherDot = dot(dirLightToFace, lightDir);

	/*if(someOtherDot >= 0)
	{
		float DOTProdAngleWithHypAndOpp = saturate(dot(input.normal, dirLightToFace));

		//someOtherDot =  (DOTProdAngleWithHypAndOpp + someOtherDot) * 0.5f;

		float someTester = lightextras.y - distTot;
		float distMod = someTester;
		distMod *= 0.1f;	 //0.01f // 0.1f // 0.5f
		float4 modColor = colorer;

		modColor += (diffuseColor * (DOTProdAngleWithHypAndOpp)) * distMod;
		modColor = saturate(modColor);

		//DOTProdAngleWithHypAndOpp = saturate(dot(input.normal, dirLightToFace));

		somemoddedinputcolor = somecolor + DOTProdAngleWithHypAndOpp * modColor;// * modColor * 0.75f;

		if(input.normal.x == 1.0)
		{
			somemoddedinputcolor *= 0.555f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.x == -1.0)
		{
			somemoddedinputcolor *=  0.145f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.y == 1.0)
		{
			somemoddedinputcolor*=  0.475f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.y == -1.0)
		{
			somemoddedinputcolor*=  0.135f;//float4(0.15,0.95,0.15,1);
		}
		if(input.normal.z == 1.0)
		{
			somemoddedinputcolor *=  0.765f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.z == -1.0)
		{
			somemoddedinputcolor *=  0.35f;//float4(0.15,0.95,0.15,1);
		}
	
		float somedot = dot(input.normal, dirLightToFace);

		if(somedot <= 0)
		{	
			// Invert the light direction for calculations.
			lightDir = - lightDirection;

			// Calculate the amount of the light on this pixel.
			lightIntensity = saturate(dot(input.normal, dirLightToFace));

			somemoddedinputcolor *=  1 + (saturate(lightIntensity * somedot * distTot*0.35f));
		}
	}
	else
	{
		float DOTProdAngleWithHypAndOpp = saturate(dot(input.normal, dirLightToFace));

		//someOtherDot =  (DOTProdAngleWithHypAndOpp + someOtherDot) * 0.5f;

		float someTester = lightextras.y - distTot;
		float distMod = someTester;
		distMod *= 0.1f;	 //0.01f
		float4 modColor = colorer;

		modColor += (diffuseColor * (DOTProdAngleWithHypAndOpp)) * distMod;
		modColor = saturate(modColor);


		//DOTProdAngleWithHypAndOpp = saturate(dot(input.normal, dirLightToFace));


		somemoddedinputcolor = somecolor + DOTProdAngleWithHypAndOpp * modColor;// * modColor * 0.75f;


		if(input.normal.x == 1.0)
		{
			somemoddedinputcolor *= 0.555f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.x == -1.0)
		{
			somemoddedinputcolor *=  0.145f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.y == 1.0)
		{
			somemoddedinputcolor*=  0.475f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.y == -1.0)
		{
			somemoddedinputcolor*=  0.135f;//float4(0.15,0.95,0.15,1);
		}
		if(input.normal.z == 1.0)
		{
			somemoddedinputcolor *=  0.765f;//float4(0.15,0.95,0.15,1);
		}
	
		if(input.normal.z == -1.0)
		{
			somemoddedinputcolor *=  0.35f;//float4(0.15,0.95,0.15,1);
		}
	}*/
	//NORMALS CALCULATIONS
	//NORMALS CALCULATIONS
	//NORMALS CALCULATIONS
	
	
	
	if(input.normal.x == 1.0)
	{
		somemoddedinputcolor *= 0.555f;//float4(0.15,0.95,0.15,1);
	}
	
	else if(input.normal.x == -1.0)
	{
		somemoddedinputcolor *=  0.145f;//float4(0.15,0.95,0.15,1);
	}
	
	else if(input.normal.y == 1.0)
	{
		somemoddedinputcolor*=  0.475f;//float4(0.15,0.95,0.15,1);
	}
	
	else if(input.normal.y == -1.0)
	{
		somemoddedinputcolor*=  0.135f;//float4(0.15,0.95,0.15,1);
	}
	else if(input.normal.z == 1.0)
	{
		somemoddedinputcolor *=  0.765f;//float4(0.15,0.95,0.15,1);
	}
	
	else if(input.normal.z == -1.0)
	{
		somemoddedinputcolor *=  0.35f;//float4(0.15,0.95,0.15,1);
	}
















	/*
	if(input.normal.x == 1.0)
	{
		somemoddedinputcolor *= 0.555f;//float4(0.15,0.95,0.15,1);
	}
	
	if(input.normal.x == -1.0)
	{
		somemoddedinputcolor *=  0.145f;//float4(0.15,0.95,0.15,1);
	}
	
	if(input.normal.y == 1.0)
	{
		somemoddedinputcolor*=  0.475f;//float4(0.15,0.95,0.15,1);
	}
	
	if(input.normal.y == -1.0)
	{
		somemoddedinputcolor*=  0.135f;//float4(0.15,0.95,0.15,1);
	}
	if(input.normal.z == 1.0)
	{
		somemoddedinputcolor *=  0.765f;//float4(0.15,0.95,0.15,1);
	}
	
	if(input.normal.z == -1.0)
	{
		somemoddedinputcolor *=  0.35f;//float4(0.15,0.95,0.15,1);
	}*/


	/*if(input.normal.y == 1.0)
	{
		somemoddedinputcolor*=  0.475f;//float4(0.15,0.95,0.15,1);
	}
	else
	{
		somemoddedinputcolor = float4(0.0f,0.95,0.0f,1);
	}*/


	/*
	int facetype = int(round(input.color.w));
	
	if(facetype == 2 || round(input.normal.x) == -1.0)//leftface //input.normal.x == -1.0)//
	{
		somemoddedinputcolor = float4(0.95f,0.95,0.0f,1);
	}
	*/
	/*if(facetype == 1)//topface
	{
		somemoddedinputcolor *=  0.475f;//float4(0.15,0.95,0.15,1);
	}
	else if(input.normal.x == -1.0)//facetype == 2)//leftface
	{
		somemoddedinputcolor = float4(0.95f,0.95,0.0f,1);
	}
	else if(facetype == 3)//rightface
	{
		somemoddedinputcolor = float4(0.0f,0.95,0.0f,1);
	}
	else if(facetype == 4)//backface
	{
		somemoddedinputcolor = float4(0.95f,0.0,0.0f,1);
	}
	else if(facetype == 5)//bottom
	{
		somemoddedinputcolor = float4(0.0f,0.0,0.95f,1);
	}*/


	/*else if(facetype == 0)//front
	{
		somemoddedinputcolor = float4(0.45f,0.95,0.75f,1);
	}*/

	/*
	else
	{
		somemoddedinputcolor = float4(0.45f,0.95,0.75f,1);
	}*/









	/*else if(facetype == 2.0f) //left face
	{
		somemoddedinputcolor = float4(0.95f,0.95,0.0f,1);
	}
	else
	{
		somemoddedinputcolor = float4(0.0f,0.0,0.95f,1);
	}*/


	/*else if(facetype == 3.0f)
	{
		somemoddedinputcolor = float4(0.0f,0.95,0.0f,1);
	}
	else if(facetype == 4.0f)
	{
		somemoddedinputcolor = float4(0.0f,0.95,0.0f,1);
	}
	else if(facetype == 5.0f)
	{
		somemoddedinputcolor = float4(0.0f,0.95,0.0f,1);
	}
	else if(facetype == 0.0f)
	{
		somemoddedinputcolor = float4(0.0f,0.95,0.0f,1);
	}*/





	//float3 lightDir;
	//float lightIntensity;
	//float4 colorer;

	
	//float4 chosencolor = cursorcolorgreen;
	//float4 chosencolor = cursorcolorred;
	//float4 chosencolor = cursorcolorblue;
	//float4 chosencolor = cursorcolorgray;
	//float4 chosencolor = cursorcolorblack;
	//float4 chosencolor = cursorcolorwhite;

	colorer = ambientColor;

	lightDir = -lightDirection;

	//inputPos.x = (input.position.x) + input.instancePosition.x;// + somemoddedinputcolor.x;
	//inputPos.y = (input.position.y) + input.instancePosition.y;// + somemoddedinputcolor.y;
	//inputPos.z = (input.position.z) + input.instancePosition.z;// + somemoddedinputcolor.z;

	inputPos = input.instancePosition.xyz;
	distTot = sqrt(((lightPosition.x - inputPos.x)*(lightPosition.x - inputPos.x)) + ((lightPosition.y - inputPos.y)*(lightPosition.y - inputPos.y)) + ((lightPosition.z - inputPos.z)*(lightPosition.z - inputPos.z)));
	//distTot = sc_check_distance_node_3d_geometry(lightPosition, inputPos,2.0f,2.0f,2.0f,2.0f,2.0f,2.0f);
	//distTot = sc_check_distance_node_3d_geometry(lightPosition, inputPos, 3.0f,3.0f,3.0f, 3.0f, 3.0f, 3.0f);
	//distTot = sc_check_distance_node_3d_geometry(lightPosition, inputPos,9.0f,9.0f,9.0f,9.0f,9.0f,9.0f);
	//distTot = sc_check_distance_node_3d_geometry(lightPosition, inputPos,1.0f,1.0f,1.0f,1.4f,1.4f,1.4f);

	dirLightToFace = lightPosition - inputPos;
	dirLightToFace /= distTot;

	someOtherDot = dot(dirLightToFace, lightDir);

	//float DOTProdAngleWithHypAndOpp = saturate(dot(input.normal, lightDir));

	float DOTProdAngleWithHypAndOpp = saturate(dot(input.normal, dirLightToFace));

	someOtherDot =  (DOTProdAngleWithHypAndOpp + someOtherDot) * 0.5f;




	float someTester = lightextras.y - (distTot);
	float distMod = someTester;
	distMod *= 0.01f; //0.01f	
	float4 modColor = colorer;


	if(distTot <= 0.5f) //lightextras.y
	{
		modColor += (diffuseColor * (someOtherDot)) * distMod;
		modColor = saturate(modColor);
		modColor.xyz = somemoddedinputcolor.xyz * modColor.xyz * 1.5f; //0.95f	
	}
	else
	{
		modColor += (diffuseColor * (someOtherDot)) * distMod;
		modColor = saturate(modColor);
		modColor.xyz = somemoddedinputcolor.xyz * modColor.xyz * 1.5f; //0.95f	
	}








	color = ambientColor;
	// Calculate the amount of the light on this pixel.
	lightIntensity = saturate(dot(input.normal.xyz, lightDir));

	// Determine the final diffuse color based on the diffuse color and the amount of the light intensity.
	color += (diffuseColor * lightIntensity);
		
	// Saturate the ambient and diffuse color.
	color = saturate(color);

	// Calculate the reflection vector based on the light intensity, normal vector, and light direction.
	reflection = normalize(2 * lightIntensity * input.normal.xyz - lightDir);

	// Determine the amount of the specular light based on the reflection vector, viewing direction, and specular power.
	specular = pow(saturate(dot(reflection, lightDirection.xyz)) * distTot, lightextras.x); //input..viewDirection
	specular = saturate(color + specular);
	textureColor =modColor * specular; // * cursorcolorred.xyz







	return somemoddedinputcolor;//textureColor;
}








/*/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    //float4 position : SV_POSITION;
	//float4 color : COLOR;
	//float3 normal : NORMAL;
    //float2 tex : TEXCOORD;

	float4 position : SV_POSITION;
	float4 color : COLOR;
	float3 normal : NORMAL;
	float2 texcoord : TEXCOORD;
	float3 lightDirection:LIGHT;
	float3 viewDirection:VIEW;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 TexturePixelShader(PixelInputType input) : SV_TARGET
{
	//float4 textureColor;
    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    //float4 textureColor = shaderTexture.Sample(SampleType, input.color);// * input.tex; 
    //return textureColor;
	//return  input.color;//float4(0.1,0.1,0.1,1);// input.color; //float4(0.1,0.1,0.1,1);

	//float2 parallax=input.viewDirection.xy * normalMap.Sample( textureSampler, input.texcoord).a*bias;
	//float4 D=textureMap.Sample( textureSampler, input.texcoord +parallax);
	//float4 N=normalMap.Sample( textureSampler, input.texcoord +parallax)*2.0f-1.0f;	
	//return saturate(dot(N,input.lightDirection))*D+0.2F;
	return  input.color;
}*/




/*float4 PS( PS_IN input ) : SV_Target
{
	float2 parallax=input.viewDirection.xy * normalMap.Sample( textureSampler, input.texcoord).a*bias;
	float4 D=textureMap.Sample( textureSampler, input.texcoord +parallax);
	float4 N=normalMap.Sample( textureSampler, input.texcoord +parallax)*2.0f-1.0f;	
	return saturate(dot(N,input.lightDirection))*D+0.2F;
}*/
