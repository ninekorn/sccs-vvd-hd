//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace sccsvvdhd.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("sccsvvdhd.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cbuffer MatrixBuffer :register(b0)
        ///{
        ///    matrix world;
        ///    matrix view;
        ///    matrix proj;
        ///};
        ///
        ///
        ///struct ConstantOutputType
        ///{
        ///    float edges[3] : SV_TessFactor;
        ///    float inside : SV_InsideTessFactor;
        ///};
        ///
        ///struct HullOutputType
        ///{
        ///   	float4 position : POSITION0;
        ///	float4 color : COLOR0; //byte map index xyz and w for typeofface 0 to 5
        ///	float3 normal : NORMAL0;
        ///	float paddingvert0 : PSIZE0;	//instance width
        ///	float2 tex : TEXCOORD0;
        ///	//float paddingvert1 : PSIZE1;	//instance height
        ///	//float paddingvert2 : PSIZE2;	 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string colordom {
            get {
                return ResourceManager.GetString("colordom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///cbuffer TessellationBuffer
        ///{
        ///    float tessellationAmount;
        ///    float3 padding;
        ///};
        ///
        ///struct HullInputType
        ///{
        ///    float3 position : POSITION;
        ///    float4 color : COLOR;
        ///};
        ///
        ///struct ConstantOutputType
        ///{
        ///    float edges[3] : SV_TessFactor;
        ///    float inside : SV_InsideTessFactor;
        ///};
        ///
        ///struct HullOutputType
        ///{
        ///    float3 position : POSITION;
        ///    float4 color : COLOR;
        ///};
        ///
        ///ConstantOutputType ColorPatchConstantFunction(InputPatch&lt;HullInputType, 3&gt; inputPatch, uint patchId : SV_PrimitiveID)
        ///{    
        ///    ConstantOutputType ou [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string colorhull {
            get {
                return ResourceManager.GetString("colorhull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cbuffer MatrixBuffer :register(b0)
        ///{
        ///	float4x4 worldMatrix;
        ///	float4x4 viewMatrix;
        ///	float4x4 projectionMatrix;
        ///	//float4x4 worldViewProjection;
        ///}
        ///
        ///Texture2D diffuseMap;
        ///SamplerState textureSampler;
        ///
        ///struct VS_INPUT
        ///{
        ///    float4 position : POSITION;
        ///	float4 color : COLOR;
        ///	float2 tex: TEXCOORD;
        ///	float3 normal : NORMAL;
        ///	//float4 instancePosition : POSITION1;
        ///	//float4 instanceRadRot : POSITION2;
        ///	//float4 instanceRadRotRIGHT : POSITION3;
        ///	//float4 instanceRadRotUP : POSITION4;
        ///};
        ///
        ///struc [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string geoshaderikrig {
            get {
                return ResourceManager.GetString("geoshaderikrig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cbuffer MatrixBuffer :register(b0)
        ///{
        ///	float4x4 worldMatrix;
        ///	float4x4 viewMatrix;
        ///	float4x4 projectionMatrix;
        ///	//float4x4 worldViewProjection;
        ///}
        ///
        ///Texture2D diffuseMap;
        ///SamplerState textureSampler;
        ///
        ///struct VS_INPUT
        ///{
        ///    float4 Pos : POSITION;
        ///	float4 Col : COLOR;
        ///	float2 tex: TEXCOORD;
        ///	//float3 normal : NORMAL;
        ///	//float4 instancePosition : POSITION1;
        ///	//float4 instanceRadRot : POSITION2;
        ///	//float4 instanceRadRotRIGHT : POSITION3;
        ///	//float4 instanceRadRotUP : POSITION4;
        ///};
        ///
        ///struct GS_ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string HLSL {
            get {
                return ResourceManager.GetString("HLSL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cbuffer MatrixBuffer :register(b0)
        ///{
        ///	float4x4 worldMatrix;
        ///	float4x4 viewMatrix;
        ///	float4x4 projectionMatrix;
        ///	//float4x4 worldViewProjection;
        ///}
        ///
        ///Texture2D diffuseMap;
        ///SamplerState textureSampler;
        ///
        ///struct VS_INPUT
        ///{
        ///    float4 Pos : POSITION;
        ///	float4 Col : COLOR;
        ///	float2 tex: TEXCOORD;
        ///	//float3 normal : NORMAL;
        ///	//float4 instancePosition : POSITION1;
        ///	//float4 instanceRadRot : POSITION2;
        ///	//float4 instanceRadRotRIGHT : POSITION3;
        ///	//float4 instanceRadRotUP : POSITION4;
        ///};
        ///
        ///struct GS_ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string HLSL1 {
            get {
                return ResourceManager.GetString("HLSL1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cbuffer MatrixBuffer :register(b0)
        ///{
        ///	float4x4 worldMatrix;
        ///	float4x4 viewMatrix;
        ///	float4x4 projectionMatrix;
        ///	//float4x4 worldViewProjection;
        ///}
        ///
        ///Texture2D diffuseMap;
        ///SamplerState textureSampler;
        ///
        ////*struct VS_INPUT
        ///{
        ///    float4 Pos : POSITION;
        ///	float4 Col : COLOR;
        ///	float2 tex: TEXCOORD;
        ///	//float3 normal : NORMAL;
        ///	//float4 instancePosition : POSITION1;
        ///	//float4 instanceRadRot : POSITION2;
        ///	//float4 instanceRadRotRIGHT : POSITION3;
        ///	//float4 instanceRadRotUP : POSITION4;
        ///};
        ///
        ///struct G [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string HLSLchunkkeyboard {
            get {
                return ResourceManager.GetString("HLSLchunkkeyboard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Texture2D shaderTexture;
        ///SamplerState SampleType;
        ///
        ///SamplerState textureSampler
        ///{
        ///    Filter = MIN_MAG_MIP_LINEAR;
        ///    AddressU = Wrap;
        ///    AddressV = Wrap;
        ///};
        ///
        ///cbuffer MatrixBuffer :register(b0)
        ///{
        ///	float4x4 world;
        ///	float4x4 view;
        ///	float4x4 proj;
        ///};
        ///
        ///cbuffer LightBuffer :register(b1)
        ///{
        ///	float4 ambientColor;
        ///	float4 diffuseColor;
        ///	float3 lightDirection;
        ///	float padding0;
        ///	float3 lightPosition;
        ///	float padding1;
        ///};
        ///
        ///struct PixelInputType
        ///{
        ///    float4 position : SV_POSITION;
        ///	float4  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string sccsvertbindchunkheightmapPS {
            get {
                return ResourceManager.GetString("sccsvertbindchunkheightmapPS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Texture2D shaderTexture;
        ///SamplerState SampleType;
        ///
        ///SamplerState textureSampler
        ///{
        ///    Filter = MIN_MAG_MIP_LINEAR;
        ///    AddressU = Wrap;
        ///    AddressV = Wrap;
        ///};
        ///
        ///cbuffer MatrixBuffer :register(b0)
        ///{
        ///	float4x4 world;
        ///	float4x4 view;
        ///	float4x4 proj;
        ///};
        ///
        ///cbuffer LightBuffer :register(b1)
        ///{
        ///	float4 ambientColor;
        ///	float4 diffuseColor;
        ///	float3 lightDirection;
        ///	float padding0;
        ///	float3 lightPosition;
        ///	float padding1;
        ///};
        ///
        ///struct PixelInputType
        ///{
        ///    float4 position : SV_POSITION;
        ///	float4  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string sccsvertbindchunkheightmapPSdx {
            get {
                return ResourceManager.GetString("sccsvertbindchunkheightmapPSdx", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //////////////////////
        ///////   GLOBALS
        /////////////////////////
        ///Texture2D shaderTexture;
        ///SamplerState SampleType;
        ///
        ///SamplerState textureSampler
        ///{
        ///    Filter = MIN_MAG_MIP_LINEAR;
        ///    AddressU = Wrap;
        ///    AddressV = Wrap;
        ///};
        ///
        ///
        ////*cbuffer LightBuffer
        ///{
        ///	float4 ambientColor;
        ///	float4 diffuseColor;
        ///	float3 lightDirection;
        ///	float specularPower;
        ///	float4 specularColor;
        ///};*/
        ///
        ////*cbuffer LightBuffer :register(b1)
        ///{
        ///	float4 ambientColor;
        ///	float4 diffuseColor;
        ///	float4 specularColor;
        ///	float3 lightD [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string sccsvertbindchunkheightmapPSeight {
            get {
                return ResourceManager.GetString("sccsvertbindchunkheightmapPSeight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        /////////////////////////
        ///////   GLOBALS
        /////////////////////////
        ///Texture2D shaderTexture;
        /////SamplerState SampleType;
        ///
        ///SamplerState SampleType
        ///{
        ///    Filter = MIN_MAG_MIP_LINEAR;
        ///    AddressU = Wrap;
        ///    AddressV = Wrap;
        ///};
        ///
        ////*cbuffer LightBuffer
        ///{
        ///	float4 ambientColor;
        ///	float4 diffuseColor;
        ///	float3 lightDirection;
        ///	float specularPower;
        ///	float4 specularColor;
        ///};*/
        ///
        ////*cbuffer LightBuffer :register(b1)
        ///{
        ///	float4 ambientColor;
        ///	float4 diffuseColor;
        ///	float4 specularColor;
        ///	float3 lightDir [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string sccsvertbindchunkheightmapPSeightdx {
            get {
                return ResourceManager.GetString("sccsvertbindchunkheightmapPSeightdx", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Texture2D shaderTexture;
        ///SamplerState SampleType;
        ///
        ///SamplerState textureSampler
        ///{
        ///    Filter = MIN_MAG_MIP_LINEAR;
        ///    AddressU = Wrap;
        ///    AddressV = Wrap;
        ///};
        ///
        ///cbuffer MatrixBuffer :register(b0)
        ///{
        ///	float4x4 world;
        ///	float4x4 view;
        ///	float4x4 proj;
        ///};
        ///
        ///cbuffer LightBuffer :register(b1)
        ///{
        ///	float4 ambientColor;
        ///	float4 diffuseColor;
        ///	float3 lightDirection;
        ///	float padding0;
        ///	float3 lightPosition;
        ///	float padding1;
        ///};
        ///
        ///struct PixelInputType
        ///{
        ///    float4 position : SV_POSITION;
        ///	float4  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string sccsvertbindchunkheightmapPSsixteendx {
            get {
                return ResourceManager.GetString("sccsvertbindchunkheightmapPSsixteendx", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //MADE BY STEVE CHASS� AKA NINEKORN AKA 9
        ///
        ///
        ///cbuffer MatrixBuffer :register(b0)
        ///{
        ///	float4x4 world;
        ///	float4x4 view;
        ///	float4x4 proj;
        ///};
        ///
        /////cbuffer MatrixBuffer :register(b1)
        /////{
        /////	int mapper[][]
        /////};
        ///
        ///struct VertexInputType
        ///{   
        ///	float4 position : POSITION0;
        ///	float4 color : COLOR0; //byte map index xyz and w for typeofface 0 to 5
        ///	float3 normal : NORMAL0;
        ///	float paddingvert0 : PSIZE0;	//instance width
        ///	float2 tex : TEXCOORD0;
        ///	//float paddingvert1 : PSIZE1;	//instance height
        ///	//float pa [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string sccsvertbindchunkheightmapVS {
            get {
                return ResourceManager.GetString("sccsvertbindchunkheightmapVS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //MADE BY STEVE CHASS� AKA NINEKORN AKA 9
        ///
        ///
        ///cbuffer MatrixBuffer :register(b0)
        ///{
        ///	float4x4 world;
        ///	float4x4 view;
        ///	float4x4 proj;
        ///};
        ///
        ///
        ///cbuffer OVRDir :register(b2)
        ///{
        ///	float4 ovrdirf;
        ///	float4 ovrdiru;
        ///	float4 ovrdirr;
        ///	float4 ovrpos;
        ///	
        ///};
        ///
        ///
        ///
        ///
        /////cbuffer MatrixBuffer :register(b1)
        /////{
        /////	int mapper[][]
        /////};
        ///
        ///struct VertexInputType
        ///{   
        ///	float4 position : POSITION0;
        ///	float4 color : COLOR0; //byte map index xyz and w for typeofface 0 to 5
        ///	float3 normal : NORMAL0;
        ///	float paddingv [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string sccsvertbindchunkheightmapVSdx {
            get {
                return ResourceManager.GetString("sccsvertbindchunkheightmapVSdx", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //MADE BY STEVE CHASS� AKA NINEKORN AKA 9
        ///
        ///cbuffer MatrixBuffer :register(b0)
        ///{
        ///	float4x4 world;
        ///	float4x4 view;
        ///	float4x4 proj;
        ///};
        ///
        ///cbuffer OVRDir :register(b2)
        ///{
        ///	float4 ovrdirf;
        ///	float4 ovrdiru;
        ///	float4 ovrdirr;
        ///	float4 ovrpos;
        ///};
        ///
        ///cbuffer LightBuffer :register(b1)
        ///{
        ///	float4 ambientColor;
        ///	float4 diffuseColor;
        ///	float4 specularColor;
        ///	float4 lightDirection;
        ///	float4 lightPosition;
        ///	float4 lightextras; // z for grid types // 
        ///	float4 gridcolor;
        ///	float4 cursorcolor;
        ///
        ///
        ///
        ///	//float  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string sccsvertbindchunkheightmapVSeight {
            get {
                return ResourceManager.GetString("sccsvertbindchunkheightmapVSeight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //MADE BY STEVE CHASS� AKA NINEKORN AKA 9
        ///
        ///
        ///cbuffer MatrixBuffer :register(b0)
        ///{
        ///	float4x4 world;
        ///	float4x4 view;
        ///	float4x4 proj;
        ///};
        ///
        ///
        ///cbuffer OVRDir :register(b2)
        ///{
        ///	float4 ovrdirf;
        ///	float4 ovrdiru;
        ///	float4 ovrdirr;
        ///	float4 ovrpos;
        ///	
        ///};
        ///
        ///
        ///cbuffer LightBuffer :register(b1)
        ///{
        ///	float4 ambientColor;
        ///	float4 diffuseColor;
        ///	float4 specularColor;
        ///	float4 lightDirection;
        ///	float4 lightPosition;
        ///	float4 lightextras; // z for grid types // 
        ///	float4 gridcolor;
        ///	float4 cursorcolor;
        ///
        ///
        ///
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string sccsvertbindchunkheightmapVSeightdx {
            get {
                return ResourceManager.GetString("sccsvertbindchunkheightmapVSeightdx", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //MADE BY STEVE CHASS� AKA NINEKORN AKA 9
        ///
        ///
        ///cbuffer MatrixBuffer :register(b0)
        ///{
        ///	float4x4 world;
        ///	float4x4 view;
        ///	float4x4 proj;
        ///};
        ///
        ///
        ///cbuffer OVRDir :register(b2)
        ///{
        ///	float4 ovrdirf;
        ///	float4 ovrdiru;
        ///	float4 ovrdirr;
        ///	float4 ovrpos;
        ///	
        ///};
        ///
        ///
        ///
        ///
        /////cbuffer MatrixBuffer :register(b1)
        /////{
        /////	int mapper[][]
        /////};
        ///
        ///struct VertexInputType
        ///{   
        ///	float4 position : POSITION0;
        ///	float4 color : COLOR0; //byte map index xyz and w for typeofface 0 to 5
        ///	float3 normal : NORMAL0;
        ///	float paddingv [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string sccsvertbindchunkheightmapVSsixteendx {
            get {
                return ResourceManager.GetString("sccsvertbindchunkheightmapVSsixteendx", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Texture2D shaderTexture;
        ///SamplerState SampleType;
        ///
        ///SamplerState textureSampler
        ///{
        ///    Filter = MIN_MAG_MIP_LINEAR;
        ///    AddressU = Wrap;
        ///    AddressV = Wrap;
        ///};
        ///
        ///cbuffer MatrixBuffer :register(b0)
        ///{
        ///	float4x4 world;
        ///	float4x4 view;
        ///	float4x4 proj;
        ///};
        ///
        ///cbuffer LightBuffer :register(b1)
        ///{
        ///	float4 ambientColor;
        ///	float4 diffuseColor;
        ///	float3 lightDirection;
        ///	float padding0;
        ///	float3 lightPosition;
        ///	float padding1;
        ///};
        ///
        ///struct PixelInputType
        ///{
        ///    float4 position : SV_POSITION;
        ///	float4  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string sccsvertbindchunkPS {
            get {
                return ResourceManager.GetString("sccsvertbindchunkPS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Texture2D shaderTexture;
        ///SamplerState SampleType;
        ///
        ///SamplerState textureSampler
        ///{
        ///    Filter = MIN_MAG_MIP_LINEAR;
        ///    AddressU = Wrap;
        ///    AddressV = Wrap;
        ///};
        ///
        ///cbuffer MatrixBuffer :register(b0)
        ///{
        ///	float4x4 world;
        ///	float4x4 view;
        ///	float4x4 proj;
        ///};
        ///
        ///cbuffer LightBuffer :register(b1)
        ///{
        ///	float4 ambientColor;
        ///	float4 diffuseColor;
        ///	float3 lightDirection;
        ///	float padding0;
        ///	float3 lightPosition;
        ///	float padding1;
        ///};
        ///
        ///struct PixelInputType
        ///{
        ///    float4 position : SV_POSITION;
        ///	float4  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string sccsvertbindchunkPSdx {
            get {
                return ResourceManager.GetString("sccsvertbindchunkPSdx", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //MADE BY STEVE CHASS� AKA NINEKORN AKA 9
        ///
        ///
        ///cbuffer MatrixBuffer :register(b0)
        ///{
        ///	float4x4 world;
        ///	float4x4 view;
        ///	float4x4 proj;
        ///};
        ///
        /////cbuffer MatrixBuffer :register(b1)
        /////{
        /////	int mapper[][]
        /////};
        ///
        ///struct VertexInputType
        ///{   
        ///	float4 position : POSITION0;
        ///	float4 color : COLOR0; //byte map index xyz and w for typeofface 0 to 5
        ///	float3 normal : NORMAL0;
        ///	float paddingvert0 : PSIZE0;	//instance width
        ///	float2 tex : TEXCOORD0;
        ///	//float paddingvert1 : PSIZE1;	//instance height
        ///	//float pa [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string sccsvertbindchunkVS {
            get {
                return ResourceManager.GetString("sccsvertbindchunkVS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //MADE BY STEVE CHASS� AKA NINEKORN AKA 9
        ///
        ///
        ///cbuffer MatrixBuffer :register(b0)
        ///{
        ///	float4x4 world;
        ///	float4x4 view;
        ///	float4x4 proj;
        ///};
        ///
        /////cbuffer MatrixBuffer :register(b1)
        /////{
        /////	int mapper[][]
        /////};
        ///
        ///struct VertexInputType
        ///{   
        ///	float4 position : POSITION0;
        ///	float4 color : COLOR0; //byte map index xyz and w for typeofface 0 to 5
        ///	float3 normal : NORMAL0;
        ///	float paddingvert0 : PSIZE0;	//instance width
        ///	float2 tex : TEXCOORD0;
        ///	//float paddingvert1 : PSIZE1;	//instance height
        ///	//float pa [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string sccsvertbindchunkVSdx {
            get {
                return ResourceManager.GetString("sccsvertbindchunkVSdx", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Texture2D shaderTexture;
        ///SamplerState SampleType;
        ///
        ///SamplerState textureSampler
        ///{
        ///    Filter = MIN_MAG_MIP_LINEAR;
        ///    AddressU = Wrap;
        ///    AddressV = Wrap;
        ///};
        ///
        ///cbuffer LightBuffer
        ///{
        ///	float4 ambientColor;
        ///	float4 diffuseColor;
        ///	float3 lightDirection;
        ///	float padding0;
        ///	float3 lightPosition;
        ///	float padding1;
        ///};
        ///
        ///struct PixelInputType
        ///{ 
        ///	float4 position : POSITION;
        ///    float2 tex : TEXCOORD0;
        ///	float4 color : COLOR;
        ///	float3 normal : NORMAL;
        ///	float4 instancePosition : POSITION1;
        ///	float [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string texture {
            get {
                return ResourceManager.GetString("texture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Texture2D shaderTexture;
        ///SamplerState SampleType;
        ///
        ///SamplerState textureSampler
        ///{
        ///    Filter = MIN_MAG_MIP_LINEAR;
        ///    AddressU = Wrap;
        ///    AddressV = Wrap;
        ///};
        ///
        ///cbuffer LightBuffer
        ///{
        ///	float4 ambientColor;
        ///	float4 diffuseColor;
        ///	float3 lightDirection;
        ///	float padding0;
        ///	float3 lightPosition;
        ///	float padding1;
        ///};
        ///
        ///struct PixelInputType
        ///{ 
        ///	float4 position : POSITION;
        ///    float2 tex : TEXCOORD0;
        ///	float4 color : COLOR;
        ///	float3 normal : NORMAL;
        ///	float4 instancePosition : POSITION1;
        ///	float [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string texture_voxel {
            get {
                return ResourceManager.GetString("texture_voxel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cbuffer MatrixBuffer : register(b0)
        ///{
        ///	matrix worldMatrix;
        ///	matrix viewMatrix;
        ///	matrix projectionMatrix;
        ///};
        ///
        ///struct VertexInputType
        ///{
        ///    float4 position : POSITION;
        ///    float2 tex : TEXCOORD0;
        ///	float4 color : COLOR;
        ///	float3 normal : NORMAL;
        ///	float4 instancePosition : POSITION1;
        ///	float4 instanceRadRot : POSITION2;
        ///	float4 instanceRadRotRIGHT : POSITION3;
        ///	float4 instanceRadRotUP : POSITION4;
        ///};
        ///
        ///struct PixelInputType
        ///{
        ///    float4 position : SV_POSITION;
        ///    float2 tex : TEXCOORD0;
        ///	fl [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string texture_voxel1 {
            get {
                return ResourceManager.GetString("texture_voxel1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Texture2D shaderTexture;
        ///SamplerState SampleType;
        ///
        ////*SamplerState textureSampler
        ///{
        ///    Filter = MIN_MAG_MIP_LINEAR;
        ///    AddressU = Wrap;
        ///    AddressV = Wrap;
        ///};*/
        ///
        ///cbuffer LightBuffer
        ///{
        ///	float4 ambientColor;
        ///	float4 diffuseColor;
        ///	float3 lightDirection;
        ///	float padding0;
        ///	float3 lightPosition;
        ///	float padding1;
        ///};
        ///
        ///struct PixelInputType
        ///{ 
        ///	float4 position : POSITION;
        ///    float2 tex : TEXCOORD0;
        ///	float4 color : COLOR;
        ///	float3 normal : NORMAL;
        ///	float4 instancePosition : POSITION1;
        ///	f [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string texture_voxelPS {
            get {
                return ResourceManager.GetString("texture_voxelPS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cbuffer MatrixBuffer : register(b0)
        ///{
        ///	matrix worldMatrix;
        ///	matrix viewMatrix;
        ///	matrix projectionMatrix;
        ///};
        ///
        ///struct VertexInputType
        ///{
        ///    float4 position : POSITION;
        ///    float2 tex : TEXCOORD0;
        ///	float4 color : COLOR;
        ///	float3 normal : NORMAL;
        ///	float4 instancePosition : POSITION1;
        ///	float4 instanceRadRot : POSITION2;
        ///	float4 instanceRadRotRIGHT : POSITION3;
        ///	float4 instanceRadRotUP : POSITION4;
        ///};
        ///
        ///struct PixelInputType
        ///{
        ///    float4 position : SV_POSITION;
        ///    float2 tex : TEXCOORD0;
        ///	fl [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string texture_voxelVS {
            get {
                return ResourceManager.GetString("texture_voxelVS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cbuffer MatrixBuffer : register(b0)
        ///{
        ///	matrix worldMatrix;
        ///	matrix viewMatrix;
        ///	matrix projectionMatrix;
        ///};
        ///
        ///struct VertexInputType
        ///{
        ///    float4 position : POSITION;
        ///    float2 tex : TEXCOORD0;
        ///	float4 color : COLOR;
        ///	float3 normal : NORMAL;
        ///	float4 instancePosition : POSITION1;
        ///	float4 instanceRadRot : POSITION2;
        ///	float4 instanceRadRotRIGHT : POSITION3;
        ///	float4 instanceRadRotUP : POSITION4;
        ///};
        ///
        ///struct PixelInputType
        ///{
        ///    float4 position : SV_POSITION;
        ///    float2 tex : TEXCOORD0;
        ///	fl [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string texture1 {
            get {
                return ResourceManager.GetString("texture1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Texture2D shaderTexture;
        ///SamplerState SampleType;
        ///
        ///SamplerState textureSampler
        ///{
        ///    Filter = MIN_MAG_MIP_LINEAR;
        ///    AddressU = Wrap;
        ///    AddressV = Wrap;
        ///};
        ///
        ///cbuffer LightBuffer
        ///{
        ///	float4 ambientColor;
        ///	float4 diffuseColor;
        ///	float3 lightDirection;
        ///	float padding0;
        ///	float3 lightPosition;
        ///	float padding1;
        ///};
        ///
        ///struct PixelInputType
        ///{ 
        ///	float4 position : POSITION;
        ///    float2 tex : TEXCOORD0;
        ///	float4 color : COLOR;
        ///	float3 normal : NORMAL;
        ///	float4 instancePosition : POSITION1;
        ///	float [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string texturePS {
            get {
                return ResourceManager.GetString("texturePS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Texture2D shaderTexture;
        ///SamplerState SampleType;
        ///
        ///SamplerState textureSampler
        ///{
        ///    Filter = MIN_MAG_MIP_LINEAR;
        ///    AddressU = Wrap;
        ///    AddressV = Wrap;
        ///};
        ///
        ///cbuffer LightBuffer
        ///{
        ///	float4 ambientColor;
        ///	float4 diffuseColor;
        ///	float3 lightDirection;
        ///	float padding0;
        ///	float3 lightPosition;
        ///	float padding1;
        ///};
        ///
        ///struct PixelInputType
        ///{ 
        ///	float4 position : POSITION;
        ///    float2 tex : TEXCOORD0;
        ///	float4 color : COLOR;
        ///	float3 normal : NORMAL;
        ///	float4 instancePosition : POSITION1;
        ///	float [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string texturePSassets {
            get {
                return ResourceManager.GetString("texturePSassets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ////////////////////////
        ///////   GLOBALS
        /////////////////////////
        ///
        ///Texture2D shaderTexture;
        ///SamplerState SampleType;
        ///
        ///SamplerState textureSampler
        ///{
        ///    Filter = MIN_MAG_MIP_LINEAR;
        ///    AddressU = Wrap;
        ///    AddressV = Wrap;
        ///};
        ///
        ////*cbuffer LightBuffer
        ///{
        ///	float4 ambientColor;
        ///	float4 diffuseColor;
        ///	float3 lightDirection;
        ///	float padding;
        ///};*/
        ///
        ///cbuffer LightBuffer
        ///{
        ///	float4 ambientColor;
        ///	float4 diffuseColor;
        ///	float3 lightDirection;
        ///	float padding0;
        ///	float3 lightPosition;
        ///	float padding1; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string textureTrigChunkPS {
            get {
                return ResourceManager.GetString("textureTrigChunkPS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Texture2D shaderTexture;
        ///SamplerState SampleType;
        ///
        ///SamplerState textureSampler
        ///{
        ///    Filter = MIN_MAG_MIP_LINEAR;
        ///    AddressU = Wrap;
        ///    AddressV = Wrap;
        ///};
        ///
        ///cbuffer LightBuffer
        ///{
        ///	float4 ambientColor;
        ///	float4 diffuseColor;
        ///	float3 lightDirection;
        ///	float padding0;
        ///	float3 lightPosition;
        ///	float padding1;
        ///};
        ///
        ///struct PixelInputType
        ///{ 
        ///	float4 position : POSITION;
        ///    float2 tex : TEXCOORD0;
        ///	float4 color : COLOR;
        ///	float3 normal : NORMAL;
        ///	float4 instancePosition : POSITION1;
        ///	float [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string textureTrigChunkPSdx {
            get {
                return ResourceManager.GetString("textureTrigChunkPSdx", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cbuffer MatrixBuffer :register(b0)
        ///{
        ///	float4x4 world;
        ///	float4x4 view;
        ///	float4x4 proj;
        ///};
        ///
        /////cbuffer MatrixBuffer :register(b1)
        /////{
        /////	int mapper[][]
        /////};
        ///
        ///struct VertexInputType
        ///{
        ///    float4 position : POSITION0;
        ///	float4 indexPos : POSITION1;
        ///	float4 color : COLOR0;
        ///	float3 normal : NORMAL0;
        ///	float2 tex : TEXCOORD0;
        ///	int one : PSIZE0;	
        ///	int two : PSIZE1;	
        ///	int three : PSIZE2;	
        ///	int four : PSIZE3;	
        ///	int oneTwo : PSIZE4;	
        ///	int twoTwo : PSIZE5;	
        ///	int threeTwo : PSIZE6;	
        ///	int fourTwo : [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string textureTrigChunkVS {
            get {
                return ResourceManager.GetString("textureTrigChunkVS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cbuffer MatrixBuffer :register(b0)
        ///{
        ///	float4x4 world;
        ///	float4x4 view;
        ///	float4x4 proj;
        ///};
        ///
        /////cbuffer MatrixBuffer :register(b1)
        /////{
        /////	int mapper[][]
        /////};
        ///
        ///struct VertexInputType
        ///{
        ///    float4 position : POSITION0;
        ///	float4 indexPos : POSITION1;
        ///	float4 color : COLOR0;
        ///	float3 normal : NORMAL0;
        ///	float2 tex : TEXCOORD0;
        ///	int one : PSIZE0;	
        ///	int two : PSIZE1;	
        ///	int three : PSIZE2;	
        ///	int four : PSIZE3;	
        ///	int oneTwo : PSIZE4;	
        ///	int twoTwo : PSIZE5;	
        ///	int threeTwo : PSIZE6;	
        ///	int fourTwo : [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string textureTrigChunkVSdx {
            get {
                return ResourceManager.GetString("textureTrigChunkVSdx", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cbuffer MatrixBuffer : register(b0)
        ///{
        ///	matrix worldMatrix;
        ///	matrix viewMatrix;
        ///	matrix projectionMatrix;
        ///};
        ///
        ///struct VertexInputType
        ///{
        ///    float4 position : POSITION;
        ///    float2 tex : TEXCOORD0;
        ///	float4 color : COLOR;
        ///	float3 normal : NORMAL;
        ///	float4 instancePosition : POSITION1;
        ///	float4 instanceRadRot : POSITION2;
        ///	float4 instanceRadRotRIGHT : POSITION3;
        ///	float4 instanceRadRotUP : POSITION4;
        ///};
        ///
        ///struct PixelInputType
        ///{
        ///    float4 position : SV_POSITION;
        ///    float2 tex : TEXCOORD0;
        ///	fl [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string textureVS {
            get {
                return ResourceManager.GetString("textureVS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cbuffer MatrixBuffer : register(b0)
        ///{
        ///	matrix worldMatrix;
        ///	matrix viewMatrix;
        ///	matrix projectionMatrix;
        ///};
        ///
        ///struct VertexInputType
        ///{
        ///    float4 position : POSITION;
        ///    float2 tex : TEXCOORD0;
        ///	float4 color : COLOR;
        ///	float3 normal : NORMAL;
        ///	float4 instancePosition : POSITION1;
        ///	float4 instanceRadRot : POSITION2;
        ///	float4 instanceRadRotRIGHT : POSITION3;
        ///	float4 instanceRadRotUP : POSITION4;
        ///};
        ///
        ///struct PixelInputType
        ///{
        ///    float4 position : SV_POSITION;
        ///    float2 tex : TEXCOORD0;
        ///	fl [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string textureVSassets {
            get {
                return ResourceManager.GetString("textureVSassets", resourceCulture);
            }
        }
    }
}
