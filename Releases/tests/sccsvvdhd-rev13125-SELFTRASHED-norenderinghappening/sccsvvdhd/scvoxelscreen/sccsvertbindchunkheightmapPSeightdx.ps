
//////////////////////
////   GLOBALS
//////////////////////
Texture2D shaderTexture;
//SamplerState SampleType;

SamplerState SampleType
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};

/*cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float specularPower;
	float4 specularColor;
};*/

/*cbuffer LightBuffer :register(b1)
{
	float4 ambientColor;
	float4 diffuseColor;
	float4 specularColor;
	float3 lightDirection;
	float padding0;
	float3 lightPosition;
	float lightextras.y;
};*/

cbuffer LightBuffer //:register(b1)
{
	float4 ambientColor;
	float4 diffuseColor;
	float4 specularColor;
	float4 lightDirection;
	float4 lightPosition;
	float4 lightextras; // z for grid types // 
	float4 gridcolor;
	float4 cursorcolor;



	//float padding0;
	//float3 lightPosition;
	//float lightextras.y;
};


/*
cbuffer OVRDir :register(b2)
{
	float4 ovrdirf;
	float4 ovrdiru;
	float4 ovrdirr;
	float4 ovrpos;
};
*/


//////////////////////
////   TYPES
//////////////////////
struct PixelInputType
{
	float4 position : SV_POSITION;
	float4 color : COLOR0; //byte map index xyz and w for typeofface 0 to 5
	float3 normal : NORMAL0;
	float paddingvert0 : PSIZE0;	//instance width
	float2 tex : TEXCOORD0;
	float paddingvert1 : PSIZE1;	//instance height
	float paddingvert2 : PSIZE2;	//instance depth
	float4 instancePosition : POSITION1;
	
	/*float4 instanceRadRotFORWARD : POSITION2;
	float4 instanceRadRotRIGHT : POSITION3;
	float4 instanceRadRotUP : POSITION4;
	float4 mapmatrix0 : POSITION5;
	float4 mapmatrix1 : POSITION6;
	float4 mapmatrix2 : POSITION7;
	float4 mapmatrix3 : POSITION8;
	float4 mapmatrix4 : POSITION9;
	float4 mapmatrix5 : POSITION10;
	float4 mapmatrix6 : POSITION11;
	float4 mapmatrix7 : POSITION12;
	float4 mapmatrix8 : POSITION13;
	float4 mapmatrix9 : POSITION14;
	float4 mapmatrix10 : POSITION15;
	float4 mapmatrix11 : POSITION16;
	float4 mapmatrix12 : POSITION17;
	float4 mapmatrix13 : POSITION18;
	float4 mapmatrix14 : POSITION19;
	float4 mapmatrix15 : POSITION20;*/


	int xindex : PSIZE3;	
	int yindex : PSIZE4;
};

//float _lastDOTProdAngleWithHypAndOpp = -1;
static const float PI = 3.1415926535897932384626433832795f;
static const float3 world_forward = float3(0,0,1);
static const float3 world_backward = float3(0,0,-1);
static const float3 world_right = float3(1,0,0);
static const float3 world_left = float3(-1,0,0);
static const float3 world_up = float3(0,1,0);
static const float3 world_down = float3(0,-1,0);


static float dstX= 0;
static float dstY= 0;
static float dstZ = 0;
static float dstX_vs_dstZ = 0;
static float dstX_vs_dstY = 0;
static float dstY_vs_dstZ = 0;

float sc_check_distance_node_3d_geometry(float3 nodeA, float3 nodeB, float minx, float miny, float minz, float maxx, float maxy, float maxz) 
{
	//STEVE CHASSÃ‰ 3D blueprint for sphere type and a ton more. based on 2d version of Sebastian Lague. but my version is not perfect. i don't know yet what else to put in there.
	//the solution was easier than i thought and it came to me quite fast after fearing for months i'd never be able to quickly get this function written. This function is also a
	//main part of the upgrade that i want to implement to the Jitter physics engine for spatial awareness. In the jitter physics engine, it seems as if every frame that the objects
	//are enabled and non-static, jitter checks ALL bounding boxes for collisions between all of them. So of course at some point, the more objects in the scene, the more bounding
	//boxes it has to check for each individual objects. for instance, lets say there is 1000 objects in the scene, so index 0 to index 999, if object 0 checks against ALL other
	//998 objects, it's a huge waste of performance. But there are collision "islands" in the jitter physics engine but those i believe are chosen only when bounding boxes are 
	//officially declared as colliding. so i want to see if i can use a fast distance checker (which i didnt test yet against Math.Sqrt or the very fast quake sqrt). But all of
	//the things i learned in doing chunks are also going to be needed for when im going to start developing things around and inside of the Jitter Physics Engine. So prior upgrading the physics
	//engine jitter for my engine sccoresystems, i can only have 4000 max objects and it would lag the scene. but the tests are not carved on rock yet because, 
	//1. im not loading the dll how i should maybe
	//2. maybe because multiple instances of the physics engine like i am loading them isn't the proper way to do it? in monogame, to load different scene instances, they use 
	//   Activator.CreateInstance and i was unable to use that anywhere back then. I might try again at some point... But right now i am using an interface. In sccsv10
	//


	dstX = abs((nodeA.x) - (nodeB.x));
	dstY = abs((nodeA.y) - (nodeB.y));
	dstZ = abs((nodeA.z) - (nodeB.z));

	dstX_vs_dstZ = 0;
	dstX_vs_dstY = 0;
	dstY_vs_dstZ = 0;

	if (dstX > dstZ)
	{
		dstX_vs_dstZ = maxx * dstZ + minx * (dstX - dstZ);
	}
	else
	{
		dstX_vs_dstZ = maxx * dstX + minx * (dstZ - dstX);
	}

	if (dstX > dstY)
	{
		dstX_vs_dstY = maxy * dstY + miny * (dstX - dstY);
	}
	else
	{
		dstX_vs_dstY = maxy * dstX + miny * (dstY - dstX);
	}

	if (dstY > dstZ)
	{
		dstY_vs_dstZ = maxz * dstZ + minz * (dstY - dstZ);
	}
	else
	{
		dstY_vs_dstZ = maxz * dstY + minz * (dstZ - dstY);
	}
	return dstX_vs_dstY + dstX_vs_dstZ + dstY_vs_dstZ;
}

static float4 the_color = float4(1.0f,1.0f,1.0f,1.0f);// float4(0.95f,0.95f,0.95f,1);

static float4 gridcolorred = float4(1,0,0,1);
static float4 gridcolorgreen = float4(0.45f,1,0.45f,1);
static float4 gridcolorblue = float4(0,0,1,1);
static float4 gridcolorgray = float4(0.15f,0.15f,0.15f,1);
static float4 gridcolorblack = float4(0.0f,0.0f,0.0f,1);
static float4 gridcolorwhite = float4(1.0f,1.0f,1.0f,1);

static float4 cursorcolorred = float4(1,0.45f,0.45f,1);
static float4 cursorcolorgreen = float4(0.45f,1,0.45f,1);
static float4 cursorcolorblue = float4(0.45f,0.45f,1,1);
static float4 cursorcolorgray = float4(0.15f,0.15f,0.15f,1);
static float4 cursorcolorblack = float4(0.0f,0.0f,0.0f,1);
static float4 cursorcolorwhite = float4(1.0f,1.0f,1.0f,1);



static int heightmapw = 4;
static int heightmaph = 4;
static int heightmapd = 1;

float planeSize = 0.05f;
//static int mapWidth = 4;
//static int mapHeight = 4;
//static int mapDepth = 4;

static int tinyChunkWidth = 8; // 4 // 8
static int tinyChunkHeight = 8; // 4 // 5
static int tinyChunkDepth = 1; // 4 // 8 // 1
static const int maxfloatbytemaparraylength = 8; //4 // 8 
static const int maxfloatbytemaparraylengthfull = 9; //5 // 9
static float arrayOfDigits[maxfloatbytemaparraylength];
static float arrayOfDigitsFull[maxfloatbytemaparraylengthfull];

//int iVar[3] = {1,2,3};
//int someoptions[1] = {0};
static int somebytemap[1008];//  = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static int somebytemapswtc[1008];// = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

//21 * 6 * 8 = 1008

static float initialmap = 51111.0;

static float4 mod_input_vertex_pos;

static float3 forwardDir;
static float3 rightDir;
static float3 upDir;

static float3 MOVINGPOINT;
static float3 vertPos;
static float diffX;
static float diffY;
static float diffZ;


static int facetype;
static float currentByte = 0.0;
static int currentMapData;
static int currentIndex;
static int someOtherIndex;
static int somecountermul;


float DegreeToRadian(float angle)
{
   return PI * angle / 180.0f;
}

float RadianToDegree(float angle)
{
  return angle * (180.0f / PI);
}


//////////////////////
////   Pixel Shader
/////////////////////
float4 TexturePixelShader(PixelInputType input) : SV_TARGET
{
	//float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;
	float3 reflection;
	float4 specular;

	// Sample the pixel color from the texture using the sampler at this texture coordinate location.
	float4 textureColor = shaderTexture.Sample(SampleType, input.tex);

	return float4(0.15f,0.15f,0.15f,1.0f) ;//color;// textureColor;
}
